[
    {
        "id": "32896991458",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 3491887,
            "login": "FranzBusch",
            "display_login": "FranzBusch",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FranzBusch",
            "avatar_url": "https://avatars.githubusercontent.com/u/3491887?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 20,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-27T11:23:23Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 2,
                    "+1": 2,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1782746068",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1782746068",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1782746068,
                "node_id": "IC_kwDOBy6rG85qQovU",
                "user": {
                    "login": "FranzBusch",
                    "id": 3491887,
                    "node_id": "MDQ6VXNlcjM0OTE4ODc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/3491887?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/FranzBusch",
                    "html_url": "https://github.com/FranzBusch",
                    "followers_url": "https://api.github.com/users/FranzBusch/followers",
                    "following_url": "https://api.github.com/users/FranzBusch/following{/other_user}",
                    "gists_url": "https://api.github.com/users/FranzBusch/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/FranzBusch/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/FranzBusch/subscriptions",
                    "organizations_url": "https://api.github.com/users/FranzBusch/orgs",
                    "repos_url": "https://api.github.com/users/FranzBusch/repos",
                    "events_url": "https://api.github.com/users/FranzBusch/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/FranzBusch/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T11:23:23Z",
                "updated_at": "2023-10-27T11:23:23Z",
                "author_association": "CONTRIBUTOR",
                "body": "Thanks for all the reports. I opened a PR https://github.com/apple/swift-nio/pull/2579 that backs out the new APIs that are the culprit for this crash for now. I would appreciate if @MatthewTHFisher you could re-run your test but point at my PR branch. ",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1782746068/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T11:23:24Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32896971470",
        "type": "PullRequestEvent",
        "actor": {
            "id": 3491887,
            "login": "FranzBusch",
            "display_login": "FranzBusch",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FranzBusch",
            "avatar_url": "https://avatars.githubusercontent.com/u/3491887?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "opened",
            "number": 2579,
            "pull_request": {
                "url": "https://api.github.com/repos/apple/swift-nio/pulls/2579",
                "id": 1576416223,
                "node_id": "PR_kwDOBy6rG85d9jPf",
                "html_url": "https://github.com/apple/swift-nio/pull/2579",
                "diff_url": "https://github.com/apple/swift-nio/pull/2579.diff",
                "patch_url": "https://github.com/apple/swift-nio/pull/2579.patch",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2579",
                "number": 2579,
                "state": "open",
                "locked": false,
                "title": "Back out new typed HTTP protocol upgrader",
                "user": {
                    "login": "FranzBusch",
                    "id": 3491887,
                    "node_id": "MDQ6VXNlcjM0OTE4ODc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/3491887?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/FranzBusch",
                    "html_url": "https://github.com/FranzBusch",
                    "followers_url": "https://api.github.com/users/FranzBusch/followers",
                    "following_url": "https://api.github.com/users/FranzBusch/following{/other_user}",
                    "gists_url": "https://api.github.com/users/FranzBusch/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/FranzBusch/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/FranzBusch/subscriptions",
                    "organizations_url": "https://api.github.com/users/FranzBusch/orgs",
                    "repos_url": "https://api.github.com/users/FranzBusch/repos",
                    "events_url": "https://api.github.com/users/FranzBusch/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/FranzBusch/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Motivation\r\nWe got reports in https://github.com/apple/swift-nio/issues/2574 that our new typed HTTP upgrader are hitting a Swift compiler bug which manifests in a runtime crash on older iOS/macOS/etc.\r\n\r\n# Modification\r\nThis PR backs out the new typed HTTP protocol upgrader APIs so that we can unblock our users until the Swift compiler bug is fixed.\r\n\r\n# Result\r\nNo more crashes for our users.\r\n",
                "created_at": "2023-10-27T11:22:30Z",
                "updated_at": "2023-10-27T11:22:30Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": null,
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [],
                "requested_teams": [],
                "labels": [],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/apple/swift-nio/pulls/2579/commits",
                "review_comments_url": "https://api.github.com/repos/apple/swift-nio/pulls/2579/comments",
                "review_comment_url": "https://api.github.com/repos/apple/swift-nio/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2579/comments",
                "statuses_url": "https://api.github.com/repos/apple/swift-nio/statuses/93405f7e7f48b75883a41fc2f1da26da411c5d86",
                "head": {
                    "label": "FranzBusch:fb-back-out-typed-http-upgrader",
                    "ref": "fb-back-out-typed-http-upgrader",
                    "sha": "93405f7e7f48b75883a41fc2f1da26da411c5d86",
                    "user": {
                        "login": "FranzBusch",
                        "id": 3491887,
                        "node_id": "MDQ6VXNlcjM0OTE4ODc=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/3491887?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/FranzBusch",
                        "html_url": "https://github.com/FranzBusch",
                        "followers_url": "https://api.github.com/users/FranzBusch/followers",
                        "following_url": "https://api.github.com/users/FranzBusch/following{/other_user}",
                        "gists_url": "https://api.github.com/users/FranzBusch/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/FranzBusch/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/FranzBusch/subscriptions",
                        "organizations_url": "https://api.github.com/users/FranzBusch/orgs",
                        "repos_url": "https://api.github.com/users/FranzBusch/repos",
                        "events_url": "https://api.github.com/users/FranzBusch/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/FranzBusch/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 437789582,
                        "node_id": "R_kgDOGhgjjg",
                        "name": "swift-nio",
                        "full_name": "FranzBusch/swift-nio",
                        "private": false,
                        "owner": {
                            "login": "FranzBusch",
                            "id": 3491887,
                            "node_id": "MDQ6VXNlcjM0OTE4ODc=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/3491887?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/FranzBusch",
                            "html_url": "https://github.com/FranzBusch",
                            "followers_url": "https://api.github.com/users/FranzBusch/followers",
                            "following_url": "https://api.github.com/users/FranzBusch/following{/other_user}",
                            "gists_url": "https://api.github.com/users/FranzBusch/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/FranzBusch/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/FranzBusch/subscriptions",
                            "organizations_url": "https://api.github.com/users/FranzBusch/orgs",
                            "repos_url": "https://api.github.com/users/FranzBusch/repos",
                            "events_url": "https://api.github.com/users/FranzBusch/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/FranzBusch/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/FranzBusch/swift-nio",
                        "description": "Event-driven network application framework for high performance protocol servers & clients, non-blocking.",
                        "fork": true,
                        "url": "https://api.github.com/repos/FranzBusch/swift-nio",
                        "forks_url": "https://api.github.com/repos/FranzBusch/swift-nio/forks",
                        "keys_url": "https://api.github.com/repos/FranzBusch/swift-nio/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/FranzBusch/swift-nio/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/FranzBusch/swift-nio/teams",
                        "hooks_url": "https://api.github.com/repos/FranzBusch/swift-nio/hooks",
                        "issue_events_url": "https://api.github.com/repos/FranzBusch/swift-nio/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/FranzBusch/swift-nio/events",
                        "assignees_url": "https://api.github.com/repos/FranzBusch/swift-nio/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/FranzBusch/swift-nio/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/FranzBusch/swift-nio/tags",
                        "blobs_url": "https://api.github.com/repos/FranzBusch/swift-nio/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/FranzBusch/swift-nio/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/FranzBusch/swift-nio/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/FranzBusch/swift-nio/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/FranzBusch/swift-nio/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/FranzBusch/swift-nio/languages",
                        "stargazers_url": "https://api.github.com/repos/FranzBusch/swift-nio/stargazers",
                        "contributors_url": "https://api.github.com/repos/FranzBusch/swift-nio/contributors",
                        "subscribers_url": "https://api.github.com/repos/FranzBusch/swift-nio/subscribers",
                        "subscription_url": "https://api.github.com/repos/FranzBusch/swift-nio/subscription",
                        "commits_url": "https://api.github.com/repos/FranzBusch/swift-nio/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/FranzBusch/swift-nio/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/FranzBusch/swift-nio/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/FranzBusch/swift-nio/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/FranzBusch/swift-nio/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/FranzBusch/swift-nio/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/FranzBusch/swift-nio/merges",
                        "archive_url": "https://api.github.com/repos/FranzBusch/swift-nio/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/FranzBusch/swift-nio/downloads",
                        "issues_url": "https://api.github.com/repos/FranzBusch/swift-nio/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/FranzBusch/swift-nio/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/FranzBusch/swift-nio/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/FranzBusch/swift-nio/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/FranzBusch/swift-nio/labels{/name}",
                        "releases_url": "https://api.github.com/repos/FranzBusch/swift-nio/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/FranzBusch/swift-nio/deployments",
                        "created_at": "2021-12-13T08:17:58Z",
                        "updated_at": "2021-12-13T08:17:59Z",
                        "pushed_at": "2023-10-27T11:22:25Z",
                        "git_url": "git://github.com/FranzBusch/swift-nio.git",
                        "ssh_url": "git@github.com:FranzBusch/swift-nio.git",
                        "clone_url": "https://github.com/FranzBusch/swift-nio.git",
                        "svn_url": "https://github.com/FranzBusch/swift-nio",
                        "homepage": "https://apple.github.io/swift-nio/",
                        "size": 46422,
                        "stargazers_count": 0,
                        "watchers_count": 0,
                        "language": null,
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "apache-2.0",
                            "name": "Apache License 2.0",
                            "spdx_id": "Apache-2.0",
                            "url": "https://api.github.com/licenses/apache-2.0",
                            "node_id": "MDc6TGljZW5zZTI="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 0,
                        "default_branch": "main"
                    }
                },
                "base": {
                    "label": "apple:main",
                    "ref": "main",
                    "sha": "740fc734f3266e8e374817cea0db48d2da807007",
                    "user": {
                        "login": "apple",
                        "id": 10639145,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEwNjM5MTQ1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/10639145?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/apple",
                        "html_url": "https://github.com/apple",
                        "followers_url": "https://api.github.com/users/apple/followers",
                        "following_url": "https://api.github.com/users/apple/following{/other_user}",
                        "gists_url": "https://api.github.com/users/apple/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/apple/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/apple/subscriptions",
                        "organizations_url": "https://api.github.com/users/apple/orgs",
                        "repos_url": "https://api.github.com/users/apple/repos",
                        "events_url": "https://api.github.com/users/apple/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/apple/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 120498971,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA0OTg5NzE=",
                        "name": "swift-nio",
                        "full_name": "apple/swift-nio",
                        "private": false,
                        "owner": {
                            "login": "apple",
                            "id": 10639145,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjEwNjM5MTQ1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/apple",
                            "html_url": "https://github.com/apple",
                            "followers_url": "https://api.github.com/users/apple/followers",
                            "following_url": "https://api.github.com/users/apple/following{/other_user}",
                            "gists_url": "https://api.github.com/users/apple/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/apple/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/apple/subscriptions",
                            "organizations_url": "https://api.github.com/users/apple/orgs",
                            "repos_url": "https://api.github.com/users/apple/repos",
                            "events_url": "https://api.github.com/users/apple/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/apple/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/apple/swift-nio",
                        "description": "Event-driven network application framework for high performance protocol servers & clients, non-blocking.",
                        "fork": false,
                        "url": "https://api.github.com/repos/apple/swift-nio",
                        "forks_url": "https://api.github.com/repos/apple/swift-nio/forks",
                        "keys_url": "https://api.github.com/repos/apple/swift-nio/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/apple/swift-nio/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/apple/swift-nio/teams",
                        "hooks_url": "https://api.github.com/repos/apple/swift-nio/hooks",
                        "issue_events_url": "https://api.github.com/repos/apple/swift-nio/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/apple/swift-nio/events",
                        "assignees_url": "https://api.github.com/repos/apple/swift-nio/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/apple/swift-nio/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/apple/swift-nio/tags",
                        "blobs_url": "https://api.github.com/repos/apple/swift-nio/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/apple/swift-nio/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/apple/swift-nio/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/apple/swift-nio/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/apple/swift-nio/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/apple/swift-nio/languages",
                        "stargazers_url": "https://api.github.com/repos/apple/swift-nio/stargazers",
                        "contributors_url": "https://api.github.com/repos/apple/swift-nio/contributors",
                        "subscribers_url": "https://api.github.com/repos/apple/swift-nio/subscribers",
                        "subscription_url": "https://api.github.com/repos/apple/swift-nio/subscription",
                        "commits_url": "https://api.github.com/repos/apple/swift-nio/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/apple/swift-nio/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/apple/swift-nio/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/apple/swift-nio/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/apple/swift-nio/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/apple/swift-nio/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/apple/swift-nio/merges",
                        "archive_url": "https://api.github.com/repos/apple/swift-nio/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/apple/swift-nio/downloads",
                        "issues_url": "https://api.github.com/repos/apple/swift-nio/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/apple/swift-nio/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/apple/swift-nio/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/apple/swift-nio/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/apple/swift-nio/labels{/name}",
                        "releases_url": "https://api.github.com/repos/apple/swift-nio/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/apple/swift-nio/deployments",
                        "created_at": "2018-02-06T17:47:31Z",
                        "updated_at": "2023-10-27T09:38:34Z",
                        "pushed_at": "2023-10-27T11:22:31Z",
                        "git_url": "git://github.com/apple/swift-nio.git",
                        "ssh_url": "git@github.com:apple/swift-nio.git",
                        "clone_url": "https://github.com/apple/swift-nio.git",
                        "svn_url": "https://github.com/apple/swift-nio",
                        "homepage": "https://swiftpackageindex.com/apple/swift-nio/documentation",
                        "size": 7513,
                        "stargazers_count": 7553,
                        "watchers_count": 7553,
                        "language": "Swift",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": true,
                        "has_discussions": false,
                        "forks_count": 627,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 205,
                        "license": {
                            "key": "apache-2.0",
                            "name": "Apache License 2.0",
                            "spdx_id": "Apache-2.0",
                            "url": "https://api.github.com/licenses/apache-2.0",
                            "node_id": "MDc6TGljZW5zZTI="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "asynchronous-io",
                            "event-driven",
                            "high-performance",
                            "networking",
                            "non-blocking",
                            "non-blocking-io",
                            "swift",
                            "swift-server",
                            "swift5",
                            "swiftnio"
                        ],
                        "visibility": "public",
                        "forks": 627,
                        "open_issues": 205,
                        "watchers": 7553,
                        "default_branch": "main"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2579"
                    },
                    "html": {
                        "href": "https://github.com/apple/swift-nio/pull/2579"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/apple/swift-nio/issues/2579"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/apple/swift-nio/issues/2579/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2579/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2579/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/apple/swift-nio/statuses/93405f7e7f48b75883a41fc2f1da26da411c5d86"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": false,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": null,
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 1,
                "additions": 367,
                "deletions": 3089,
                "changed_files": 15
            }
        },
        "public": true,
        "created_at": "2023-10-27T11:22:32Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32895678134",
        "type": "PullRequestEvent",
        "actor": {
            "id": 5688874,
            "login": "dnadoba",
            "display_login": "dnadoba",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dnadoba",
            "avatar_url": "https://avatars.githubusercontent.com/u/5688874?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "opened",
            "number": 2578,
            "pull_request": {
                "url": "https://api.github.com/repos/apple/swift-nio/pulls/2578",
                "id": 1576342751,
                "node_id": "PR_kwDOBy6rG85d9RTf",
                "html_url": "https://github.com/apple/swift-nio/pull/2578",
                "diff_url": "https://github.com/apple/swift-nio/pull/2578.diff",
                "patch_url": "https://github.com/apple/swift-nio/pull/2578.patch",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2578",
                "number": 2578,
                "state": "open",
                "locked": false,
                "title": "Add explicit `Sendable` unavailability and add missing `Sendable` conformances",
                "user": {
                    "login": "dnadoba",
                    "id": 5688874,
                    "node_id": "MDQ6VXNlcjU2ODg4NzQ=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5688874?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/dnadoba",
                    "html_url": "https://github.com/dnadoba",
                    "followers_url": "https://api.github.com/users/dnadoba/followers",
                    "following_url": "https://api.github.com/users/dnadoba/following{/other_user}",
                    "gists_url": "https://api.github.com/users/dnadoba/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/dnadoba/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/dnadoba/subscriptions",
                    "organizations_url": "https://api.github.com/users/dnadoba/orgs",
                    "repos_url": "https://api.github.com/users/dnadoba/repos",
                    "events_url": "https://api.github.com/users/dnadoba/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/dnadoba/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "Found with `-require-explicit-sendable` compiler flag. We may want to enable this flag in CI but it currently warns also for internal types that are @usableFromInline but we could mark them explicitly as well if we wanted.\r\n",
                "created_at": "2023-10-27T10:28:49Z",
                "updated_at": "2023-10-27T10:28:49Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": null,
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [],
                "requested_teams": [],
                "labels": [],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/apple/swift-nio/pulls/2578/commits",
                "review_comments_url": "https://api.github.com/repos/apple/swift-nio/pulls/2578/comments",
                "review_comment_url": "https://api.github.com/repos/apple/swift-nio/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2578/comments",
                "statuses_url": "https://api.github.com/repos/apple/swift-nio/statuses/29e6528b73bf82c386f2d6560859dd75edfbd898",
                "head": {
                    "label": "dnadoba:dn-sendable",
                    "ref": "dn-sendable",
                    "sha": "29e6528b73bf82c386f2d6560859dd75edfbd898",
                    "user": {
                        "login": "dnadoba",
                        "id": 5688874,
                        "node_id": "MDQ6VXNlcjU2ODg4NzQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5688874?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/dnadoba",
                        "html_url": "https://github.com/dnadoba",
                        "followers_url": "https://api.github.com/users/dnadoba/followers",
                        "following_url": "https://api.github.com/users/dnadoba/following{/other_user}",
                        "gists_url": "https://api.github.com/users/dnadoba/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/dnadoba/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/dnadoba/subscriptions",
                        "organizations_url": "https://api.github.com/users/dnadoba/orgs",
                        "repos_url": "https://api.github.com/users/dnadoba/repos",
                        "events_url": "https://api.github.com/users/dnadoba/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/dnadoba/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 338180288,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzMzgxODAyODg=",
                        "name": "swift-nio",
                        "full_name": "dnadoba/swift-nio",
                        "private": false,
                        "owner": {
                            "login": "dnadoba",
                            "id": 5688874,
                            "node_id": "MDQ6VXNlcjU2ODg4NzQ=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5688874?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/dnadoba",
                            "html_url": "https://github.com/dnadoba",
                            "followers_url": "https://api.github.com/users/dnadoba/followers",
                            "following_url": "https://api.github.com/users/dnadoba/following{/other_user}",
                            "gists_url": "https://api.github.com/users/dnadoba/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/dnadoba/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/dnadoba/subscriptions",
                            "organizations_url": "https://api.github.com/users/dnadoba/orgs",
                            "repos_url": "https://api.github.com/users/dnadoba/repos",
                            "events_url": "https://api.github.com/users/dnadoba/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/dnadoba/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/dnadoba/swift-nio",
                        "description": "Event-driven network application framework for high performance protocol servers & clients, non-blocking.",
                        "fork": true,
                        "url": "https://api.github.com/repos/dnadoba/swift-nio",
                        "forks_url": "https://api.github.com/repos/dnadoba/swift-nio/forks",
                        "keys_url": "https://api.github.com/repos/dnadoba/swift-nio/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/dnadoba/swift-nio/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/dnadoba/swift-nio/teams",
                        "hooks_url": "https://api.github.com/repos/dnadoba/swift-nio/hooks",
                        "issue_events_url": "https://api.github.com/repos/dnadoba/swift-nio/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/dnadoba/swift-nio/events",
                        "assignees_url": "https://api.github.com/repos/dnadoba/swift-nio/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/dnadoba/swift-nio/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/dnadoba/swift-nio/tags",
                        "blobs_url": "https://api.github.com/repos/dnadoba/swift-nio/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/dnadoba/swift-nio/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/dnadoba/swift-nio/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/dnadoba/swift-nio/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/dnadoba/swift-nio/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/dnadoba/swift-nio/languages",
                        "stargazers_url": "https://api.github.com/repos/dnadoba/swift-nio/stargazers",
                        "contributors_url": "https://api.github.com/repos/dnadoba/swift-nio/contributors",
                        "subscribers_url": "https://api.github.com/repos/dnadoba/swift-nio/subscribers",
                        "subscription_url": "https://api.github.com/repos/dnadoba/swift-nio/subscription",
                        "commits_url": "https://api.github.com/repos/dnadoba/swift-nio/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/dnadoba/swift-nio/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/dnadoba/swift-nio/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/dnadoba/swift-nio/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/dnadoba/swift-nio/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/dnadoba/swift-nio/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/dnadoba/swift-nio/merges",
                        "archive_url": "https://api.github.com/repos/dnadoba/swift-nio/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/dnadoba/swift-nio/downloads",
                        "issues_url": "https://api.github.com/repos/dnadoba/swift-nio/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/dnadoba/swift-nio/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/dnadoba/swift-nio/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/dnadoba/swift-nio/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/dnadoba/swift-nio/labels{/name}",
                        "releases_url": "https://api.github.com/repos/dnadoba/swift-nio/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/dnadoba/swift-nio/deployments",
                        "created_at": "2021-02-11T23:32:01Z",
                        "updated_at": "2021-09-08T11:38:55Z",
                        "pushed_at": "2023-10-27T10:28:07Z",
                        "git_url": "git://github.com/dnadoba/swift-nio.git",
                        "ssh_url": "git@github.com:dnadoba/swift-nio.git",
                        "clone_url": "https://github.com/dnadoba/swift-nio.git",
                        "svn_url": "https://github.com/dnadoba/swift-nio",
                        "homepage": "https://apple.github.io/swift-nio/",
                        "size": 8028,
                        "stargazers_count": 0,
                        "watchers_count": 0,
                        "language": "Swift",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "apache-2.0",
                            "name": "Apache License 2.0",
                            "spdx_id": "Apache-2.0",
                            "url": "https://api.github.com/licenses/apache-2.0",
                            "node_id": "MDc6TGljZW5zZTI="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 0,
                        "default_branch": "main"
                    }
                },
                "base": {
                    "label": "apple:main",
                    "ref": "main",
                    "sha": "740fc734f3266e8e374817cea0db48d2da807007",
                    "user": {
                        "login": "apple",
                        "id": 10639145,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEwNjM5MTQ1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/10639145?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/apple",
                        "html_url": "https://github.com/apple",
                        "followers_url": "https://api.github.com/users/apple/followers",
                        "following_url": "https://api.github.com/users/apple/following{/other_user}",
                        "gists_url": "https://api.github.com/users/apple/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/apple/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/apple/subscriptions",
                        "organizations_url": "https://api.github.com/users/apple/orgs",
                        "repos_url": "https://api.github.com/users/apple/repos",
                        "events_url": "https://api.github.com/users/apple/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/apple/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 120498971,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA0OTg5NzE=",
                        "name": "swift-nio",
                        "full_name": "apple/swift-nio",
                        "private": false,
                        "owner": {
                            "login": "apple",
                            "id": 10639145,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjEwNjM5MTQ1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/apple",
                            "html_url": "https://github.com/apple",
                            "followers_url": "https://api.github.com/users/apple/followers",
                            "following_url": "https://api.github.com/users/apple/following{/other_user}",
                            "gists_url": "https://api.github.com/users/apple/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/apple/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/apple/subscriptions",
                            "organizations_url": "https://api.github.com/users/apple/orgs",
                            "repos_url": "https://api.github.com/users/apple/repos",
                            "events_url": "https://api.github.com/users/apple/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/apple/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/apple/swift-nio",
                        "description": "Event-driven network application framework for high performance protocol servers & clients, non-blocking.",
                        "fork": false,
                        "url": "https://api.github.com/repos/apple/swift-nio",
                        "forks_url": "https://api.github.com/repos/apple/swift-nio/forks",
                        "keys_url": "https://api.github.com/repos/apple/swift-nio/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/apple/swift-nio/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/apple/swift-nio/teams",
                        "hooks_url": "https://api.github.com/repos/apple/swift-nio/hooks",
                        "issue_events_url": "https://api.github.com/repos/apple/swift-nio/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/apple/swift-nio/events",
                        "assignees_url": "https://api.github.com/repos/apple/swift-nio/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/apple/swift-nio/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/apple/swift-nio/tags",
                        "blobs_url": "https://api.github.com/repos/apple/swift-nio/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/apple/swift-nio/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/apple/swift-nio/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/apple/swift-nio/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/apple/swift-nio/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/apple/swift-nio/languages",
                        "stargazers_url": "https://api.github.com/repos/apple/swift-nio/stargazers",
                        "contributors_url": "https://api.github.com/repos/apple/swift-nio/contributors",
                        "subscribers_url": "https://api.github.com/repos/apple/swift-nio/subscribers",
                        "subscription_url": "https://api.github.com/repos/apple/swift-nio/subscription",
                        "commits_url": "https://api.github.com/repos/apple/swift-nio/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/apple/swift-nio/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/apple/swift-nio/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/apple/swift-nio/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/apple/swift-nio/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/apple/swift-nio/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/apple/swift-nio/merges",
                        "archive_url": "https://api.github.com/repos/apple/swift-nio/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/apple/swift-nio/downloads",
                        "issues_url": "https://api.github.com/repos/apple/swift-nio/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/apple/swift-nio/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/apple/swift-nio/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/apple/swift-nio/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/apple/swift-nio/labels{/name}",
                        "releases_url": "https://api.github.com/repos/apple/swift-nio/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/apple/swift-nio/deployments",
                        "created_at": "2018-02-06T17:47:31Z",
                        "updated_at": "2023-10-27T09:38:34Z",
                        "pushed_at": "2023-10-27T10:28:50Z",
                        "git_url": "git://github.com/apple/swift-nio.git",
                        "ssh_url": "git@github.com:apple/swift-nio.git",
                        "clone_url": "https://github.com/apple/swift-nio.git",
                        "svn_url": "https://github.com/apple/swift-nio",
                        "homepage": "https://swiftpackageindex.com/apple/swift-nio/documentation",
                        "size": 7513,
                        "stargazers_count": 7553,
                        "watchers_count": 7553,
                        "language": "Swift",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": true,
                        "has_discussions": false,
                        "forks_count": 627,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 204,
                        "license": {
                            "key": "apache-2.0",
                            "name": "Apache License 2.0",
                            "spdx_id": "Apache-2.0",
                            "url": "https://api.github.com/licenses/apache-2.0",
                            "node_id": "MDc6TGljZW5zZTI="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "asynchronous-io",
                            "event-driven",
                            "high-performance",
                            "networking",
                            "non-blocking",
                            "non-blocking-io",
                            "swift",
                            "swift-server",
                            "swift5",
                            "swiftnio"
                        ],
                        "visibility": "public",
                        "forks": 627,
                        "open_issues": 204,
                        "watchers": 7553,
                        "default_branch": "main"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2578"
                    },
                    "html": {
                        "href": "https://github.com/apple/swift-nio/pull/2578"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/apple/swift-nio/issues/2578"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/apple/swift-nio/issues/2578/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2578/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2578/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/apple/swift-nio/statuses/29e6528b73bf82c386f2d6560859dd75edfbd898"
                    }
                },
                "author_association": "MEMBER",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": false,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": null,
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 1,
                "additions": 53,
                "deletions": 25,
                "changed_files": 22
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:28:50Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32894699296",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 1382556,
            "login": "Lukasa",
            "display_login": "Lukasa",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lukasa",
            "avatar_url": "https://avatars.githubusercontent.com/u/1382556?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 19,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-27T09:51:57Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 2,
                    "+1": 2,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1782628600",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1782628600",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1782628600,
                "node_id": "IC_kwDOBy6rG85qQMD4",
                "user": {
                    "login": "Lukasa",
                    "id": 1382556,
                    "node_id": "MDQ6VXNlcjEzODI1NTY=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Lukasa",
                    "html_url": "https://github.com/Lukasa",
                    "followers_url": "https://api.github.com/users/Lukasa/followers",
                    "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
                    "organizations_url": "https://api.github.com/users/Lukasa/orgs",
                    "repos_url": "https://api.github.com/users/Lukasa/repos",
                    "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Lukasa/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T09:51:57Z",
                "updated_at": "2023-10-27T09:51:57Z",
                "author_association": "CONTRIBUTOR",
                "body": "Thanks git bisect: \"de07e573d6fbce99cc72a558ce61dbb1ccddb205 is the first bad commit\"",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1782628600/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T09:51:58Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32894347413",
        "type": "WatchEvent",
        "actor": {
            "id": 18453589,
            "login": "QiuYeHong90",
            "display_login": "QiuYeHong90",
            "gravatar_id": "",
            "url": "https://api.github.com/users/QiuYeHong90",
            "avatar_url": "https://avatars.githubusercontent.com/u/18453589?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T09:38:34Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32894247222",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 28218759,
            "login": "chocoford",
            "display_login": "chocoford",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chocoford",
            "avatar_url": "https://avatars.githubusercontent.com/u/28218759?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 18,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-27T09:34:49Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 1,
                    "+1": 1,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1782604895",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1782604895",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1782604895,
                "node_id": "IC_kwDOBy6rG85qQGRf",
                "user": {
                    "login": "chocoford",
                    "id": 28218759,
                    "node_id": "MDQ6VXNlcjI4MjE4NzU5",
                    "avatar_url": "https://avatars.githubusercontent.com/u/28218759?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/chocoford",
                    "html_url": "https://github.com/chocoford",
                    "followers_url": "https://api.github.com/users/chocoford/followers",
                    "following_url": "https://api.github.com/users/chocoford/following{/other_user}",
                    "gists_url": "https://api.github.com/users/chocoford/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/chocoford/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/chocoford/subscriptions",
                    "organizations_url": "https://api.github.com/users/chocoford/orgs",
                    "repos_url": "https://api.github.com/users/chocoford/repos",
                    "events_url": "https://api.github.com/users/chocoford/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/chocoford/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T09:34:49Z",
                "updated_at": "2023-10-27T09:34:49Z",
                "author_association": "NONE",
                "body": "Same problem on macOS 12.3\r\n```\r\nTermination Reason:    Namespace DYLD, Code 4 Symbol missing\r\nSymbol not found: _swift_getExtendedExistentialTypeMetadata\r\nReferenced from: /Applications/TrickleCapture_Test.app/Contents/MacOS/MyApp_Test\r\nExpected in: /usr/lib/swift/libswiftCore.dylib\r\n(terminated at launch; ignore backtrace)\r\n\r\nApplication Specific Information:\r\nSymbol not found: _swift_getExtendedExistentialTypeMetadata\r\nReferenced from: /Applications/TrickleCapture_Test.app/Contents/MacOS/MyApp_Test\r\nExpected in: /usr/lib/swift/libswiftCore.dylib\r\n```",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1782604895/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T09:34:49Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32879031244",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 139364,
            "login": "dfed",
            "display_login": "dfed",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dfed",
            "avatar_url": "https://avatars.githubusercontent.com/u/139364?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 17,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-26T18:57:00Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 1,
                    "+1": 1,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781720949",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1781720949",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1781720949,
                "node_id": "IC_kwDOBy6rG85qMud1",
                "user": {
                    "login": "dfed",
                    "id": 139364,
                    "node_id": "MDQ6VXNlcjEzOTM2NA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/139364?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/dfed",
                    "html_url": "https://github.com/dfed",
                    "followers_url": "https://api.github.com/users/dfed/followers",
                    "following_url": "https://api.github.com/users/dfed/following{/other_user}",
                    "gists_url": "https://api.github.com/users/dfed/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/dfed/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/dfed/subscriptions",
                    "organizations_url": "https://api.github.com/users/dfed/orgs",
                    "repos_url": "https://api.github.com/users/dfed/repos",
                    "events_url": "https://api.github.com/users/dfed/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/dfed/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T18:57:00Z",
                "updated_at": "2023-10-26T18:57:00Z",
                "author_association": "NONE",
                "body": "I just hit this, and my crash was on device. Rolling back to 2.59.0 fixed the issue for me as well.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781720949/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T18:57:00Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32874036820",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 60069300,
            "login": "mcantillon21",
            "display_login": "mcantillon21",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcantillon21",
            "avatar_url": "https://avatars.githubusercontent.com/u/60069300?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 6,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T15:41:56Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781379366",
                "html_url": "https://github.com/apple/swift-nio/issues/2577#issuecomment-1781379366",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "id": 1781379366,
                "node_id": "IC_kwDOBy6rG85qLbEm",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T15:41:56Z",
                "updated_at": "2023-10-26T15:41:56Z",
                "author_association": "NONE",
                "body": "I think I am but still having trouble. Same error. What else am I supposed to change here?\r\n\r\n`\r\nimport WatchKit\r\nimport AVFoundation\r\nimport Starscream\r\nimport NIO\r\nimport NIOHTTP1\r\nimport NIOSSL\r\nimport NIOTransportServices\r\n\r\nclass QueryMemoryViewController: WKInterfaceController {\r\n    \r\n    private let apiKey = \"Token \"\r\n    private lazy var queryMemoryService = QueryMemoryService()\r\n    \r\n    @IBOutlet weak var transcriptLabel: WKInterfaceLabel!\r\n    private var currentText: String = \"\"\r\n    \r\n    override func awake(withContext context: Any?) {\r\n        super.awake(withContext: context)\r\n        queryMemoryService.startAnalyzingAudio()\r\n    }\r\n}\r\n\r\nclass QueryMemoryService: WebSocketDelegate, ObservableObject {\r\n    @Published var transcript: String = \"\"\r\n    private var isTapInstalled = false\r\n\r\n    init() {\r\n        do {\r\n            let audioSession = AVAudioSession.sharedInstance()\r\n            try audioSession.setCategory(.playAndRecord)\r\n            try audioSession.setActive(true)\r\n        } catch {\r\n            print(\"Error setting audio session category: \\(error)\")\r\n        }\r\n\r\n        self.socket = WebSocketFactory.createSocket()\r\n        self.socket.delegate = self\r\n    }\r\n\r\n    func didReceive(event: Starscream.WebSocketEvent, client: Starscream.WebSocketClient) {\r\n        print(\"Received event: \\(event)\")\r\n        switch event {\r\n        case .text(let text):\r\n            print(\"Received text: \\(text)\")\r\n            let jsonData = Data(text.utf8)\r\n            if let response = try? jsonDecoder.decode(DeepgramResponse.self, from: jsonData),\r\n               response.isFinal, !response.channel.alternatives.first!.transcript.isEmpty {\r\n                print(\"Transcription received: \\(response.channel.alternatives.first!.transcript)\")\r\n                DispatchQueue.main.async {\r\n                    if let firstAlternative = response.channel.alternatives.first {\r\n                        self.transcript += \" \" + firstAlternative.transcript\r\n                    }\r\n                }\r\n            }\r\n        case .error(let error):\r\n            print(\"Encountered error: \\(error?.localizedDescription ?? \"Unknown error\")\")\r\n        default:\r\n            print(\"Received unhandled event: \\(event)\")\r\n            break\r\n        }\r\n    }\r\n    \r\n    private let socket: WebSocket\r\n    private let jsonDecoder = JSONDecoder().configureForSnakeCase()\r\n    private let audioEngine = AVAudioEngine()\r\n\r\n    func startAnalyzingAudio() {\r\n        print(\"Starting audio analysis...\")\r\n        \r\n        let inputNode = audioEngine.inputNode\r\n        let inputFormat = inputNode.inputFormat(forBus: 0)\r\n        print(\"Supported sample rates: \\(inputFormat.sampleRate)\")\r\n        print(\"Supported channels: \\(inputFormat.channelCount)\")\r\n        let outputFormat = AVAudioFormat(commonFormat: .pcmFormatInt16, sampleRate: 22050, channels: 1, interleaved: true)\r\n        \r\n        print(\"Audio formats set up.\")\r\n        \r\n        let converter = AVAudioConverter(from: inputFormat, to: outputFormat!)\r\n\r\n        if !isTapInstalled {\r\n            inputNode.installTap(onBus: 0, bufferSize: 1024, format: inputFormat) { (buffer: AVAudioPCMBuffer, time: AVAudioTime) in\r\n                let convertedBuffer = AVAudioPCMBuffer(pcmFormat: outputFormat!, frameCapacity: buffer.frameCapacity)\r\n                converter?.convert(to: convertedBuffer!, error: nil, withInputFrom: { (inNumPackets, outStatus) -> AVAudioBuffer? in\r\n                    outStatus.pointee = AVAudioConverterInputStatus.haveData\r\n                    return buffer\r\n                })\r\n                \r\n                if let data = self.toNSData(buffer: convertedBuffer!) {\r\n                    self.socket.write(data: data)\r\n                    print(\"Data written to socket.\")\r\n                }\r\n            }\r\n            \r\n            audioEngine.prepare()\r\n            \r\n            do {\r\n                try audioEngine.start()\r\n            } catch {\r\n                print(\"Error starting audio engine: \\(error)\")\r\n            }\r\n            socket.connect()\r\n            \r\n            print(\"Audio engine and socket connection prepared and started.\")\r\n            }\r\n            isTapInstalled = true\r\n\r\n    }\r\n\r\n    func playAudioData(_ data: Data) {\r\n        let audioFormat = AVAudioFormat(commonFormat: .pcmFormatInt16, sampleRate: 44100, channels: 1, interleaved: true)!\r\n        let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2)!\r\n        let audioFrameCount = UInt32(data.count) / 2\r\n        audioBuffer.frameLength = audioFrameCount\r\n        data.copyBytes(to: UnsafeMutableBufferPointer(start: audioBuffer.int16ChannelData!.pointee, count: data.count))\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let audioPlayerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: audioFormat)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n            audioPlayerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n            audioPlayerNode.play()\r\n        } catch {\r\n            print(\"Error playing audio: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let group = NIOTSEventLoopGroup()\r\n        let bootstrap = NIOTSConnectionBootstrap(group: group)\r\n            .connectTimeout(.seconds(20))\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func stopAnalyzingAudio() {\r\n        print(\"Stopping audio analysis...\")\r\n        audioEngine.stop()\r\n        socket.disconnect()\r\n        sendTranscriptionToQueryEndpoint(transcription: self.transcript)\r\n        audioEngine.inputNode.removeTap(onBus: 0)\r\n        isTapInstalled = false\r\n    }\r\n\r\n    private func toNSData(buffer: AVAudioPCMBuffer) -> Data? {\r\n        let audioBuffer = buffer.audioBufferList.pointee.mBuffers\r\n        return Data(bytes: audioBuffer.mData!, count: Int(audioBuffer.mDataByteSize))\r\n    }\r\n}\r\n\r\nclass WebSocketFactory {\r\n    static func createSocket() -> WebSocket {\r\n        let apiKey = \"Token \"\r\n        let url = URL(string: \"wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=22050&channels=1&model=nova&smart_format=true&filler_words=true\")!\r\n        var urlRequest = URLRequest(url: url)\r\n        urlRequest.setValue(apiKey, forHTTPHeaderField: \"Authorization\")\r\n        return WebSocket(request: urlRequest)\r\n    }\r\n}\r\n\r\nextension JSONDecoder {\r\n    func configureForSnakeCase() -> JSONDecoder {\r\n        keyDecodingStrategy = .convertFromSnakeCase\r\n        return self\r\n    }\r\n}\r\n\r\nstruct DeepgramResponse: Codable {\r\n    let isFinal: Bool\r\n    let channel: Channel\r\n    \r\n    struct Channel: Codable {\r\n        let alternatives: [Alternative]\r\n        \r\n        struct Alternative: Codable {\r\n            let transcript: String\r\n        }\r\n    }\r\n}\r\n\r\nclass HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.nox.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n\r\n}\r\n\r\n`",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781379366/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T15:41:56Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32873578079",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 1382556,
            "login": "Lukasa",
            "display_login": "Lukasa",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lukasa",
            "avatar_url": "https://avatars.githubusercontent.com/u/1382556?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 5,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T15:26:49Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781352541",
                "html_url": "https://github.com/apple/swift-nio/issues/2577#issuecomment-1781352541",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "id": 1781352541,
                "node_id": "IC_kwDOBy6rG85qLUhd",
                "user": {
                    "login": "Lukasa",
                    "id": 1382556,
                    "node_id": "MDQ6VXNlcjEzODI1NTY=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Lukasa",
                    "html_url": "https://github.com/Lukasa",
                    "followers_url": "https://api.github.com/users/Lukasa/followers",
                    "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
                    "organizations_url": "https://api.github.com/users/Lukasa/orgs",
                    "repos_url": "https://api.github.com/users/Lukasa/repos",
                    "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Lukasa/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T15:26:48Z",
                "updated_at": "2023-10-26T15:26:48Z",
                "author_association": "CONTRIBUTOR",
                "body": "You don't declare it, you just need an active audio session before you call `connect`.\r\n\r\nAre you using NIOTransportServices?",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781352541/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T15:26:49Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32873493194",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 60069300,
            "login": "mcantillon21",
            "display_login": "mcantillon21",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcantillon21",
            "avatar_url": "https://avatars.githubusercontent.com/u/60069300?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 4,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T15:24:04Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781347564",
                "html_url": "https://github.com/apple/swift-nio/issues/2577#issuecomment-1781347564",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "id": 1781347564,
                "node_id": "IC_kwDOBy6rG85qLTTs",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T15:24:03Z",
                "updated_at": "2023-10-26T15:24:03Z",
                "author_association": "NONE",
                "body": "I'm still getting the following error no matter how long I get the timeout to be. Where can I declare that my app meets the first requirement?\r\n\r\nFailed to connect to the server: connectTimeout(NIOCore.TimeAmount(nanoseconds: 10000000000))",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781347564/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T15:24:04Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32872724459",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 1382556,
            "login": "Lukasa",
            "display_login": "Lukasa",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lukasa",
            "avatar_url": "https://avatars.githubusercontent.com/u/1382556?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 3,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T15:00:19Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781304524",
                "html_url": "https://github.com/apple/swift-nio/issues/2577#issuecomment-1781304524",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "id": 1781304524,
                "node_id": "IC_kwDOBy6rG85qLIzM",
                "user": {
                    "login": "Lukasa",
                    "id": 1382556,
                    "node_id": "MDQ6VXNlcjEzODI1NTY=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Lukasa",
                    "html_url": "https://github.com/Lukasa",
                    "followers_url": "https://api.github.com/users/Lukasa/followers",
                    "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
                    "organizations_url": "https://api.github.com/users/Lukasa/orgs",
                    "repos_url": "https://api.github.com/users/Lukasa/repos",
                    "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Lukasa/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T15:00:19Z",
                "updated_at": "2023-10-26T15:00:19Z",
                "author_association": "CONTRIBUTOR",
                "body": "There is a [tech-note that discusses watchOS networking](https://developer.apple.com/documentation/technotes/tn3135-low-level-networking-on-watchos). The code you have here is not going to work on watchOS for the following reasons:\r\n\r\n1. You're using NIO POSIX, which uses BSD sockets. BSD sockets don't work on the watch.\r\n2. You're doing \"low-level networking\", which requires that your app meet one of three requirements:\r\n    1. Be an audio-streaming app and have an active audio streaming session open.\r\n    2. Be a VoIP app with an active CallKit session.\r\n    3. Have a tvOS-compatible service listener.\r\n\r\nAssuming you meet one of the latter three criteria (it seems like you have an audio streaming session so that may well work), you just need to swap your backend. You can use [`swift-nio-transport-services`](https://github.com/apple/swift-nio-transport-services) instead of NIO POSIX. It should require only a small tweak: replace the `NIOPOSIX` import with `NIOTransportServices`, and then use `NIOTSConnectionBootstrap` and `NIOTSEventLoopGroup` instead of `ClientBootstrap` and `MultiThreadedEventLoopGroup`. The rest should all work.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781304524/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T15:00:20Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32872536502",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 60069300,
            "login": "mcantillon21",
            "display_login": "mcantillon21",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcantillon21",
            "avatar_url": "https://avatars.githubusercontent.com/u/60069300?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 2,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T14:54:42Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781294269",
                "html_url": "https://github.com/apple/swift-nio/issues/2577#issuecomment-1781294269",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "id": 1781294269,
                "node_id": "IC_kwDOBy6rG85qLGS9",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T14:54:42Z",
                "updated_at": "2023-10-26T14:54:42Z",
                "author_association": "NONE",
                "body": "I don't think it's behind any VPN. It worked well with my android watch. \r\n\r\nOnce interesting thing is that when I run nslookup theres some multiple IPs, maybe for load balancing. \r\n\r\n (base) mollycantillon@DN0a1f6d8d ~ % nslookup nox-devices--nox-memory-fastapi-app.modal.run\r\nServer:\t\t171.67.1.234\r\nAddress:\t171.67.1.234#53\r\n\r\nNon-authoritative answer:\r\nName:\tnox-devices--nox-memory-fastapi-app.modal.run\r\nAddress: 3.217.137.171\r\nName:\tnox-devices--nox-memory-fastapi-app.modal.run\r\nAddress: 3.222.214.40\r\nName:\tnox-devices--nox-memory-fastapi-app.modal.run\r\nAddress: 44.217.9.182\r\nName:\tnox-devices--nox-memory-fastapi-app.modal.run\r\nAddress: 44.217.60.1\r\nName:\tnox-devices--nox-memory-fastapi-app.modal.run\r\nAddress: 54.156.152.125\r\nName:\tnox-devices--nox-memory-fastapi-app.modal.run\r\nAddress: 3.211.143.0\r\n\r\nAlso not sure what watch entitlements I would need for networking, I have enabled background modes so far\r\n\r\nWhat is the easiest workaround here? Just looking for the quickest solution. ",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781294269/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T14:54:43Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32871312748",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 48575488,
            "login": "swift-server-bot",
            "display_login": "swift-server-bot",
            "gravatar_id": "",
            "url": "https://api.github.com/users/swift-server-bot",
            "avatar_url": "https://avatars.githubusercontent.com/u/48575488?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 16,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T14:18:48Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781227213",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1781227213",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1781227213,
                "node_id": "IC_kwDOBy6rG85qK17N",
                "user": {
                    "login": "swift-server-bot",
                    "id": 48575488,
                    "node_id": "MDQ6VXNlcjQ4NTc1NDg4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/48575488?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/swift-server-bot",
                    "html_url": "https://github.com/swift-server-bot",
                    "followers_url": "https://api.github.com/users/swift-server-bot/followers",
                    "following_url": "https://api.github.com/users/swift-server-bot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/swift-server-bot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/swift-server-bot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/swift-server-bot/subscriptions",
                    "organizations_url": "https://api.github.com/users/swift-server-bot/orgs",
                    "repos_url": "https://api.github.com/users/swift-server-bot/repos",
                    "events_url": "https://api.github.com/users/swift-server-bot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/swift-server-bot/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T14:18:47Z",
                "updated_at": "2023-10-26T14:18:47Z",
                "author_association": "NONE",
                "body": "\n!!! Couldn't read commit file !!!\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781227213/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T14:18:48Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32871227525",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 624238,
            "login": "weissi",
            "display_login": "weissi",
            "gravatar_id": "",
            "url": "https://api.github.com/users/weissi",
            "avatar_url": "https://avatars.githubusercontent.com/u/624238?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 15,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T14:16:27Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781222889",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1781222889",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1781222889,
                "node_id": "IC_kwDOBy6rG85qK03p",
                "user": {
                    "login": "weissi",
                    "id": 624238,
                    "node_id": "MDQ6VXNlcjYyNDIzOA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/624238?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/weissi",
                    "html_url": "https://github.com/weissi",
                    "followers_url": "https://api.github.com/users/weissi/followers",
                    "following_url": "https://api.github.com/users/weissi/following{/other_user}",
                    "gists_url": "https://api.github.com/users/weissi/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/weissi/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/weissi/subscriptions",
                    "organizations_url": "https://api.github.com/users/weissi/orgs",
                    "repos_url": "https://api.github.com/users/weissi/repos",
                    "events_url": "https://api.github.com/users/weissi/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/weissi/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T14:16:26Z",
                "updated_at": "2023-10-26T14:16:26Z",
                "author_association": "MEMBER",
                "body": "@swift-server-bot test perf please",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781222889/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T14:16:27Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32871077224",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 48575488,
            "login": "swift-server-bot",
            "display_login": "swift-server-bot",
            "gravatar_id": "",
            "url": "https://api.github.com/users/swift-server-bot",
            "avatar_url": "https://avatars.githubusercontent.com/u/48575488?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 14,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T14:12:05Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781214969",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1781214969",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1781214969,
                "node_id": "IC_kwDOBy6rG85qKy75",
                "user": {
                    "login": "swift-server-bot",
                    "id": 48575488,
                    "node_id": "MDQ6VXNlcjQ4NTc1NDg4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/48575488?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/swift-server-bot",
                    "html_url": "https://github.com/swift-server-bot",
                    "followers_url": "https://api.github.com/users/swift-server-bot/followers",
                    "following_url": "https://api.github.com/users/swift-server-bot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/swift-server-bot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/swift-server-bot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/swift-server-bot/subscriptions",
                    "organizations_url": "https://api.github.com/users/swift-server-bot/orgs",
                    "repos_url": "https://api.github.com/users/swift-server-bot/repos",
                    "events_url": "https://api.github.com/users/swift-server-bot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/swift-server-bot/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T14:12:04Z",
                "updated_at": "2023-10-26T14:12:04Z",
                "author_association": "NONE",
                "body": "\n!!! Couldn't read commit file !!!\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781214969/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T14:12:05Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32870996741",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 624238,
            "login": "weissi",
            "display_login": "weissi",
            "gravatar_id": "",
            "url": "https://api.github.com/users/weissi",
            "avatar_url": "https://avatars.githubusercontent.com/u/624238?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 13,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T14:09:43Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781210568",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1781210568",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1781210568,
                "node_id": "IC_kwDOBy6rG85qKx3I",
                "user": {
                    "login": "weissi",
                    "id": 624238,
                    "node_id": "MDQ6VXNlcjYyNDIzOA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/624238?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/weissi",
                    "html_url": "https://github.com/weissi",
                    "followers_url": "https://api.github.com/users/weissi/followers",
                    "following_url": "https://api.github.com/users/weissi/following{/other_user}",
                    "gists_url": "https://api.github.com/users/weissi/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/weissi/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/weissi/subscriptions",
                    "organizations_url": "https://api.github.com/users/weissi/orgs",
                    "repos_url": "https://api.github.com/users/weissi/repos",
                    "events_url": "https://api.github.com/users/weissi/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/weissi/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T14:09:43Z",
                "updated_at": "2023-10-26T14:09:43Z",
                "author_association": "MEMBER",
                "body": "@swift-server-bot test perf please",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781210568/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T14:09:43Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32869999701",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 51020,
            "login": "jshier",
            "display_login": "jshier",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jshier",
            "avatar_url": "https://avatars.githubusercontent.com/u/51020?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 12,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T13:40:34Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781151662",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1781151662",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1781151662,
                "node_id": "IC_kwDOBy6rG85qKjeu",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T13:40:33Z",
                "updated_at": "2023-10-26T13:40:33Z",
                "author_association": "NONE",
                "body": "I've pushed the kind check up, feel free to test that, but I think there will still be an impact due to the `data` cast. I'll try to finish up the local tests soon.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781151662/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T13:40:34Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32868389833",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 92025456,
            "login": "MatthewTHFisher",
            "display_login": "MatthewTHFisher",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MatthewTHFisher",
            "avatar_url": "https://avatars.githubusercontent.com/u/92025456?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 16,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-26T12:52:41Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781063563",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1781063563",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1781063563,
                "node_id": "IC_kwDOBy6rG85qKN-L",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T12:52:40Z",
                "updated_at": "2023-10-26T12:52:40Z",
                "author_association": "NONE",
                "body": "Feedback has been submitted titled \"swift-nio version 2.60.0 is causing apps to crash when launched on iOS 15 simulators\" and has a feedback number of `FB13302639`.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1781063563/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T12:52:41Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32866775365",
        "type": "WatchEvent",
        "actor": {
            "id": 38594636,
            "login": "obvios",
            "display_login": "obvios",
            "gravatar_id": "",
            "url": "https://api.github.com/users/obvios",
            "avatar_url": "https://avatars.githubusercontent.com/u/38594636?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-26T11:59:12Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32865883933",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 624238,
            "login": "weissi",
            "display_login": "weissi",
            "gravatar_id": "",
            "url": "https://api.github.com/users/weissi",
            "avatar_url": "https://avatars.githubusercontent.com/u/624238?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 11,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T11:24:49Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780926295",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1780926295",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1780926295,
                "node_id": "IC_kwDOBy6rG85qJsdX",
                "user": {
                    "login": "weissi",
                    "id": 624238,
                    "node_id": "MDQ6VXNlcjYyNDIzOA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/624238?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/weissi",
                    "html_url": "https://github.com/weissi",
                    "followers_url": "https://api.github.com/users/weissi/followers",
                    "following_url": "https://api.github.com/users/weissi/following{/other_user}",
                    "gists_url": "https://api.github.com/users/weissi/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/weissi/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/weissi/subscriptions",
                    "organizations_url": "https://api.github.com/users/weissi/orgs",
                    "repos_url": "https://api.github.com/users/weissi/repos",
                    "events_url": "https://api.github.com/users/weissi/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/weissi/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T11:24:49Z",
                "updated_at": "2023-10-26T11:24:49Z",
                "author_association": "MEMBER",
                "body": "> The change as written does runtime type checks. My review feedback above would replace it with a jump based on an enum value, which should perform a lot better.\r\n\r\nMissed that, sorry. That's great!",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780926295/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T11:24:50Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32863214808",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 1382556,
            "login": "Lukasa",
            "display_login": "Lukasa",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lukasa",
            "avatar_url": "https://avatars.githubusercontent.com/u/1382556?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 10,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T09:48:27Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780780747",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1780780747",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1780780747,
                "node_id": "IC_kwDOBy6rG85qJI7L",
                "user": {
                    "login": "Lukasa",
                    "id": 1382556,
                    "node_id": "MDQ6VXNlcjEzODI1NTY=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Lukasa",
                    "html_url": "https://github.com/Lukasa",
                    "followers_url": "https://api.github.com/users/Lukasa/followers",
                    "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
                    "organizations_url": "https://api.github.com/users/Lukasa/orgs",
                    "repos_url": "https://api.github.com/users/Lukasa/repos",
                    "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Lukasa/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:48:27Z",
                "updated_at": "2023-10-26T09:48:27Z",
                "author_association": "CONTRIBUTOR",
                "body": "The change as written does runtime type checks. My review feedback above would replace it with a jump based on an enum value, which should perform a lot better.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780780747/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:48:28Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32863181580",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 624238,
            "login": "weissi",
            "display_login": "weissi",
            "gravatar_id": "",
            "url": "https://api.github.com/users/weissi",
            "avatar_url": "https://avatars.githubusercontent.com/u/624238?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2570",
                "id": 1957929585,
                "node_id": "PR_kwDOBy6rG85dkjPt",
                "number": 2570,
                "title": "WIP: HTTPDecoder: Reenable Parsing After Failed Upgrade",
                "user": {
                    "login": "jshier",
                    "id": 51020,
                    "node_id": "MDQ6VXNlcjUxMDIw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/51020?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/jshier",
                    "html_url": "https://github.com/jshier",
                    "followers_url": "https://api.github.com/users/jshier/followers",
                    "following_url": "https://api.github.com/users/jshier/following{/other_user}",
                    "gists_url": "https://api.github.com/users/jshier/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/jshier/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/jshier/subscriptions",
                    "organizations_url": "https://api.github.com/users/jshier/orgs",
                    "repos_url": "https://api.github.com/users/jshier/repos",
                    "events_url": "https://api.github.com/users/jshier/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/jshier/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 9,
                "created_at": "2023-10-23T20:01:17Z",
                "updated_at": "2023-10-26T09:47:20Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2570",
                    "html_url": "https://github.com/apple/swift-nio/pull/2570",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2570.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2570.patch",
                    "merged_at": null
                },
                "body": "Reenable parsing in `HTTPDecoder` after an upgrade is attempted but failed by the response.\r\n\r\n### Motivation:\r\n\r\nCurrently, `HTTPDecoder` sets `stopParsing = true` whenever a message is parsed and an upgrade is detected (`isUpgrade == true`). Unfortunately, this means that if the upgrade wasn't successful, the decoder silently blocks any attempt to reuse the connection, essentially hanging the client until they timeout.\r\n\r\n### Modifications:\r\n\r\nI've attempted to generalize `HTTPDecoder`'s conformance to `WriteObservingByteToMessageDecoder` so that it can reenable parsing based on the outgoing `HTTPServerResponsePart`.\r\n\r\n### Result:\r\n\r\nA properly reusable decoder.\r\n\r\n---\r\n\r\nWIP:\r\n\r\nI need a few things to finish this PR.\r\n\r\n- Proper way to generalize the `write(data:)` implementation. Right now I just check the decoder's full metatype. What's the preferred pattern here?\r\n- Proper condition for reenabling parsing. Right now I ensure that the connection will be kept alive (if it's being killed who cares), that the response is NOT an upgrade, and that it has stopped parsing.\r\n- Proper test. I see the `HTTPDecoderTest` but it's not clear what kind of test would be best here, or how to simulate this scenario exactly.\r\n\r\nThinking about this more, how can I ensure that the outgoing response is for the incoming request?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2570/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2570/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780778925",
                "html_url": "https://github.com/apple/swift-nio/pull/2570#issuecomment-1780778925",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2570",
                "id": 1780778925,
                "node_id": "IC_kwDOBy6rG85qJIet",
                "user": {
                    "login": "weissi",
                    "id": 624238,
                    "node_id": "MDQ6VXNlcjYyNDIzOA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/624238?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/weissi",
                    "html_url": "https://github.com/weissi",
                    "followers_url": "https://api.github.com/users/weissi/followers",
                    "following_url": "https://api.github.com/users/weissi/following{/other_user}",
                    "gists_url": "https://api.github.com/users/weissi/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/weissi/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/weissi/subscriptions",
                    "organizations_url": "https://api.github.com/users/weissi/orgs",
                    "repos_url": "https://api.github.com/users/weissi/repos",
                    "events_url": "https://api.github.com/users/weissi/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/weissi/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:47:19Z",
                "updated_at": "2023-10-26T09:47:19Z",
                "author_association": "MEMBER",
                "body": "@Lukasa / @jshier  ugh, this is rough\r\n\r\n```\r\nno-net_http1_1k_reqs_1_conn | 0.013450951 | 0.011678896 | previous | 15%\r\n```\r\n\r\n15% slower with this change :|. And that includes client (unchanged) & servers (changed) meaning that servers will likely be affected even more gravely.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780778925/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:47:20Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32862914085",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 3491887,
            "login": "FranzBusch",
            "display_login": "FranzBusch",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FranzBusch",
            "avatar_url": "https://avatars.githubusercontent.com/u/3491887?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 15,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-26T09:38:21Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780763792",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1780763792",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1780763792,
                "node_id": "IC_kwDOBy6rG85qJEyQ",
                "user": {
                    "login": "FranzBusch",
                    "id": 3491887,
                    "node_id": "MDQ6VXNlcjM0OTE4ODc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/3491887?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/FranzBusch",
                    "html_url": "https://github.com/FranzBusch",
                    "followers_url": "https://api.github.com/users/FranzBusch/followers",
                    "following_url": "https://api.github.com/users/FranzBusch/following{/other_user}",
                    "gists_url": "https://api.github.com/users/FranzBusch/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/FranzBusch/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/FranzBusch/subscriptions",
                    "organizations_url": "https://api.github.com/users/FranzBusch/orgs",
                    "repos_url": "https://api.github.com/users/FranzBusch/repos",
                    "events_url": "https://api.github.com/users/FranzBusch/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/FranzBusch/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:38:21Z",
                "updated_at": "2023-10-26T09:38:21Z",
                "author_association": "CONTRIBUTOR",
                "body": "Thanks for all the investigation. At this point, can you please file a feedback using Apple feedback tool, attach all of the information you provided here and please send us the feedback number.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780763792/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:38:21Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32862479301",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 92025456,
            "login": "MatthewTHFisher",
            "display_login": "MatthewTHFisher",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MatthewTHFisher",
            "avatar_url": "https://avatars.githubusercontent.com/u/92025456?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 14,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-26T09:23:44Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780740583",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1780740583",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1780740583,
                "node_id": "IC_kwDOBy6rG85qI_Hn",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:23:44Z",
                "updated_at": "2023-10-26T09:23:44Z",
                "author_association": "NONE",
                "body": "> Can you try using Xcode 15 and see if you can still reproduce this? This looks like a compiler bug where we emitted `_swift_getExtendedExistentialTypeMetadata` when it wasn't present for older runtimes and it looks like it was fixed some time ago already.\r\n\r\nJust had a colleague test this on his MacBook (M1 chip, Xcode 15.0.0) and the result was the same. The app crashed on launch with the following output.\r\n\r\n```\r\ndyld[93329]: Symbol not found: _swift_getExtendedExistentialTypeMetadata\r\nReferenced from: /Users/jwalke21/Library/Developer/CoreSimulator/Devices/7CDA09D2-9CE5-4C68-9A1F-2FB91CED61E7/data/Containers/Bundle/Application/79A75945-2ADC-464F-BA20-AAF1F3722270/Swift-NIO-2-60-0-Check.app/Swift-NIO-2-60-0-Check\r\nExpected in: /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 15.5.simruntime/Contents/Resources/RuntimeRoot/usr/lib/swift/libswiftCore.dylib\r\n```",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780740583/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:23:45Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32862436632",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 3491887,
            "login": "FranzBusch",
            "display_login": "FranzBusch",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FranzBusch",
            "avatar_url": "https://avatars.githubusercontent.com/u/3491887?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 13,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-26T09:22:20Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780737777",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1780737777",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1780737777,
                "node_id": "IC_kwDOBy6rG85qI-bx",
                "user": {
                    "login": "FranzBusch",
                    "id": 3491887,
                    "node_id": "MDQ6VXNlcjM0OTE4ODc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/3491887?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/FranzBusch",
                    "html_url": "https://github.com/FranzBusch",
                    "followers_url": "https://api.github.com/users/FranzBusch/followers",
                    "following_url": "https://api.github.com/users/FranzBusch/following{/other_user}",
                    "gists_url": "https://api.github.com/users/FranzBusch/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/FranzBusch/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/FranzBusch/subscriptions",
                    "organizations_url": "https://api.github.com/users/FranzBusch/orgs",
                    "repos_url": "https://api.github.com/users/FranzBusch/repos",
                    "events_url": "https://api.github.com/users/FranzBusch/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/FranzBusch/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:22:20Z",
                "updated_at": "2023-10-26T09:22:20Z",
                "author_association": "CONTRIBUTOR",
                "body": "Can you try using Xcode 15 and see if you can still reproduce this? This looks like a compiler bug where we emitted `_swift_getExtendedExistentialTypeMetadata` when it wasn't present for older runtimes and it looks like it was fixed some time ago already.",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780737777/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:22:21Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32862188127",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 92025456,
            "login": "MatthewTHFisher",
            "display_login": "MatthewTHFisher",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MatthewTHFisher",
            "avatar_url": "https://avatars.githubusercontent.com/u/92025456?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2574",
                "id": 1961449907,
                "node_id": "I_kwDOBy6rG8506Vmz",
                "number": 2574,
                "title": "Version 2.60.0 causing app to crash when launched on iOS 15.5 simulator",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 12,
                "created_at": "2023-10-25T13:36:40Z",
                "updated_at": "2023-10-26T09:14:01Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\n\r\nWhen running our iOS app on an iOS 15.5 simulator with the swift-nio package version `2.60.0`, our app launches and runs as expected.\r\n\r\n### Actual behavior\r\n\r\nWhen running on a iOS 15.5 simulator while using swift-nio 2.60.0, the app launches and then immediately crashes with `Thread 1: signal SIGABRT`\r\n\r\nWhen run on a iOS 16.4 simulator the app runs as expected.\r\n\r\n### Workaround\r\n\r\nDowngrade to swift-nio version `2.59.0` and the app runs fine on iOS 15.5 simulators.\r\n\r\n### System & version information\r\n\r\nOS System - MacOS 13.6 (22G120)\r\nProcesser type - Attempted on both Intel and Apple-silicon\r\nXcode - 14.3.1 (14E300c)\r\nXcode simulators - iPhone 12 | iOS 15.5 & iOS 16.4",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2574/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2574/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780723862",
                "html_url": "https://github.com/apple/swift-nio/issues/2574#issuecomment-1780723862",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2574",
                "id": 1780723862,
                "node_id": "IC_kwDOBy6rG85qI7CW",
                "user": {
                    "login": "MatthewTHFisher",
                    "id": 92025456,
                    "node_id": "U_kgDOBXwycA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/92025456?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MatthewTHFisher",
                    "html_url": "https://github.com/MatthewTHFisher",
                    "followers_url": "https://api.github.com/users/MatthewTHFisher/followers",
                    "following_url": "https://api.github.com/users/MatthewTHFisher/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MatthewTHFisher/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MatthewTHFisher/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MatthewTHFisher/subscriptions",
                    "organizations_url": "https://api.github.com/users/MatthewTHFisher/orgs",
                    "repos_url": "https://api.github.com/users/MatthewTHFisher/repos",
                    "events_url": "https://api.github.com/users/MatthewTHFisher/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MatthewTHFisher/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:14:01Z",
                "updated_at": "2023-10-26T09:14:01Z",
                "author_association": "NONE",
                "body": "> @MatthewTHFisher Does `Console.app` have dyld logs that are relevant here?\r\n\r\nTried to look in the Console.app but couldn't spot any useful dyld logs.\r\n\r\nI have however managed to replicate this issue on a new project within Xcode and have written the steps to reproduce this result.\r\n\r\n1. Create a new iOS App project in Xcode.\r\n2. Project > Info > Set iOS deployment target to iOS 15.0\r\n3. Target > General > Set minimum deployment to iOS 15.0\u2028\r\n4. Project > Package Dependencies > Add swift-nio package to project making sure to get version 2.60.0. When asked to choose package products choose, `NIO`, `NIOHTTP1`, and `NIOWebSocket`.\r\n5. _(Optional, not sure if this mattered)_ Add `import NIO` to the list of dependencies in a file, I added it to `ContentView.swift` (SwiftUI).\r\n6. Then run the app on a iOS 15 sim.\r\n\r\nAt this point when the app launches and crashes I get the same error message in Xcode as experienced earlier _(just with different project names)_:\r\n\r\n> After performing a clean build the issue still persists. I also get this output in Xcode\r\n> \r\n> ```\r\n> dyld[97022]: Symbol not found: _swift_getExtendedExistentialTypeMetadata\r\n>   Referenced from: /Users/mfisher/Library/Developer/CoreSimulator/Devices/2EF156A4-64B6-40FC-AC71-03A0E58CE698/data/Containers/Bundle/Application/BA1A2580-3370-4FEB-A252-270AFE4B17E0/APP_NAME.app/APP_NAME\r\n>   Expected in: /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 15.5.simruntime/Contents/Resources/RuntimeRoot/usr/lib/swift/libswiftCore.dylib\r\n> ```\r\n\r\nI have also attached the crash report here >  [Swift-NIO-2-60-0-Check-2023-10-26-094542.txt](https://github.com/apple/swift-nio/files/13175137/Swift-NIO-2-60-0-Check-2023-10-26-094542.txt)\r\n\r\nTo get around this issue on the above new project, try running the project with swift-nio set to `2.59.0` on an iOS 15 sim, or try running with swift-nio still set to `2.60.0` but on an iOS 16 sim.\r\n\r\n\r\n\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780723862/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:14:02Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32861931057",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 9382567,
            "login": "adam-fowler",
            "display_login": "adam-fowler",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adam-fowler",
            "avatar_url": "https://avatars.githubusercontent.com/u/9382567?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2576",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2576/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2576/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2576/events",
                "html_url": "https://github.com/apple/swift-nio/pull/2576",
                "id": 1962899589,
                "node_id": "PR_kwDOBy6rG85d1UG9",
                "number": 2576,
                "title": "Async apis for NonBlockingFileIO",
                "user": {
                    "login": "adam-fowler",
                    "id": 9382567,
                    "node_id": "MDQ6VXNlcjkzODI1Njc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/9382567?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/adam-fowler",
                    "html_url": "https://github.com/adam-fowler",
                    "followers_url": "https://api.github.com/users/adam-fowler/followers",
                    "following_url": "https://api.github.com/users/adam-fowler/following{/other_user}",
                    "gists_url": "https://api.github.com/users/adam-fowler/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/adam-fowler/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/adam-fowler/subscriptions",
                    "organizations_url": "https://api.github.com/users/adam-fowler/orgs",
                    "repos_url": "https://api.github.com/users/adam-fowler/repos",
                    "events_url": "https://api.github.com/users/adam-fowler/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/adam-fowler/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 1,
                "created_at": "2023-10-26T07:36:07Z",
                "updated_at": "2023-10-26T09:05:28Z",
                "closed_at": null,
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/apple/swift-nio/pulls/2576",
                    "html_url": "https://github.com/apple/swift-nio/pull/2576",
                    "diff_url": "https://github.com/apple/swift-nio/pull/2576.diff",
                    "patch_url": "https://github.com/apple/swift-nio/pull/2576.patch",
                    "merged_at": null
                },
                "body": "Provide async versions of most NonBlockingFileIO APIs. This PR provides versions of all functions apart from the `readChunked` function which should probably be replaced by an AsyncSequence.\r\n\r\n\r\nSome of the code running on the NIOThreadPool that would have been duplicated has been broken out into separate functions so it can be used by both ELF and async functions.\r\n\r\nI've also provided async versions of the relevant tests\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2576/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2576/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780709881",
                "html_url": "https://github.com/apple/swift-nio/pull/2576#issuecomment-1780709881",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2576",
                "id": 1780709881,
                "node_id": "IC_kwDOBy6rG85qI3n5",
                "user": {
                    "login": "adam-fowler",
                    "id": 9382567,
                    "node_id": "MDQ6VXNlcjkzODI1Njc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/9382567?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/adam-fowler",
                    "html_url": "https://github.com/adam-fowler",
                    "followers_url": "https://api.github.com/users/adam-fowler/followers",
                    "following_url": "https://api.github.com/users/adam-fowler/following{/other_user}",
                    "gists_url": "https://api.github.com/users/adam-fowler/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/adam-fowler/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/adam-fowler/subscriptions",
                    "organizations_url": "https://api.github.com/users/adam-fowler/orgs",
                    "repos_url": "https://api.github.com/users/adam-fowler/repos",
                    "events_url": "https://api.github.com/users/adam-fowler/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/adam-fowler/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T09:05:28Z",
                "updated_at": "2023-10-26T09:05:28Z",
                "author_association": "CONTRIBUTOR",
                "body": "I think it is complaining because I've reduced the number of allocations for the readChunked test.\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780709881/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T09:05:28Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32860899395",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 1382556,
            "login": "Lukasa",
            "display_login": "Lukasa",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lukasa",
            "avatar_url": "https://avatars.githubusercontent.com/u/1382556?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 1,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T08:30:17Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780653072",
                "html_url": "https://github.com/apple/swift-nio/issues/2577#issuecomment-1780653072",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "id": 1780653072,
                "node_id": "IC_kwDOBy6rG85qIpwQ",
                "user": {
                    "login": "Lukasa",
                    "id": 1382556,
                    "node_id": "MDQ6VXNlcjEzODI1NTY=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Lukasa",
                    "html_url": "https://github.com/Lukasa",
                    "followers_url": "https://api.github.com/users/Lukasa/followers",
                    "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
                    "organizations_url": "https://api.github.com/users/Lukasa/orgs",
                    "repos_url": "https://api.github.com/users/Lukasa/repos",
                    "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Lukasa/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T08:30:17Z",
                "updated_at": "2023-10-26T08:30:17Z",
                "author_association": "CONTRIBUTOR",
                "body": "The error you're seeing is a DNS resolution failure: we're failing to resolve `nox-devices--nox-memory-fastapi-app.modal.run` as a hostname.\r\n\r\nIs that hostname behind a VPN or some other limiter? Additionally, does your app have appropriate watch entitlements for networking?",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/comments/1780653072/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T08:30:17Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32859461950",
        "type": "IssuesEvent",
        "actor": {
            "id": 60069300,
            "login": "mcantillon21",
            "display_login": "mcantillon21",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcantillon21",
            "avatar_url": "https://avatars.githubusercontent.com/u/60069300?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "opened",
            "issue": {
                "url": "https://api.github.com/repos/apple/swift-nio/issues/2577",
                "repository_url": "https://api.github.com/repos/apple/swift-nio",
                "labels_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/labels{/name}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/comments",
                "events_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/events",
                "html_url": "https://github.com/apple/swift-nio/issues/2577",
                "id": 1962902815,
                "node_id": "I_kwDOBy6rG850_4Uf",
                "number": 2577,
                "title": "NIOConnectionErrors ",
                "user": {
                    "login": "mcantillon21",
                    "id": 60069300,
                    "node_id": "MDQ6VXNlcjYwMDY5MzAw",
                    "avatar_url": "https://avatars.githubusercontent.com/u/60069300?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mcantillon21",
                    "html_url": "https://github.com/mcantillon21",
                    "followers_url": "https://api.github.com/users/mcantillon21/followers",
                    "following_url": "https://api.github.com/users/mcantillon21/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mcantillon21/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mcantillon21/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mcantillon21/subscriptions",
                    "organizations_url": "https://api.github.com/users/mcantillon21/orgs",
                    "repos_url": "https://api.github.com/users/mcantillon21/repos",
                    "events_url": "https://api.github.com/users/mcantillon21/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mcantillon21/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 0,
                "created_at": "2023-10-26T07:38:13Z",
                "updated_at": "2023-10-26T07:38:13Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### Expected behavior\r\nEverything works: connection to server, sending the request, receiving the responses' audio stream and playing it outloud in real-time\r\n\r\n### Actual behavior\r\nFailed to connect to the server: NIOConnectionError(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443, dnsAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), dnsAAAAError: Optional(NIOCore.SocketAddressError.unknown(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)), connectionErrors: \r\n\r\n### Steps to reproduce\r\n\r\nFor some reason this works on my Watch Simulator but not my physical watch which is arguably more important. \r\n\r\nNot sure why this is happening, but my guess is it has something to do with the TLS, SSL configuration. It doesn't like moving to a different network, but the watch has a cellular plan so it should use that. \r\n\r\n\r\nThis is probably the most relevant function here: \r\n\r\n`    func sendTranscriptionToQueryEndpoint(transcription: String) {\r\n        print(\"Sending transcription to query endpoint...\")\r\n        let userID = \"254439ca-8ea0-4430-83e5-9ef1f885d7fc\"\r\n        \r\n        let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: 1)\r\n        let tlsConfiguration = TLSConfiguration.forClient()\r\n        let sslContext = try! NIOSSLContext(configuration: tlsConfiguration)\r\n        let tlsHandler = try! NIOSSLClientHandler(context: sslContext, serverHostname: \"nox-devices--nox-memory-fastapi-app-mcantillon21-dev.modal.run\")\r\n        \r\n        let bootstrap = ClientBootstrap(group: eventLoopGroup)\r\n            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)\r\n            .channelInitializer { channel in\r\n                channel.pipeline.addHandler(tlsHandler).flatMap {\r\n                    channel.pipeline.addHTTPClientHandlers()\r\n                }.flatMap {\r\n                    channel.pipeline.addHandler(HTTPHandler())\r\n                }\r\n            }\r\n        \r\n        var request = HTTPRequestHead(version: .init(major: 1, minor: 1), method: .POST, uri: \"/query\")\r\n        request.headers.add(name: \"Content-Type\", value: \"application/json\")\r\n        request.headers.add(name: \"Host\", value: \"nox-devices--nox-memory-fastapi-app.modal.run\")\r\n        \r\n        let body: [String: Any] = [\"userID\": userID, \"transcript\": \"helloooooooo! \", \"history\": []]\r\n        do {\r\n            let bodyData = try JSONSerialization.data(withJSONObject: body)\r\n            var requestBuffer = ByteBufferAllocator().buffer(capacity: bodyData.count)\r\n            requestBuffer.writeBytes(bodyData)\r\n            request.headers.add(name: \"Content-Length\", value: String(bodyData.count))\r\n            \r\n            let channelFuture = bootstrap.connect(host: \"nox-devices--nox-memory-fastapi-app.modal.run\", port: 443)\r\n            channelFuture.whenSuccess { channel in\r\n                print(\"Successfully connected to the server.\")\r\n                \r\n                let writeFuture = channel.writeAndFlush(HTTPClientRequestPart.head(request))\r\n                writeFuture.whenSuccess {\r\n                    print(\"Successfully wrote request head.\")\r\n                    let bodyMapped = channel.writeAndFlush(HTTPClientRequestPart.body(.byteBuffer(requestBuffer)))\r\n                    bodyMapped.whenSuccess {\r\n                        print(\"Successfully wrote and flushed request body.\")\r\n                    }\r\n                    bodyMapped.whenFailure { error in\r\n                        print(\"Failed to write and flush request body: \\(error)\")\r\n                    }\r\n                }\r\n                writeFuture.whenFailure { error in\r\n                    print(\"Failed to write request head: \\(error)\")\r\n                }\r\n            }\r\n            channelFuture.whenFailure { error in\r\n                print(\"Failed to connect to the server: \\(error)\")\r\n            }\r\n        } catch {\r\n            print(\"Failed to create body JSON data: \\(error)\")\r\n        }\r\n    }`\r\n\r\n`class HTTPHandler: ChannelInboundHandler {\r\n    typealias InboundIn = HTTPClientResponsePart\r\n\r\n    private let audioEngine = AVAudioEngine()\r\n    private let audioPlayerNode = AVAudioPlayerNode()\r\n    private let processingQueue = DispatchQueue(label: \"com.yourApp.audioProcessing\")\r\n\r\n    init() {\r\n        audioEngine.attach(audioPlayerNode)\r\n        audioEngine.connect(audioPlayerNode, to: audioEngine.outputNode, format: nil)\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Error starting audio engine: \\(error)\")\r\n        }\r\n    }\r\n\r\n    func channelRead(context: ChannelHandlerContext, data: NIOAny) {\r\n        let httpResponsePart = unwrapInboundIn(data)\r\n        switch httpResponsePart {\r\n        case .head(let responseHeader):\r\n            print(\"Received response: \\(responseHeader)\")\r\n        case .body(let byteBuffer):\r\n            // Here you can handle the received data chunk\r\n            if let data = byteBuffer.getBytes(at: 0, length: byteBuffer.readableBytes) {\r\n                print(\"Received data: \\(data)\")\r\n                playAudioData(data)\r\n            }\r\n        case .end(let headers):\r\n            print(\"Response ended with headers: \\(String(describing: headers))\")\r\n            audioEngine.stop()\r\n        }\r\n    }\r\n\r\n    private func playAudioData(_ data: [UInt8]) {\r\n        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32, sampleRate: 22050, channels: 1, interleaved: false) else {\r\n            print(\"Failed to create audio format\")\r\n            return\r\n        }\r\n\r\n        guard let audioBuffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: UInt32(data.count) / 2) else {\r\n            print(\"Failed to create audio buffer\")\r\n            return\r\n        }\r\n        audioBuffer.frameLength = UInt32(data.count) / 2\r\n\r\n        guard let audioBufferPointer = audioBuffer.floatChannelData?[0] else {\r\n            print(\"Failed to obtain audio buffer pointer\")\r\n            return\r\n        }\r\n\r\n        data.withUnsafeBytes {\r\n            guard let baseAddress = $0.bindMemory(to: Float32.self).baseAddress else {\r\n                print(\"Failed to bind memory\")\r\n                return\r\n            }\r\n            audioBufferPointer.assign(from: baseAddress, count: data.count / 2)\r\n        }\r\n\r\n        let audioEngine = AVAudioEngine()\r\n        let playerNode = AVAudioPlayerNode()\r\n        audioEngine.attach(playerNode)\r\n        audioEngine.connect(playerNode, to: audioEngine.mainMixerNode, format: audioFormat)\r\n\r\n        playerNode.scheduleBuffer(audioBuffer, completionHandler: nil)\r\n\r\n        do {\r\n            try audioEngine.start()\r\n        } catch {\r\n            print(\"Failed to start audio engine: \\(error.localizedDescription)\")\r\n            return\r\n        }\r\n        \r\n        playerNode.play()\r\n    }\r\n}\r\n`\r\nHappy to provide more context, but I have been struggling with this for the past week. Would love any help. \r\n\r\n### SwiftNIO version/commit hash\r\nLatest\r\n\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/apple/swift-nio/issues/2577/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/apple/swift-nio/issues/2577/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T07:38:14Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    },
    {
        "id": "32859408645",
        "type": "PullRequestEvent",
        "actor": {
            "id": 9382567,
            "login": "adam-fowler",
            "display_login": "adam-fowler",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adam-fowler",
            "avatar_url": "https://avatars.githubusercontent.com/u/9382567?"
        },
        "repo": {
            "id": 120498971,
            "name": "apple/swift-nio",
            "url": "https://api.github.com/repos/apple/swift-nio"
        },
        "payload": {
            "action": "opened",
            "number": 2576,
            "pull_request": {
                "url": "https://api.github.com/repos/apple/swift-nio/pulls/2576",
                "id": 1574257085,
                "node_id": "PR_kwDOBy6rG85d1UG9",
                "html_url": "https://github.com/apple/swift-nio/pull/2576",
                "diff_url": "https://github.com/apple/swift-nio/pull/2576.diff",
                "patch_url": "https://github.com/apple/swift-nio/pull/2576.patch",
                "issue_url": "https://api.github.com/repos/apple/swift-nio/issues/2576",
                "number": 2576,
                "state": "open",
                "locked": false,
                "title": "Async apis for NonBlockingFileIO",
                "user": {
                    "login": "adam-fowler",
                    "id": 9382567,
                    "node_id": "MDQ6VXNlcjkzODI1Njc=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/9382567?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/adam-fowler",
                    "html_url": "https://github.com/adam-fowler",
                    "followers_url": "https://api.github.com/users/adam-fowler/followers",
                    "following_url": "https://api.github.com/users/adam-fowler/following{/other_user}",
                    "gists_url": "https://api.github.com/users/adam-fowler/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/adam-fowler/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/adam-fowler/subscriptions",
                    "organizations_url": "https://api.github.com/users/adam-fowler/orgs",
                    "repos_url": "https://api.github.com/users/adam-fowler/repos",
                    "events_url": "https://api.github.com/users/adam-fowler/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/adam-fowler/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "Provide async versions of most NonBlockingFileIO APIs. This PR provides versions of all functions apart from the `readChunked` function which should probably be replaced by an AsyncSequence.\r\n\r\nI've also provided async versions of the relevant tests\r\n",
                "created_at": "2023-10-26T07:36:07Z",
                "updated_at": "2023-10-26T07:36:07Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": null,
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [],
                "requested_teams": [],
                "labels": [],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/apple/swift-nio/pulls/2576/commits",
                "review_comments_url": "https://api.github.com/repos/apple/swift-nio/pulls/2576/comments",
                "review_comment_url": "https://api.github.com/repos/apple/swift-nio/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/apple/swift-nio/issues/2576/comments",
                "statuses_url": "https://api.github.com/repos/apple/swift-nio/statuses/7d314ef95671929c5c7e991b6da43180813e03a1",
                "head": {
                    "label": "adam-fowler:async-nonblocking-fileio",
                    "ref": "async-nonblocking-fileio",
                    "sha": "7d314ef95671929c5c7e991b6da43180813e03a1",
                    "user": {
                        "login": "adam-fowler",
                        "id": 9382567,
                        "node_id": "MDQ6VXNlcjkzODI1Njc=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/9382567?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/adam-fowler",
                        "html_url": "https://github.com/adam-fowler",
                        "followers_url": "https://api.github.com/users/adam-fowler/followers",
                        "following_url": "https://api.github.com/users/adam-fowler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/adam-fowler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/adam-fowler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/adam-fowler/subscriptions",
                        "organizations_url": "https://api.github.com/users/adam-fowler/orgs",
                        "repos_url": "https://api.github.com/users/adam-fowler/repos",
                        "events_url": "https://api.github.com/users/adam-fowler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/adam-fowler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 358540883,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNTg1NDA4ODM=",
                        "name": "swift-nio",
                        "full_name": "adam-fowler/swift-nio",
                        "private": false,
                        "owner": {
                            "login": "adam-fowler",
                            "id": 9382567,
                            "node_id": "MDQ6VXNlcjkzODI1Njc=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/9382567?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/adam-fowler",
                            "html_url": "https://github.com/adam-fowler",
                            "followers_url": "https://api.github.com/users/adam-fowler/followers",
                            "following_url": "https://api.github.com/users/adam-fowler/following{/other_user}",
                            "gists_url": "https://api.github.com/users/adam-fowler/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/adam-fowler/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/adam-fowler/subscriptions",
                            "organizations_url": "https://api.github.com/users/adam-fowler/orgs",
                            "repos_url": "https://api.github.com/users/adam-fowler/repos",
                            "events_url": "https://api.github.com/users/adam-fowler/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/adam-fowler/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/adam-fowler/swift-nio",
                        "description": "Event-driven network application framework for high performance protocol servers & clients, non-blocking.",
                        "fork": true,
                        "url": "https://api.github.com/repos/adam-fowler/swift-nio",
                        "forks_url": "https://api.github.com/repos/adam-fowler/swift-nio/forks",
                        "keys_url": "https://api.github.com/repos/adam-fowler/swift-nio/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/adam-fowler/swift-nio/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/adam-fowler/swift-nio/teams",
                        "hooks_url": "https://api.github.com/repos/adam-fowler/swift-nio/hooks",
                        "issue_events_url": "https://api.github.com/repos/adam-fowler/swift-nio/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/adam-fowler/swift-nio/events",
                        "assignees_url": "https://api.github.com/repos/adam-fowler/swift-nio/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/adam-fowler/swift-nio/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/adam-fowler/swift-nio/tags",
                        "blobs_url": "https://api.github.com/repos/adam-fowler/swift-nio/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/adam-fowler/swift-nio/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/adam-fowler/swift-nio/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/adam-fowler/swift-nio/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/adam-fowler/swift-nio/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/adam-fowler/swift-nio/languages",
                        "stargazers_url": "https://api.github.com/repos/adam-fowler/swift-nio/stargazers",
                        "contributors_url": "https://api.github.com/repos/adam-fowler/swift-nio/contributors",
                        "subscribers_url": "https://api.github.com/repos/adam-fowler/swift-nio/subscribers",
                        "subscription_url": "https://api.github.com/repos/adam-fowler/swift-nio/subscription",
                        "commits_url": "https://api.github.com/repos/adam-fowler/swift-nio/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/adam-fowler/swift-nio/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/adam-fowler/swift-nio/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/adam-fowler/swift-nio/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/adam-fowler/swift-nio/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/adam-fowler/swift-nio/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/adam-fowler/swift-nio/merges",
                        "archive_url": "https://api.github.com/repos/adam-fowler/swift-nio/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/adam-fowler/swift-nio/downloads",
                        "issues_url": "https://api.github.com/repos/adam-fowler/swift-nio/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/adam-fowler/swift-nio/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/adam-fowler/swift-nio/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/adam-fowler/swift-nio/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/adam-fowler/swift-nio/labels{/name}",
                        "releases_url": "https://api.github.com/repos/adam-fowler/swift-nio/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/adam-fowler/swift-nio/deployments",
                        "created_at": "2021-04-16T09:10:04Z",
                        "updated_at": "2022-01-10T17:11:14Z",
                        "pushed_at": "2023-10-25T20:59:51Z",
                        "git_url": "git://github.com/adam-fowler/swift-nio.git",
                        "ssh_url": "git@github.com:adam-fowler/swift-nio.git",
                        "clone_url": "https://github.com/adam-fowler/swift-nio.git",
                        "svn_url": "https://github.com/adam-fowler/swift-nio",
                        "homepage": "https://apple.github.io/swift-nio/",
                        "size": 46484,
                        "stargazers_count": 0,
                        "watchers_count": 0,
                        "language": "Swift",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "apache-2.0",
                            "name": "Apache License 2.0",
                            "spdx_id": "Apache-2.0",
                            "url": "https://api.github.com/licenses/apache-2.0",
                            "node_id": "MDc6TGljZW5zZTI="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 0,
                        "default_branch": "main"
                    }
                },
                "base": {
                    "label": "apple:main",
                    "ref": "main",
                    "sha": "740fc734f3266e8e374817cea0db48d2da807007",
                    "user": {
                        "login": "apple",
                        "id": 10639145,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEwNjM5MTQ1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/10639145?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/apple",
                        "html_url": "https://github.com/apple",
                        "followers_url": "https://api.github.com/users/apple/followers",
                        "following_url": "https://api.github.com/users/apple/following{/other_user}",
                        "gists_url": "https://api.github.com/users/apple/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/apple/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/apple/subscriptions",
                        "organizations_url": "https://api.github.com/users/apple/orgs",
                        "repos_url": "https://api.github.com/users/apple/repos",
                        "events_url": "https://api.github.com/users/apple/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/apple/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 120498971,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA0OTg5NzE=",
                        "name": "swift-nio",
                        "full_name": "apple/swift-nio",
                        "private": false,
                        "owner": {
                            "login": "apple",
                            "id": 10639145,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjEwNjM5MTQ1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/apple",
                            "html_url": "https://github.com/apple",
                            "followers_url": "https://api.github.com/users/apple/followers",
                            "following_url": "https://api.github.com/users/apple/following{/other_user}",
                            "gists_url": "https://api.github.com/users/apple/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/apple/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/apple/subscriptions",
                            "organizations_url": "https://api.github.com/users/apple/orgs",
                            "repos_url": "https://api.github.com/users/apple/repos",
                            "events_url": "https://api.github.com/users/apple/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/apple/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/apple/swift-nio",
                        "description": "Event-driven network application framework for high performance protocol servers & clients, non-blocking.",
                        "fork": false,
                        "url": "https://api.github.com/repos/apple/swift-nio",
                        "forks_url": "https://api.github.com/repos/apple/swift-nio/forks",
                        "keys_url": "https://api.github.com/repos/apple/swift-nio/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/apple/swift-nio/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/apple/swift-nio/teams",
                        "hooks_url": "https://api.github.com/repos/apple/swift-nio/hooks",
                        "issue_events_url": "https://api.github.com/repos/apple/swift-nio/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/apple/swift-nio/events",
                        "assignees_url": "https://api.github.com/repos/apple/swift-nio/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/apple/swift-nio/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/apple/swift-nio/tags",
                        "blobs_url": "https://api.github.com/repos/apple/swift-nio/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/apple/swift-nio/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/apple/swift-nio/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/apple/swift-nio/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/apple/swift-nio/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/apple/swift-nio/languages",
                        "stargazers_url": "https://api.github.com/repos/apple/swift-nio/stargazers",
                        "contributors_url": "https://api.github.com/repos/apple/swift-nio/contributors",
                        "subscribers_url": "https://api.github.com/repos/apple/swift-nio/subscribers",
                        "subscription_url": "https://api.github.com/repos/apple/swift-nio/subscription",
                        "commits_url": "https://api.github.com/repos/apple/swift-nio/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/apple/swift-nio/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/apple/swift-nio/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/apple/swift-nio/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/apple/swift-nio/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/apple/swift-nio/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/apple/swift-nio/merges",
                        "archive_url": "https://api.github.com/repos/apple/swift-nio/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/apple/swift-nio/downloads",
                        "issues_url": "https://api.github.com/repos/apple/swift-nio/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/apple/swift-nio/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/apple/swift-nio/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/apple/swift-nio/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/apple/swift-nio/labels{/name}",
                        "releases_url": "https://api.github.com/repos/apple/swift-nio/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/apple/swift-nio/deployments",
                        "created_at": "2018-02-06T17:47:31Z",
                        "updated_at": "2023-10-26T01:21:47Z",
                        "pushed_at": "2023-10-26T07:36:07Z",
                        "git_url": "git://github.com/apple/swift-nio.git",
                        "ssh_url": "git@github.com:apple/swift-nio.git",
                        "clone_url": "https://github.com/apple/swift-nio.git",
                        "svn_url": "https://github.com/apple/swift-nio",
                        "homepage": "https://swiftpackageindex.com/apple/swift-nio/documentation",
                        "size": 7521,
                        "stargazers_count": 7552,
                        "watchers_count": 7552,
                        "language": "Swift",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": true,
                        "has_discussions": false,
                        "forks_count": 627,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 202,
                        "license": {
                            "key": "apache-2.0",
                            "name": "Apache License 2.0",
                            "spdx_id": "Apache-2.0",
                            "url": "https://api.github.com/licenses/apache-2.0",
                            "node_id": "MDc6TGljZW5zZTI="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "asynchronous-io",
                            "event-driven",
                            "high-performance",
                            "networking",
                            "non-blocking",
                            "non-blocking-io",
                            "swift",
                            "swift-server",
                            "swift5",
                            "swiftnio"
                        ],
                        "visibility": "public",
                        "forks": 627,
                        "open_issues": 202,
                        "watchers": 7552,
                        "default_branch": "main"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2576"
                    },
                    "html": {
                        "href": "https://github.com/apple/swift-nio/pull/2576"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/apple/swift-nio/issues/2576"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/apple/swift-nio/issues/2576/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2576/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/apple/swift-nio/pulls/2576/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/apple/swift-nio/statuses/7d314ef95671929c5c7e991b6da43180813e03a1"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": false,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": null,
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 3,
                "additions": 1066,
                "deletions": 57,
                "changed_files": 4
            }
        },
        "public": true,
        "created_at": "2023-10-26T07:36:08Z",
        "org": {
            "id": 10639145,
            "login": "apple",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/apple",
            "avatar_url": "https://avatars.githubusercontent.com/u/10639145?"
        }
    }
]