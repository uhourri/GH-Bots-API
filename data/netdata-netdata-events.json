[
    {
        "id": "32897004837",
        "type": "IssuesEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "opened",
            "issue": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/16283",
                "repository_url": "https://api.github.com/repos/netdata/netdata",
                "labels_url": "https://api.github.com/repos/netdata/netdata/issues/16283/labels{/name}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16283/comments",
                "events_url": "https://api.github.com/repos/netdata/netdata/issues/16283/events",
                "html_url": "https://github.com/netdata/netdata/issues/16283",
                "id": 1965316317,
                "node_id": "I_kwDOAKPxd851JFjd",
                "number": 16283,
                "title": "[Feat]: add zstd to packaging",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 1065918744,
                        "node_id": "MDU6TGFiZWwxMDY1OTE4NzQ0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/feature%20request",
                        "name": "feature request",
                        "color": "9beff2",
                        "default": false,
                        "description": "New features"
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": {
                    "login": "Ferroin",
                    "id": 905151,
                    "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Ferroin",
                    "html_url": "https://github.com/Ferroin",
                    "followers_url": "https://api.github.com/users/Ferroin/followers",
                    "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                    "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                    "repos_url": "https://api.github.com/users/Ferroin/repos",
                    "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "milestone": null,
                "comments": 0,
                "created_at": "2023-10-27T11:23:54Z",
                "updated_at": "2023-10-27T11:23:55Z",
                "closed_at": null,
                "author_association": "MEMBER",
                "active_lock_reason": null,
                "body": "### Problem\n\nzstd compression support added in #16268. It is the preferred compression algorithm for streaming: up to 40% less bandwidth compared to lz4. Using it increases CPU usage (up to 20% for streaming), but with the #16127 optimization, ND will use the same CPU time (or even less), so overall it will be about the same CPU usage, but less traffic with zstd. The compression method is configurable, so users can switch to lz4 if they prefer less CPU over less traffic.\r\n\r\nThe problem is we need to add zstd (e.g. `libzstd-dev` on Deb) to packaging (native, static, docker, from source).\n\n### Description\n\nAdd zstd to packaging so Netdata is built with zstd support.\n\n### Importance\n\nmust have\n\n### Value proposition\n\nzstd compression support (streaming).\r\n\r\n\n\n### Proposed implementation\n\n_No response_",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/16283/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/netdata/netdata/issues/16283/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T11:23:57Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32896529064",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 7759548,
            "login": "k0ste",
            "display_login": "k0ste",
            "gravatar_id": "",
            "url": "https://api.github.com/users/k0ste",
            "avatar_url": "https://avatars.githubusercontent.com/u/7759548?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/16280",
                "repository_url": "https://api.github.com/repos/netdata/netdata",
                "labels_url": "https://api.github.com/repos/netdata/netdata/issues/16280/labels{/name}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16280/comments",
                "events_url": "https://api.github.com/repos/netdata/netdata/issues/16280/events",
                "html_url": "https://github.com/netdata/netdata/issues/16280",
                "id": 1963981609,
                "node_id": "I_kwDOAKPxd851D_sp",
                "number": 16280,
                "title": "[Feat]: go.d: add version to go.d.plugin config.tar.gz artifact",
                "user": {
                    "login": "k0ste",
                    "id": 7759548,
                    "node_id": "MDQ6VXNlcjc3NTk1NDg=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/7759548?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/k0ste",
                    "html_url": "https://github.com/k0ste",
                    "followers_url": "https://api.github.com/users/k0ste/followers",
                    "following_url": "https://api.github.com/users/k0ste/following{/other_user}",
                    "gists_url": "https://api.github.com/users/k0ste/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/k0ste/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/k0ste/subscriptions",
                    "organizations_url": "https://api.github.com/users/k0ste/orgs",
                    "repos_url": "https://api.github.com/users/k0ste/repos",
                    "events_url": "https://api.github.com/users/k0ste/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/k0ste/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 1065918744,
                        "node_id": "MDU6TGFiZWwxMDY1OTE4NzQ0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/feature%20request",
                        "name": "feature request",
                        "color": "9beff2",
                        "default": false,
                        "description": "New features"
                    },
                    {
                        "id": 4028341603,
                        "node_id": "LA_kwDOAKPxd87wG51j",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/go.d",
                        "name": "collectors/go.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 2,
                "created_at": "2023-10-26T16:55:54Z",
                "updated_at": "2023-10-27T11:04:14Z",
                "closed_at": "2023-10-26T18:49:08Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### Problem\n\nCurrent naming of `config.tar.gz` file is lack of unique file name\n\n### Description\n\nThe configs artifact provided like: https://github.com/netdata/go.d.plugin/releases/download/v0.56.3/config.tar.gz\n\n### Importance\n\nreally want\n\n### Value proposition\n\nIn some build cases it caused problems with local artifacts cache (in gitlab, for example). Where, between builds, the new version of package may have non-unique file name from previous build\n\n### Proposed implementation\n\nProvide file name with version number, like:\r\n`https://github.com/netdata/go.d.plugin/releases/download/v0.56.3/go.d.plugin-config-v0.56.3.tar.gz` for example",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/16280/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/netdata/netdata/issues/16280/timeline",
                "performed_via_github_app": null,
                "state_reason": "completed"
            },
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782721932",
                "html_url": "https://github.com/netdata/netdata/issues/16280#issuecomment-1782721932",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16280",
                "id": 1782721932,
                "node_id": "IC_kwDOAKPxd85qQi2M",
                "user": {
                    "login": "k0ste",
                    "id": 7759548,
                    "node_id": "MDQ6VXNlcjc3NTk1NDg=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/7759548?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/k0ste",
                    "html_url": "https://github.com/k0ste",
                    "followers_url": "https://api.github.com/users/k0ste/followers",
                    "following_url": "https://api.github.com/users/k0ste/following{/other_user}",
                    "gists_url": "https://api.github.com/users/k0ste/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/k0ste/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/k0ste/subscriptions",
                    "organizations_url": "https://api.github.com/users/k0ste/orgs",
                    "repos_url": "https://api.github.com/users/k0ste/repos",
                    "events_url": "https://api.github.com/users/k0ste/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/k0ste/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T11:04:14Z",
                "updated_at": "2023-10-27T11:04:14Z",
                "author_association": "CONTRIBUTOR",
                "body": "> starting from [v0.56.4](https://github.com/netdata/go.d.plugin/releases/tag/v0.56.4) there will be `go.d.plugin-config-{VERSION}.tar.gz`.\r\n\r\nThanks for fast resolution \ud83e\udd1d",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782721932/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T11:04:15Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32896480353",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 12612986,
            "login": "tkatsoulas",
            "display_login": "tkatsoulas",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tkatsoulas",
            "avatar_url": "https://avatars.githubusercontent.com/u/12612986?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1701523554,
                "node_id": "PRR_kwDOAKPxd85lazBi",
                "user": {
                    "login": "tkatsoulas",
                    "id": 12612986,
                    "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                    "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/tkatsoulas",
                    "html_url": "https://github.com/tkatsoulas",
                    "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                    "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                    "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                    "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                    "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                    "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "",
                "commit_id": "599b2172df74f8da160ff279271f3d37829fb912",
                "submitted_at": "2023-10-27T11:02:14Z",
                "state": "approved",
                "html_url": "https://github.com/netdata/netdata/pull/16273#pullrequestreview-1701523554",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/16273",
                "author_association": "COLLABORATOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16273#pullrequestreview-1701523554"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16273"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16273",
                "id": 1573446710,
                "node_id": "PR_kwDOAKPxd85dyOQ2",
                "html_url": "https://github.com/netdata/netdata/pull/16273",
                "diff_url": "https://github.com/netdata/netdata/pull/16273.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16273.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16273",
                "number": 16273,
                "state": "open",
                "locked": false,
                "title": "local_listeners: add cmd args for reading specific files",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "##### Summary\r\n\r\n`local_listeners` reads 4 files from `/proc/net`:\r\n - `/proc/net/tcp`\r\n - `/proc/net/tc6`\r\n - `/proc/net/udp`\r\n - `/proc/net/udp6`\r\n\r\nThis PR adds command line arguments to narrow the scope.\r\n\r\n\r\n##### Test Plan\r\n\r\nExecute `local_listeners` with and without cmd line arguments.\r\n\r\n##### Additional Information\r\n<!-- This is usually used to help others understand your\r\nmotivation behind this change. A step-by-step reproduction of the problem is\r\nhelpful if there is no related issue. -->\r\n\r\n<details> <summary>For users: How does this change affect me?</summary>\r\n  <!--\r\nDescribe the PR affects users: \r\n- Which area of Netdata is affected by the change?\r\n- Can they see the change or is it an under the hood? If they can see it, where?\r\n- How is the user impacted by the change? \r\n- What are there any benefits of the change? \r\n-->\r\n</details>\r\n",
                "created_at": "2023-10-25T18:25:46Z",
                "updated_at": "2023-10-27T11:02:14Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "083f74ba11a1e82cc7e0f7ac366afa873176d752",
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "thiagoftsm",
                        "id": 49162938,
                        "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                        "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/thiagoftsm",
                        "html_url": "https://github.com/thiagoftsm",
                        "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                        "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                        "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                        "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                        "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                        "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16273/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16273/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16273/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/599b2172df74f8da160ff279271f3d37829fb912",
                "head": {
                    "label": "ilyam8:local_listeners_add_cmd_args_to_read_specific_files",
                    "ref": "local_listeners_add_cmd_args_to_read_specific_files",
                    "sha": "599b2172df74f8da160ff279271f3d37829fb912",
                    "user": {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 76925790,
                        "node_id": "MDEwOlJlcG9zaXRvcnk3NjkyNTc5MA==",
                        "name": "netdata",
                        "full_name": "ilyam8/netdata",
                        "private": false,
                        "owner": {
                            "login": "ilyam8",
                            "id": 22274335,
                            "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/ilyam8",
                            "html_url": "https://github.com/ilyam8",
                            "followers_url": "https://api.github.com/users/ilyam8/followers",
                            "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                            "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                            "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                            "repos_url": "https://api.github.com/users/ilyam8/repos",
                            "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/ilyam8/netdata",
                        "description": "Get control of your servers. Simple. Effective. Awesome. https://my-netdata.io/",
                        "fork": true,
                        "url": "https://api.github.com/repos/ilyam8/netdata",
                        "forks_url": "https://api.github.com/repos/ilyam8/netdata/forks",
                        "keys_url": "https://api.github.com/repos/ilyam8/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/ilyam8/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/ilyam8/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/ilyam8/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/ilyam8/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/ilyam8/netdata/events",
                        "assignees_url": "https://api.github.com/repos/ilyam8/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/ilyam8/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/ilyam8/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/ilyam8/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/ilyam8/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/ilyam8/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/ilyam8/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/ilyam8/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/ilyam8/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/ilyam8/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/ilyam8/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/ilyam8/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/ilyam8/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/ilyam8/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/ilyam8/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/ilyam8/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/ilyam8/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/ilyam8/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/ilyam8/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/ilyam8/netdata/merges",
                        "archive_url": "https://api.github.com/repos/ilyam8/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/ilyam8/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/ilyam8/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/ilyam8/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/ilyam8/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/ilyam8/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/ilyam8/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/ilyam8/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/ilyam8/netdata/deployments",
                        "created_at": "2016-12-20T05:23:27Z",
                        "updated_at": "2022-04-24T00:24:30Z",
                        "pushed_at": "2023-10-27T10:30:00Z",
                        "git_url": "git://github.com/ilyam8/netdata.git",
                        "ssh_url": "git@github.com:ilyam8/netdata.git",
                        "clone_url": "https://github.com/ilyam8/netdata.git",
                        "svn_url": "https://github.com/ilyam8/netdata",
                        "homepage": "",
                        "size": 170271,
                        "stargazers_count": 2,
                        "watchers_count": 2,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 2,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "88a02e9e22798d2b0390723df9a5e3c62268f3a2",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T09:15:27Z",
                        "pushed_at": "2023-10-27T10:39:09Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 172079,
                        "stargazers_count": 65638,
                        "watchers_count": 65638,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 368,
                        "watchers": 65638,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16273"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16273"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16273"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16273/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16273/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16273/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/599b2172df74f8da160ff279271f3d37829fb912"
                    }
                },
                "author_association": "MEMBER",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T11:02:15Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32896132198",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1701498763,
                "node_id": "PRR_kwDOAKPxd85las-L",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "",
                "commit_id": "4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df",
                "submitted_at": "2023-10-27T10:47:45Z",
                "state": "approved",
                "html_url": "https://github.com/netdata/netdata/pull/16282#pullrequestreview-1701498763",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/16282",
                "author_association": "MEMBER",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16282#pullrequestreview-1701498763"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16282",
                "id": 1576356553,
                "node_id": "PR_kwDOAKPxd85d9UrJ",
                "html_url": "https://github.com/netdata/netdata/pull/16282",
                "diff_url": "https://github.com/netdata/netdata/pull/16282.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16282.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16282",
                "number": 16282,
                "state": "open",
                "locked": false,
                "title": "Small optimization of alert queries",
                "user": {
                    "login": "MrZammler",
                    "id": 1905463,
                    "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MrZammler",
                    "html_url": "https://github.com/MrZammler",
                    "followers_url": "https://api.github.com/users/MrZammler/followers",
                    "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                    "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                    "repos_url": "https://api.github.com/users/MrZammler/repos",
                    "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "##### Summary\r\n<!--\r\nDescribe the change in summary section, including rationale and design decisions.\r\nInclude \"Fixes #nnn\" if you are fixing an existing issue.\r\n-->\r\n\r\nCreation of indexes needed to speed up queries during cloud sending alerts, (decision to send or not to cloud) on parents with many alerts per children.\r\n\r\n##### Test Plan\r\n\r\n<!--\r\nProvide enough detail so that your reviewer can understand which test cases you\r\nhave covered, and recreate them if necessary. If our CI covers sufficient tests, then state which tests cover the change.\r\n-->\r\n\r\n##### Additional Information\r\n<!-- This is usually used to help others understand your\r\nmotivation behind this change. A step-by-step reproduction of the problem is\r\nhelpful if there is no related issue. -->\r\n\r\n<details> <summary>For users: How does this change affect me?</summary>\r\n  <!--\r\nDescribe the PR affects users: \r\n- Which area of Netdata is affected by the change?\r\n- Can they see the change or is it an under the hood? If they can see it, where?\r\n- How is the user impacted by the change? \r\n- What are there any benefits of the change? \r\n-->\r\n</details>\r\n",
                "created_at": "2023-10-27T10:39:08Z",
                "updated_at": "2023-10-27T10:47:45Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "4d8bb019ea73c6caf7f78d0f5a9e88ed53365da8",
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "thiagoftsm",
                        "id": 49162938,
                        "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                        "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/thiagoftsm",
                        "html_url": "https://github.com/thiagoftsm",
                        "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                        "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                        "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                        "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                        "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                        "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 1131633851,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzODUx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/database",
                        "name": "area/database",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1841489288,
                        "node_id": "MDU6TGFiZWwxODQxNDg5Mjg4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/aclk",
                        "name": "area/aclk",
                        "color": "6cfc92",
                        "default": false,
                        "description": ""
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16282/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16282/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16282/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df",
                "head": {
                    "label": "MrZammler:alerts-better-query-2",
                    "ref": "alerts-better-query-2",
                    "sha": "4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df",
                    "user": {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 334959846,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzMzQ5NTk4NDY=",
                        "name": "netdata",
                        "full_name": "MrZammler/netdata",
                        "private": false,
                        "owner": {
                            "login": "MrZammler",
                            "id": 1905463,
                            "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/MrZammler",
                            "html_url": "https://github.com/MrZammler",
                            "followers_url": "https://api.github.com/users/MrZammler/followers",
                            "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                            "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                            "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                            "repos_url": "https://api.github.com/users/MrZammler/repos",
                            "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/MrZammler/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/MrZammler/netdata",
                        "forks_url": "https://api.github.com/repos/MrZammler/netdata/forks",
                        "keys_url": "https://api.github.com/repos/MrZammler/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/MrZammler/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/MrZammler/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/MrZammler/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/MrZammler/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/MrZammler/netdata/events",
                        "assignees_url": "https://api.github.com/repos/MrZammler/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/MrZammler/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/MrZammler/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/MrZammler/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/MrZammler/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/MrZammler/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/MrZammler/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/MrZammler/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/MrZammler/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/MrZammler/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/MrZammler/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/MrZammler/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/MrZammler/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/MrZammler/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/MrZammler/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/MrZammler/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/MrZammler/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/MrZammler/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/MrZammler/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/MrZammler/netdata/merges",
                        "archive_url": "https://api.github.com/repos/MrZammler/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/MrZammler/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/MrZammler/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/MrZammler/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/MrZammler/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/MrZammler/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/MrZammler/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/MrZammler/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/MrZammler/netdata/deployments",
                        "created_at": "2021-02-01T13:32:31Z",
                        "updated_at": "2021-12-20T13:37:26Z",
                        "pushed_at": "2023-10-27T10:36:41Z",
                        "git_url": "git://github.com/MrZammler/netdata.git",
                        "ssh_url": "git@github.com:MrZammler/netdata.git",
                        "clone_url": "https://github.com/MrZammler/netdata.git",
                        "svn_url": "https://github.com/MrZammler/netdata",
                        "homepage": "",
                        "size": 173161,
                        "stargazers_count": 0,
                        "watchers_count": 0,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 0,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T09:15:27Z",
                        "pushed_at": "2023-10-27T10:39:09Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 172079,
                        "stargazers_count": 65638,
                        "watchers_count": 65638,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 368,
                        "watchers": 65638,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16282"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16282"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16282/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:47:46Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32895941728",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 1905463,
            "login": "MrZammler",
            "display_login": "MrZammler",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MrZammler",
            "avatar_url": "https://avatars.githubusercontent.com/u/1905463?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1701485200,
                "node_id": "PRR_kwDOAKPxd85lapqQ",
                "user": {
                    "login": "MrZammler",
                    "id": 1905463,
                    "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MrZammler",
                    "html_url": "https://github.com/MrZammler",
                    "followers_url": "https://api.github.com/users/MrZammler/followers",
                    "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                    "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                    "repos_url": "https://api.github.com/users/MrZammler/repos",
                    "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "",
                "commit_id": "080eafb9dd9232ab19369affba1227d715e4ea58",
                "submitted_at": "2023-10-27T10:39:43Z",
                "state": "approved",
                "html_url": "https://github.com/netdata/netdata/pull/16281#pullrequestreview-1701485200",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/16281",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16281#pullrequestreview-1701485200"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16281",
                "id": 1576344836,
                "node_id": "PR_kwDOAKPxd85d9R0E",
                "html_url": "https://github.com/netdata/netdata/pull/16281",
                "diff_url": "https://github.com/netdata/netdata/pull/16281.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16281.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16281",
                "number": 16281,
                "state": "open",
                "locked": false,
                "title": "update go.d version to 0.56.4",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "##### Summary\r\n<!--\r\nDescribe the change in summary section, including rationale and design decisions.\r\nInclude \"Fixes #nnn\" if you are fixing an existing issue.\r\n-->\r\n\r\n##### Test Plan\r\n\r\n<!--\r\nProvide enough detail so that your reviewer can understand which test cases you\r\nhave covered, and recreate them if necessary. If our CI covers sufficient tests, then state which tests cover the change.\r\n-->\r\n\r\n##### Additional Information\r\n<!-- This is usually used to help others understand your\r\nmotivation behind this change. A step-by-step reproduction of the problem is\r\nhelpful if there is no related issue. -->\r\n\r\n<details> <summary>For users: How does this change affect me?</summary>\r\n  <!--\r\nDescribe the PR affects users: \r\n- Which area of Netdata is affected by the change?\r\n- Can they see the change or is it an under the hood? If they can see it, where?\r\n- How is the user impacted by the change? \r\n- What are there any benefits of the change? \r\n-->\r\n</details>\r\n",
                "created_at": "2023-10-27T10:30:21Z",
                "updated_at": "2023-10-27T10:39:43Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "6e30073cf0b9c5ae78afe53e6a71d2100aea8ef9",
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16281/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16281/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16281/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/080eafb9dd9232ab19369affba1227d715e4ea58",
                "head": {
                    "label": "ilyam8:bump-go.d-v0.56.4",
                    "ref": "bump-go.d-v0.56.4",
                    "sha": "080eafb9dd9232ab19369affba1227d715e4ea58",
                    "user": {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 76925790,
                        "node_id": "MDEwOlJlcG9zaXRvcnk3NjkyNTc5MA==",
                        "name": "netdata",
                        "full_name": "ilyam8/netdata",
                        "private": false,
                        "owner": {
                            "login": "ilyam8",
                            "id": 22274335,
                            "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/ilyam8",
                            "html_url": "https://github.com/ilyam8",
                            "followers_url": "https://api.github.com/users/ilyam8/followers",
                            "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                            "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                            "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                            "repos_url": "https://api.github.com/users/ilyam8/repos",
                            "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/ilyam8/netdata",
                        "description": "Get control of your servers. Simple. Effective. Awesome. https://my-netdata.io/",
                        "fork": true,
                        "url": "https://api.github.com/repos/ilyam8/netdata",
                        "forks_url": "https://api.github.com/repos/ilyam8/netdata/forks",
                        "keys_url": "https://api.github.com/repos/ilyam8/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/ilyam8/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/ilyam8/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/ilyam8/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/ilyam8/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/ilyam8/netdata/events",
                        "assignees_url": "https://api.github.com/repos/ilyam8/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/ilyam8/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/ilyam8/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/ilyam8/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/ilyam8/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/ilyam8/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/ilyam8/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/ilyam8/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/ilyam8/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/ilyam8/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/ilyam8/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/ilyam8/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/ilyam8/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/ilyam8/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/ilyam8/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/ilyam8/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/ilyam8/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/ilyam8/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/ilyam8/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/ilyam8/netdata/merges",
                        "archive_url": "https://api.github.com/repos/ilyam8/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/ilyam8/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/ilyam8/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/ilyam8/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/ilyam8/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/ilyam8/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/ilyam8/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/ilyam8/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/ilyam8/netdata/deployments",
                        "created_at": "2016-12-20T05:23:27Z",
                        "updated_at": "2022-04-24T00:24:30Z",
                        "pushed_at": "2023-10-27T10:30:00Z",
                        "git_url": "git://github.com/ilyam8/netdata.git",
                        "ssh_url": "git@github.com:ilyam8/netdata.git",
                        "clone_url": "https://github.com/ilyam8/netdata.git",
                        "svn_url": "https://github.com/ilyam8/netdata",
                        "homepage": "",
                        "size": 170271,
                        "stargazers_count": 2,
                        "watchers_count": 2,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 2,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T09:15:27Z",
                        "pushed_at": "2023-10-27T10:39:09Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 172079,
                        "stargazers_count": 65638,
                        "watchers_count": 65638,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 368,
                        "watchers": 65638,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16281"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16281"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16281/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/080eafb9dd9232ab19369affba1227d715e4ea58"
                    }
                },
                "author_association": "MEMBER",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:39:44Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32895928458",
        "type": "PullRequestEvent",
        "actor": {
            "id": 1905463,
            "login": "MrZammler",
            "display_login": "MrZammler",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MrZammler",
            "avatar_url": "https://avatars.githubusercontent.com/u/1905463?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "opened",
            "number": 16282,
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16282",
                "id": 1576356553,
                "node_id": "PR_kwDOAKPxd85d9UrJ",
                "html_url": "https://github.com/netdata/netdata/pull/16282",
                "diff_url": "https://github.com/netdata/netdata/pull/16282.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16282.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16282",
                "number": 16282,
                "state": "open",
                "locked": false,
                "title": "Small optimization of alert queries",
                "user": {
                    "login": "MrZammler",
                    "id": 1905463,
                    "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/MrZammler",
                    "html_url": "https://github.com/MrZammler",
                    "followers_url": "https://api.github.com/users/MrZammler/followers",
                    "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                    "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                    "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                    "repos_url": "https://api.github.com/users/MrZammler/repos",
                    "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "##### Summary\r\n<!--\r\nDescribe the change in summary section, including rationale and design decisions.\r\nInclude \"Fixes #nnn\" if you are fixing an existing issue.\r\n-->\r\n\r\nCreation of indexes needed to speed up queries during cloud sending alerts, (decision to send or not to cloud) on parents with many alerts per children.\r\n\r\n##### Test Plan\r\n\r\n<!--\r\nProvide enough detail so that your reviewer can understand which test cases you\r\nhave covered, and recreate them if necessary. If our CI covers sufficient tests, then state which tests cover the change.\r\n-->\r\n\r\n##### Additional Information\r\n<!-- This is usually used to help others understand your\r\nmotivation behind this change. A step-by-step reproduction of the problem is\r\nhelpful if there is no related issue. -->\r\n\r\n<details> <summary>For users: How does this change affect me?</summary>\r\n  <!--\r\nDescribe the PR affects users: \r\n- Which area of Netdata is affected by the change?\r\n- Can they see the change or is it an under the hood? If they can see it, where?\r\n- How is the user impacted by the change? \r\n- What are there any benefits of the change? \r\n-->\r\n</details>\r\n",
                "created_at": "2023-10-27T10:39:08Z",
                "updated_at": "2023-10-27T10:39:09Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": null,
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "thiagoftsm",
                        "id": 49162938,
                        "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                        "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/thiagoftsm",
                        "html_url": "https://github.com/thiagoftsm",
                        "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                        "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                        "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                        "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                        "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                        "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16282/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16282/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16282/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df",
                "head": {
                    "label": "MrZammler:alerts-better-query-2",
                    "ref": "alerts-better-query-2",
                    "sha": "4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df",
                    "user": {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 334959846,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzMzQ5NTk4NDY=",
                        "name": "netdata",
                        "full_name": "MrZammler/netdata",
                        "private": false,
                        "owner": {
                            "login": "MrZammler",
                            "id": 1905463,
                            "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/MrZammler",
                            "html_url": "https://github.com/MrZammler",
                            "followers_url": "https://api.github.com/users/MrZammler/followers",
                            "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                            "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                            "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                            "repos_url": "https://api.github.com/users/MrZammler/repos",
                            "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/MrZammler/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/MrZammler/netdata",
                        "forks_url": "https://api.github.com/repos/MrZammler/netdata/forks",
                        "keys_url": "https://api.github.com/repos/MrZammler/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/MrZammler/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/MrZammler/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/MrZammler/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/MrZammler/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/MrZammler/netdata/events",
                        "assignees_url": "https://api.github.com/repos/MrZammler/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/MrZammler/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/MrZammler/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/MrZammler/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/MrZammler/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/MrZammler/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/MrZammler/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/MrZammler/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/MrZammler/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/MrZammler/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/MrZammler/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/MrZammler/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/MrZammler/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/MrZammler/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/MrZammler/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/MrZammler/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/MrZammler/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/MrZammler/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/MrZammler/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/MrZammler/netdata/merges",
                        "archive_url": "https://api.github.com/repos/MrZammler/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/MrZammler/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/MrZammler/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/MrZammler/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/MrZammler/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/MrZammler/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/MrZammler/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/MrZammler/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/MrZammler/netdata/deployments",
                        "created_at": "2021-02-01T13:32:31Z",
                        "updated_at": "2021-12-20T13:37:26Z",
                        "pushed_at": "2023-10-27T10:36:41Z",
                        "git_url": "git://github.com/MrZammler/netdata.git",
                        "ssh_url": "git@github.com:MrZammler/netdata.git",
                        "clone_url": "https://github.com/MrZammler/netdata.git",
                        "svn_url": "https://github.com/MrZammler/netdata",
                        "homepage": "",
                        "size": 173161,
                        "stargazers_count": 0,
                        "watchers_count": 0,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 0,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T09:15:27Z",
                        "pushed_at": "2023-10-27T10:39:09Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 172079,
                        "stargazers_count": 65638,
                        "watchers_count": 65638,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 368,
                        "watchers": 65638,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16282"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16282"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16282/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16282/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/4bc752a6ff9b3c686a5b0cd58e803fa5366ee6df"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": false,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": null,
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 1,
                "additions": 4,
                "deletions": 2,
                "changed_files": 2
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:39:10Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32895800828",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/16275",
                "repository_url": "https://api.github.com/repos/netdata/netdata",
                "labels_url": "https://api.github.com/repos/netdata/netdata/issues/16275/labels{/name}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16275/comments",
                "events_url": "https://api.github.com/repos/netdata/netdata/issues/16275/events",
                "html_url": "https://github.com/netdata/netdata/issues/16275",
                "id": 1963340836,
                "node_id": "I_kwDOAKPxd851BjQk",
                "number": 16275,
                "title": "[Bug]: netdata-go not found: create zip: modules/prometheus/integrations/cs:go.md: malformed file path \"modules/prometheus/integrations/cs:go.md\": invalid char ':'",
                "user": {
                    "login": "driesmp",
                    "id": 32487486,
                    "node_id": "MDQ6VXNlcjMyNDg3NDg2",
                    "avatar_url": "https://avatars.githubusercontent.com/u/32487486?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/driesmp",
                    "html_url": "https://github.com/driesmp",
                    "followers_url": "https://api.github.com/users/driesmp/followers",
                    "following_url": "https://api.github.com/users/driesmp/following{/other_user}",
                    "gists_url": "https://api.github.com/users/driesmp/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/driesmp/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/driesmp/subscriptions",
                    "organizations_url": "https://api.github.com/users/driesmp/orgs",
                    "repos_url": "https://api.github.com/users/driesmp/repos",
                    "events_url": "https://api.github.com/users/driesmp/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/driesmp/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 43793260,
                        "node_id": "MDU6TGFiZWw0Mzc5MzI2MA==",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/bug",
                        "name": "bug",
                        "color": "ba232a",
                        "default": true,
                        "description": ""
                    },
                    {
                        "id": 5809816548,
                        "node_id": "LA_kwDOAKPxd88AAAABWkrD5A",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/metadata",
                        "name": "area/metadata",
                        "color": "9CE10C",
                        "default": false,
                        "description": "Integrations metadata"
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": {
                    "login": "Ancairon",
                    "id": 70198089,
                    "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                    "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Ancairon",
                    "html_url": "https://github.com/Ancairon",
                    "followers_url": "https://api.github.com/users/Ancairon/followers",
                    "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                    "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                    "repos_url": "https://api.github.com/users/Ancairon/repos",
                    "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "milestone": null,
                "comments": 3,
                "created_at": "2023-10-26T11:40:05Z",
                "updated_at": "2023-10-27T10:33:48Z",
                "closed_at": "2023-10-26T13:41:45Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### Bug description\n\nIn FreeBSD we use the following link to allow for an easy port installation. Going from v0.56.0 to v0.56.1 it stopped working.\r\nThe following error is displayed when trying to fetch from this location: \r\n\r\n> not found: create zip: modules/prometheus/integrations/cs:go.md: malformed file path \"modules/prometheus/integrations/cs:go.md\": invalid char ':'\r\n\r\nhttps://[proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.1.mod](https://proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.1.mod)\r\n\r\nhttps://[proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.0.mod](https://proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.0.mod)\n\n### Expected behavior\n\nThe fetch link works as expect; and higher verisons:\r\nhttps://[proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.1.mod](https://proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.1.mod)\r\n\n\n### Steps to reproduce\n\nOpen in webbrowser and display error message\n\n### Installation method\n\nfrom source\n\n### System info\n\n```shell\n[/usr/ports/net-mgmt/netdata-go] git:(main*)$ uname -a\r\nFreeBSD freebsd.vm 15.0-CURRENT FreeBSD 15.0-CURRENT #0 main-n265954-fc9f1d2c6391: Sun Oct 15 18:05:08 CEST 2023     dries@freebsd.vm:/usr/obj/usr/src/amd64.amd64/sys/GENERIC amd64\r\n\r\n[/usr/ports/net-mgmt/netdata-go] git:(main*)$ uname -K\r\n1500001\n```\n\n\n### Netdata build info\n\n```shell\nIrrelevant, this bug is with fetching sources.\n```\n\n\n### Additional info\n\n_No response_",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/16275/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/netdata/netdata/issues/16275/timeline",
                "performed_via_github_app": null,
                "state_reason": "completed"
            },
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782684515",
                "html_url": "https://github.com/netdata/netdata/issues/16275#issuecomment-1782684515",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16275",
                "id": 1782684515,
                "node_id": "IC_kwDOAKPxd85qQZtj",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T10:33:48Z",
                "updated_at": "2023-10-27T10:33:48Z",
                "author_association": "MEMBER",
                "body": "@driesmp https://proxy.golang.org/github.com/netdata/go.d.plugin/@v/v0.56.4.mod",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782684515/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:33:49Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32895784887",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/16280",
                "repository_url": "https://api.github.com/repos/netdata/netdata",
                "labels_url": "https://api.github.com/repos/netdata/netdata/issues/16280/labels{/name}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16280/comments",
                "events_url": "https://api.github.com/repos/netdata/netdata/issues/16280/events",
                "html_url": "https://github.com/netdata/netdata/issues/16280",
                "id": 1963981609,
                "node_id": "I_kwDOAKPxd851D_sp",
                "number": 16280,
                "title": "[Feat]: go.d: add version to go.d.plugin config.tar.gz artifact",
                "user": {
                    "login": "k0ste",
                    "id": 7759548,
                    "node_id": "MDQ6VXNlcjc3NTk1NDg=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/7759548?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/k0ste",
                    "html_url": "https://github.com/k0ste",
                    "followers_url": "https://api.github.com/users/k0ste/followers",
                    "following_url": "https://api.github.com/users/k0ste/following{/other_user}",
                    "gists_url": "https://api.github.com/users/k0ste/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/k0ste/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/k0ste/subscriptions",
                    "organizations_url": "https://api.github.com/users/k0ste/orgs",
                    "repos_url": "https://api.github.com/users/k0ste/repos",
                    "events_url": "https://api.github.com/users/k0ste/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/k0ste/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 1065918744,
                        "node_id": "MDU6TGFiZWwxMDY1OTE4NzQ0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/feature%20request",
                        "name": "feature request",
                        "color": "9beff2",
                        "default": false,
                        "description": "New features"
                    },
                    {
                        "id": 1113199823,
                        "node_id": "MDU6TGFiZWwxMTEzMTk5ODIz",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/needs%20triage",
                        "name": "needs triage",
                        "color": "333333",
                        "default": false,
                        "description": "Issues which need to be manually labelled"
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 1,
                "created_at": "2023-10-26T16:55:54Z",
                "updated_at": "2023-10-27T10:33:09Z",
                "closed_at": "2023-10-26T18:49:08Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### Problem\n\nCurrent naming of `config.tar.gz` file is lack of unique file name\n\n### Description\n\nThe configs artifact provided like: https://github.com/netdata/go.d.plugin/releases/download/v0.56.3/config.tar.gz\n\n### Importance\n\nreally want\n\n### Value proposition\n\nIn some build cases it caused problems with local artifacts cache (in gitlab, for example). Where, between builds, the new version of package may have non-unique file name from previous build\n\n### Proposed implementation\n\nProvide file name with version number, like:\r\n`https://github.com/netdata/go.d.plugin/releases/download/v0.56.3/go.d.plugin-config-v0.56.3.tar.gz` for example",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/16280/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/netdata/netdata/issues/16280/timeline",
                "performed_via_github_app": null,
                "state_reason": "completed"
            },
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782683711",
                "html_url": "https://github.com/netdata/netdata/issues/16280#issuecomment-1782683711",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16280",
                "id": 1782683711,
                "node_id": "IC_kwDOAKPxd85qQZg_",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T10:33:09Z",
                "updated_at": "2023-10-27T10:33:09Z",
                "author_association": "MEMBER",
                "body": "starting from [v0.56.4](https://github.com/netdata/go.d.plugin/releases/tag/v0.56.4) there will be `go.d.plugin-config-{VERSION}.tar.gz`.",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782683711/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:33:09Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32895717760",
        "type": "PullRequestEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "opened",
            "number": 16281,
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16281",
                "id": 1576344836,
                "node_id": "PR_kwDOAKPxd85d9R0E",
                "html_url": "https://github.com/netdata/netdata/pull/16281",
                "diff_url": "https://github.com/netdata/netdata/pull/16281.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16281.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16281",
                "number": 16281,
                "state": "open",
                "locked": false,
                "title": "update go.d version to 0.56.4",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "##### Summary\r\n<!--\r\nDescribe the change in summary section, including rationale and design decisions.\r\nInclude \"Fixes #nnn\" if you are fixing an existing issue.\r\n-->\r\n\r\n##### Test Plan\r\n\r\n<!--\r\nProvide enough detail so that your reviewer can understand which test cases you\r\nhave covered, and recreate them if necessary. If our CI covers sufficient tests, then state which tests cover the change.\r\n-->\r\n\r\n##### Additional Information\r\n<!-- This is usually used to help others understand your\r\nmotivation behind this change. A step-by-step reproduction of the problem is\r\nhelpful if there is no related issue. -->\r\n\r\n<details> <summary>For users: How does this change affect me?</summary>\r\n  <!--\r\nDescribe the PR affects users: \r\n- Which area of Netdata is affected by the change?\r\n- Can they see the change or is it an under the hood? If they can see it, where?\r\n- How is the user impacted by the change? \r\n- What are there any benefits of the change? \r\n-->\r\n</details>\r\n",
                "created_at": "2023-10-27T10:30:21Z",
                "updated_at": "2023-10-27T10:30:22Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": null,
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16281/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16281/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16281/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/080eafb9dd9232ab19369affba1227d715e4ea58",
                "head": {
                    "label": "ilyam8:bump-go.d-v0.56.4",
                    "ref": "bump-go.d-v0.56.4",
                    "sha": "080eafb9dd9232ab19369affba1227d715e4ea58",
                    "user": {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 76925790,
                        "node_id": "MDEwOlJlcG9zaXRvcnk3NjkyNTc5MA==",
                        "name": "netdata",
                        "full_name": "ilyam8/netdata",
                        "private": false,
                        "owner": {
                            "login": "ilyam8",
                            "id": 22274335,
                            "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/ilyam8",
                            "html_url": "https://github.com/ilyam8",
                            "followers_url": "https://api.github.com/users/ilyam8/followers",
                            "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                            "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                            "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                            "repos_url": "https://api.github.com/users/ilyam8/repos",
                            "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/ilyam8/netdata",
                        "description": "Get control of your servers. Simple. Effective. Awesome. https://my-netdata.io/",
                        "fork": true,
                        "url": "https://api.github.com/repos/ilyam8/netdata",
                        "forks_url": "https://api.github.com/repos/ilyam8/netdata/forks",
                        "keys_url": "https://api.github.com/repos/ilyam8/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/ilyam8/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/ilyam8/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/ilyam8/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/ilyam8/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/ilyam8/netdata/events",
                        "assignees_url": "https://api.github.com/repos/ilyam8/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/ilyam8/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/ilyam8/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/ilyam8/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/ilyam8/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/ilyam8/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/ilyam8/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/ilyam8/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/ilyam8/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/ilyam8/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/ilyam8/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/ilyam8/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/ilyam8/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/ilyam8/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/ilyam8/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/ilyam8/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/ilyam8/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/ilyam8/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/ilyam8/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/ilyam8/netdata/merges",
                        "archive_url": "https://api.github.com/repos/ilyam8/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/ilyam8/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/ilyam8/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/ilyam8/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/ilyam8/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/ilyam8/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/ilyam8/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/ilyam8/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/ilyam8/netdata/deployments",
                        "created_at": "2016-12-20T05:23:27Z",
                        "updated_at": "2022-04-24T00:24:30Z",
                        "pushed_at": "2023-10-27T10:30:00Z",
                        "git_url": "git://github.com/ilyam8/netdata.git",
                        "ssh_url": "git@github.com:ilyam8/netdata.git",
                        "clone_url": "https://github.com/ilyam8/netdata.git",
                        "svn_url": "https://github.com/ilyam8/netdata",
                        "homepage": "",
                        "size": 170271,
                        "stargazers_count": 2,
                        "watchers_count": 2,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 2,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T09:15:27Z",
                        "pushed_at": "2023-10-27T10:30:22Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 172079,
                        "stargazers_count": 65638,
                        "watchers_count": 65638,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 367,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 367,
                        "watchers": 65638,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16281"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16281"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16281/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16281/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/080eafb9dd9232ab19369affba1227d715e4ea58"
                    }
                },
                "author_association": "MEMBER",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": false,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": null,
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 1,
                "additions": 18,
                "deletions": 17,
                "changed_files": 2
            }
        },
        "public": true,
        "created_at": "2023-10-27T10:30:23Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32894518336",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 2662304,
            "login": "ktsaou",
            "display_login": "ktsaou",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ktsaou",
            "avatar_url": "https://avatars.githubusercontent.com/u/2662304?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/16268",
                "repository_url": "https://api.github.com/repos/netdata/netdata",
                "labels_url": "https://api.github.com/repos/netdata/netdata/issues/16268/labels{/name}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16268/comments",
                "events_url": "https://api.github.com/repos/netdata/netdata/issues/16268/events",
                "html_url": "https://github.com/netdata/netdata/pull/16268",
                "id": 1960277524,
                "node_id": "PR_kwDOAKPxd85dscKI",
                "number": 16268,
                "title": "ZSTD and GZIP/DEFLATE streaming support",
                "user": {
                    "login": "ktsaou",
                    "id": 2662304,
                    "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ktsaou",
                    "html_url": "https://github.com/ktsaou",
                    "followers_url": "https://api.github.com/users/ktsaou/followers",
                    "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                    "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                    "repos_url": "https://api.github.com/users/ktsaou/repos",
                    "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633851,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzODUx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/database",
                        "name": "area/database",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131634728,
                        "node_id": "MDU6TGFiZWwxMTMxNjM0NzI4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/streaming",
                        "name": "area/streaming",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 4,
                "created_at": "2023-10-25T00:05:43Z",
                "updated_at": "2023-10-27T09:45:07Z",
                "closed_at": null,
                "author_association": "MEMBER",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/netdata/netdata/pulls/16268",
                    "html_url": "https://github.com/netdata/netdata/pull/16268",
                    "diff_url": "https://github.com/netdata/netdata/pull/16268.diff",
                    "patch_url": "https://github.com/netdata/netdata/pull/16268.patch",
                    "merged_at": null
                },
                "body": "This PR adds:\r\n\r\n- [x] ZSTD compression support to streaming \r\n- [x] GZIP/DEFLATE compression support to streaming\r\n- [x] user configurable compression algorithms on parents\r\n- [x] compression level per algorithm on children\r\n- [x] add more error messages to detect disconnect issues\r\n- [x] unittest for all compression algorithms\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/16268/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/netdata/netdata/issues/16268/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782619317",
                "html_url": "https://github.com/netdata/netdata/pull/16268#issuecomment-1782619317",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16268",
                "id": 1782619317,
                "node_id": "IC_kwDOAKPxd85qQJy1",
                "user": {
                    "login": "ktsaou",
                    "id": 2662304,
                    "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ktsaou",
                    "html_url": "https://github.com/ktsaou",
                    "followers_url": "https://api.github.com/users/ktsaou/followers",
                    "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                    "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                    "repos_url": "https://api.github.com/users/ktsaou/repos",
                    "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T09:45:06Z",
                "updated_at": "2023-10-27T09:45:06Z",
                "author_association": "MEMBER",
                "body": "> New parent (`zstd-streaming`) with old version child connected gets frequent disconnections due to\r\n\r\nFixed.",
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/issues/comments/1782619317/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T09:45:07Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32893733176",
        "type": "WatchEvent",
        "actor": {
            "id": 114452,
            "login": "pueding",
            "display_login": "pueding",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pueding",
            "avatar_url": "https://avatars.githubusercontent.com/u/114452?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T09:15:27Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32892464875",
        "type": "DeleteEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "ref": "integrations-regen",
            "ref_type": "branch",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2023-10-27T08:27:14Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32892464057",
        "type": "PushEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "repository_id": 10744183,
            "push_id": 15588682580,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/master",
            "head": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
            "before": "9b8d03fd5f3b79d77655296602ff3ac621ef0360",
            "commits": [
                {
                    "sha": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
                    "author": {
                        "email": "43409846+netdatabot@users.noreply.github.com",
                        "name": "Netdata bot"
                    },
                    "message": "Regenerate integrations.js (#16266)\n\nCo-authored-by: Ancairon <Ancairon@users.noreply.github.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/netdata/netdata/commits/abc8cde5bb9823602bbae6d94d4093f5685e1214"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-27T08:27:12Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32892463824",
        "type": "PullRequestEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "closed",
            "number": 16266,
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16266",
                "id": 1570972096,
                "node_id": "PR_kwDOAKPxd85doyHA",
                "html_url": "https://github.com/netdata/netdata/pull/16266",
                "diff_url": "https://github.com/netdata/netdata/pull/16266.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16266.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16266",
                "number": 16266,
                "state": "closed",
                "locked": false,
                "title": "Regenerate integrations.js",
                "user": {
                    "login": "netdatabot",
                    "id": 43409846,
                    "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                    "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/netdatabot",
                    "html_url": "https://github.com/netdatabot",
                    "followers_url": "https://api.github.com/users/netdatabot/followers",
                    "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                    "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                    "repos_url": "https://api.github.com/users/netdatabot/repos",
                    "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "Regenerate `integrations/integrations.js`, and documentation based on the\nlatest code.\n\nThis PR was auto-generated by\n`.github/workflows/generate-integrations.yml`.",
                "created_at": "2023-10-24T12:52:50Z",
                "updated_at": "2023-10-27T08:27:10Z",
                "closed_at": "2023-10-27T08:27:10Z",
                "merged_at": "2023-10-27T08:27:10Z",
                "merge_commit_sha": "abc8cde5bb9823602bbae6d94d4093f5685e1214",
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 4028282129,
                        "node_id": "LA_kwDOAKPxd87wGrUR",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/cgroups",
                        "name": "collectors/cgroups",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 5809816548,
                        "node_id": "LA_kwDOAKPxd88AAAABWkrD5A",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/metadata",
                        "name": "area/metadata",
                        "color": "9CE10C",
                        "default": false,
                        "description": "Integrations metadata"
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16266/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16266/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16266/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/125dd19575481d34a66709523e7aa60542828d41",
                "head": {
                    "label": "netdata:integrations-regen",
                    "ref": "integrations-regen",
                    "sha": "125dd19575481d34a66709523e7aa60542828d41",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T07:13:59Z",
                        "pushed_at": "2023-10-27T08:27:10Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170590,
                        "stargazers_count": 65637,
                        "watchers_count": 65637,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 366,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 366,
                        "watchers": 65637,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "22e4d1ec3f981b962ef7b336ea2f6c7688fd6cc1",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T07:13:59Z",
                        "pushed_at": "2023-10-27T08:27:10Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170590,
                        "stargazers_count": 65637,
                        "watchers_count": 65637,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 366,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 366,
                        "watchers": 65637,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16266"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16266"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16266"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16266/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16266/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16266/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/125dd19575481d34a66709523e7aa60542828d41"
                    }
                },
                "author_association": "MEMBER",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": true,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": false,
                "commits": 1,
                "additions": 67,
                "deletions": 64,
                "changed_files": 9
            }
        },
        "public": true,
        "created_at": "2023-10-27T08:27:11Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32891519651",
        "type": "PushEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "repository_id": 10744183,
            "push_id": 15588230730,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/master",
            "head": "9b8d03fd5f3b79d77655296602ff3ac621ef0360",
            "before": "4071d1a3ff3c5efe6260f795ff6ea98455698be6",
            "commits": [
                {
                    "sha": "9b8d03fd5f3b79d77655296602ff3ac621ef0360",
                    "author": {
                        "email": "ilya@netdata.cloud",
                        "name": "Ilya Mashchenko"
                    },
                    "message": "update bundled UI to v6.57.0 (#16277)",
                    "distinct": true,
                    "url": "https://api.github.com/repos/netdata/netdata/commits/9b8d03fd5f3b79d77655296602ff3ac621ef0360"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-27T07:49:38Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32891519283",
        "type": "PullRequestEvent",
        "actor": {
            "id": 22274335,
            "login": "ilyam8",
            "display_login": "ilyam8",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilyam8",
            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "closed",
            "number": 16277,
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/16277",
                "id": 1574879550,
                "node_id": "PR_kwDOAKPxd85d3sE-",
                "html_url": "https://github.com/netdata/netdata/pull/16277",
                "diff_url": "https://github.com/netdata/netdata/pull/16277.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/16277.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/16277",
                "number": 16277,
                "state": "closed",
                "locked": false,
                "title": "update bundled UI to v6.57.0",
                "user": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "##### Summary\r\n<!--\r\nDescribe the change in summary section, including rationale and design decisions.\r\nInclude \"Fixes #nnn\" if you are fixing an existing issue.\r\n-->\r\n\r\n##### Test Plan\r\n\r\n<!--\r\nProvide enough detail so that your reviewer can understand which test cases you\r\nhave covered, and recreate them if necessary. If our CI covers sufficient tests, then state which tests cover the change.\r\n-->\r\n\r\n##### Additional Information\r\n<!-- This is usually used to help others understand your\r\nmotivation behind this change. A step-by-step reproduction of the problem is\r\nhelpful if there is no related issue. -->\r\n\r\n<details> <summary>For users: How does this change affect me?</summary>\r\n  <!--\r\nDescribe the PR affects users: \r\n- Which area of Netdata is affected by the change?\r\n- Can they see the change or is it an under the hood? If they can see it, where?\r\n- How is the user impacted by the change? \r\n- What are there any benefits of the change? \r\n-->\r\n</details>\r\n",
                "created_at": "2023-10-26T13:31:56Z",
                "updated_at": "2023-10-27T07:49:36Z",
                "closed_at": "2023-10-27T07:49:36Z",
                "merged_at": "2023-10-27T07:49:36Z",
                "merge_commit_sha": "9b8d03fd5f3b79d77655296602ff3ac621ef0360",
                "assignee": null,
                "assignees": [],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/16277/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/16277/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/16277/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/f881f05ab8857b990ee48225a5fa7c0ebe18fd95",
                "head": {
                    "label": "ilyam8:ui-v6.57.0",
                    "ref": "ui-v6.57.0",
                    "sha": "f881f05ab8857b990ee48225a5fa7c0ebe18fd95",
                    "user": {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 76925790,
                        "node_id": "MDEwOlJlcG9zaXRvcnk3NjkyNTc5MA==",
                        "name": "netdata",
                        "full_name": "ilyam8/netdata",
                        "private": false,
                        "owner": {
                            "login": "ilyam8",
                            "id": 22274335,
                            "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                            "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/ilyam8",
                            "html_url": "https://github.com/ilyam8",
                            "followers_url": "https://api.github.com/users/ilyam8/followers",
                            "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                            "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                            "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                            "repos_url": "https://api.github.com/users/ilyam8/repos",
                            "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/ilyam8/netdata",
                        "description": "Get control of your servers. Simple. Effective. Awesome. https://my-netdata.io/",
                        "fork": true,
                        "url": "https://api.github.com/repos/ilyam8/netdata",
                        "forks_url": "https://api.github.com/repos/ilyam8/netdata/forks",
                        "keys_url": "https://api.github.com/repos/ilyam8/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/ilyam8/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/ilyam8/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/ilyam8/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/ilyam8/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/ilyam8/netdata/events",
                        "assignees_url": "https://api.github.com/repos/ilyam8/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/ilyam8/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/ilyam8/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/ilyam8/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/ilyam8/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/ilyam8/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/ilyam8/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/ilyam8/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/ilyam8/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/ilyam8/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/ilyam8/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/ilyam8/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/ilyam8/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/ilyam8/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/ilyam8/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/ilyam8/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/ilyam8/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/ilyam8/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/ilyam8/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/ilyam8/netdata/merges",
                        "archive_url": "https://api.github.com/repos/ilyam8/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/ilyam8/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/ilyam8/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/ilyam8/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/ilyam8/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/ilyam8/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/ilyam8/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/ilyam8/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/ilyam8/netdata/deployments",
                        "created_at": "2016-12-20T05:23:27Z",
                        "updated_at": "2022-04-24T00:24:30Z",
                        "pushed_at": "2023-10-26T13:31:05Z",
                        "git_url": "git://github.com/ilyam8/netdata.git",
                        "ssh_url": "git@github.com:ilyam8/netdata.git",
                        "clone_url": "https://github.com/ilyam8/netdata.git",
                        "svn_url": "https://github.com/ilyam8/netdata",
                        "homepage": "",
                        "size": 172276,
                        "stargazers_count": 2,
                        "watchers_count": 2,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 2,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "3ada7686b52e09151538aad1a55d08fa2d864ff0",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T07:13:59Z",
                        "pushed_at": "2023-10-27T07:49:35Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170590,
                        "stargazers_count": 65637,
                        "watchers_count": 65637,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5711,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 367,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5711,
                        "open_issues": 367,
                        "watchers": 65637,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16277"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/16277"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16277"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/16277/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16277/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/16277/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/f881f05ab8857b990ee48225a5fa7c0ebe18fd95"
                    }
                },
                "author_association": "MEMBER",
                "auto_merge": null,
                "active_lock_reason": null,
                "merged": true,
                "mergeable": null,
                "rebaseable": null,
                "mergeable_state": "unknown",
                "merged_by": {
                    "login": "ilyam8",
                    "id": 22274335,
                    "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/ilyam8",
                    "html_url": "https://github.com/ilyam8",
                    "followers_url": "https://api.github.com/users/ilyam8/followers",
                    "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                    "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                    "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                    "repos_url": "https://api.github.com/users/ilyam8/repos",
                    "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "comments": 0,
                "review_comments": 0,
                "maintainer_can_modify": false,
                "commits": 1,
                "additions": 645,
                "deletions": 887,
                "changed_files": 131
            }
        },
        "public": true,
        "created_at": "2023-10-27T07:49:37Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32890408064",
        "type": "ForkEvent",
        "actor": {
            "id": 35248978,
            "login": "fumihiko1124",
            "display_login": "fumihiko1124",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fumihiko1124",
            "avatar_url": "https://avatars.githubusercontent.com/u/35248978?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "forkee": {
                "id": 710660020,
                "node_id": "R_kgDOKlvPtA",
                "name": "netdata",
                "full_name": "fumihiko1124/netdata",
                "private": false,
                "owner": {
                    "login": "fumihiko1124",
                    "id": 35248978,
                    "node_id": "MDQ6VXNlcjM1MjQ4OTc4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/35248978?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/fumihiko1124",
                    "html_url": "https://github.com/fumihiko1124",
                    "followers_url": "https://api.github.com/users/fumihiko1124/followers",
                    "following_url": "https://api.github.com/users/fumihiko1124/following{/other_user}",
                    "gists_url": "https://api.github.com/users/fumihiko1124/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/fumihiko1124/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/fumihiko1124/subscriptions",
                    "organizations_url": "https://api.github.com/users/fumihiko1124/orgs",
                    "repos_url": "https://api.github.com/users/fumihiko1124/repos",
                    "events_url": "https://api.github.com/users/fumihiko1124/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/fumihiko1124/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "html_url": "https://github.com/fumihiko1124/netdata",
                "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                "fork": true,
                "url": "https://api.github.com/repos/fumihiko1124/netdata",
                "forks_url": "https://api.github.com/repos/fumihiko1124/netdata/forks",
                "keys_url": "https://api.github.com/repos/fumihiko1124/netdata/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/fumihiko1124/netdata/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/fumihiko1124/netdata/teams",
                "hooks_url": "https://api.github.com/repos/fumihiko1124/netdata/hooks",
                "issue_events_url": "https://api.github.com/repos/fumihiko1124/netdata/issues/events{/number}",
                "events_url": "https://api.github.com/repos/fumihiko1124/netdata/events",
                "assignees_url": "https://api.github.com/repos/fumihiko1124/netdata/assignees{/user}",
                "branches_url": "https://api.github.com/repos/fumihiko1124/netdata/branches{/branch}",
                "tags_url": "https://api.github.com/repos/fumihiko1124/netdata/tags",
                "blobs_url": "https://api.github.com/repos/fumihiko1124/netdata/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/fumihiko1124/netdata/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/fumihiko1124/netdata/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/fumihiko1124/netdata/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/fumihiko1124/netdata/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/fumihiko1124/netdata/languages",
                "stargazers_url": "https://api.github.com/repos/fumihiko1124/netdata/stargazers",
                "contributors_url": "https://api.github.com/repos/fumihiko1124/netdata/contributors",
                "subscribers_url": "https://api.github.com/repos/fumihiko1124/netdata/subscribers",
                "subscription_url": "https://api.github.com/repos/fumihiko1124/netdata/subscription",
                "commits_url": "https://api.github.com/repos/fumihiko1124/netdata/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/fumihiko1124/netdata/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/fumihiko1124/netdata/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/fumihiko1124/netdata/issues/comments{/number}",
                "contents_url": "https://api.github.com/repos/fumihiko1124/netdata/contents/{+path}",
                "compare_url": "https://api.github.com/repos/fumihiko1124/netdata/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/fumihiko1124/netdata/merges",
                "archive_url": "https://api.github.com/repos/fumihiko1124/netdata/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/fumihiko1124/netdata/downloads",
                "issues_url": "https://api.github.com/repos/fumihiko1124/netdata/issues{/number}",
                "pulls_url": "https://api.github.com/repos/fumihiko1124/netdata/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/fumihiko1124/netdata/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/fumihiko1124/netdata/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/fumihiko1124/netdata/labels{/name}",
                "releases_url": "https://api.github.com/repos/fumihiko1124/netdata/releases{/id}",
                "deployments_url": "https://api.github.com/repos/fumihiko1124/netdata/deployments",
                "created_at": "2023-10-27T07:01:20Z",
                "updated_at": "2023-10-27T07:01:20Z",
                "pushed_at": "2023-10-27T03:30:56Z",
                "git_url": "git://github.com/fumihiko1124/netdata.git",
                "ssh_url": "git@github.com:fumihiko1124/netdata.git",
                "clone_url": "https://github.com/fumihiko1124/netdata.git",
                "svn_url": "https://github.com/fumihiko1124/netdata",
                "homepage": "https://www.netdata.cloud",
                "size": 170590,
                "stargazers_count": 0,
                "watchers_count": 0,
                "language": null,
                "has_issues": false,
                "has_projects": true,
                "has_downloads": true,
                "has_wiki": false,
                "has_pages": false,
                "has_discussions": false,
                "forks_count": 0,
                "mirror_url": null,
                "archived": false,
                "disabled": false,
                "open_issues_count": 0,
                "license": null,
                "allow_forking": true,
                "is_template": false,
                "web_commit_signoff_required": false,
                "topics": [],
                "visibility": "public",
                "forks": 0,
                "open_issues": 0,
                "watchers": 0,
                "default_branch": "main",
                "public": true
            }
        },
        "public": true,
        "created_at": "2023-10-27T07:01:21Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32888396645",
        "type": "WatchEvent",
        "actor": {
            "id": 13492397,
            "login": "damondd",
            "display_login": "damondd",
            "gravatar_id": "",
            "url": "https://api.github.com/users/damondd",
            "avatar_url": "https://avatars.githubusercontent.com/u/13492397?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T05:03:11Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32888357279",
        "type": "WatchEvent",
        "actor": {
            "id": 57127216,
            "login": "jiypa",
            "display_login": "jiypa",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jiypa",
            "avatar_url": "https://avatars.githubusercontent.com/u/57127216?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T05:00:22Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887216951",
        "type": "PullRequestReviewCommentEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374034177",
                "pull_request_review_id": 1700944000,
                "id": 1374034177,
                "node_id": "PRRC_kwDOAKPxd85R5hkB",
                "diff_hunk": "@@ -0,0 +1,1367 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n+\n+/** @file   logsmanag_config.c\n+ *  @brief  This file includes functions to manage \n+ *          the logs management configuration.\n+ */\n+\n+#include \"logsmanag_config.h\"\n+#include \"db_api.h\"\n+#include \"rrd_api/rrd_api.h\"\n+#include \"helper.h\"\n+\n+g_logs_manag_config_t g_logs_manag_config = {\n+    .update_every = UPDATE_EVERY,\n+    .update_timeout = UPDATE_TIMEOUT_DEFAULT,\n+    .use_log_timestamp = CONFIG_BOOLEAN_AUTO,\n+    .circ_buff_max_size_in_mib = CIRCULAR_BUFF_DEFAULT_MAX_SIZE / (1 MiB),\n+    .circ_buff_drop_logs = CIRCULAR_BUFF_DEFAULT_DROP_LOGS,\n+    .compression_acceleration = COMPRESSION_ACCELERATION_DEFAULT,\n+    .db_mode = GLOBAL_DB_MODE_DEFAULT,\n+    .disk_space_limit_in_mib = DISK_SPACE_LIMIT_DEFAULT,  \n+    .buff_flush_to_db_interval = SAVE_BLOB_TO_DB_DEFAULT,\n+    .enable_collected_logs_total = ENABLE_COLLECTED_LOGS_TOTAL_DEFAULT,\n+    .enable_collected_logs_rate = ENABLE_COLLECTED_LOGS_RATE_DEFAULT\n+};\n+\n+static logs_manag_db_mode_t db_mode_str_to_db_mode(const char *const db_mode_str){\n+    if(!db_mode_str || !*db_mode_str) return g_logs_manag_config.db_mode;\n+    else if(!strcasecmp(db_mode_str, \"full\")) return LOGS_MANAG_DB_MODE_FULL;\n+    else if(!strcasecmp(db_mode_str, \"none\")) return LOGS_MANAG_DB_MODE_NONE;\n+    else return g_logs_manag_config.db_mode;\n+}\n+\n+static struct config log_management_config = {\n+    .first_section = NULL,\n+    .last_section = NULL,\n+    .mutex = NETDATA_MUTEX_INITIALIZER,\n+    .index = {\n+            .avl_tree = {\n+                    .root = NULL,\n+                    .compar = appconfig_section_compare\n+            },\n+            .rwlock = AVL_LOCK_INITIALIZER\n+    }\n+};\n+\n+static struct Chart_meta chart_types[] = {\n+    {.type = FLB_TAIL,      .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_WEB_LOG,   .init = web_log_chart_init,   .update = web_log_chart_update},\n+    {.type = FLB_KMSG,      .init = kernel_chart_init,    .update = kernel_chart_update},\n+    {.type = FLB_SYSTEMD,   .init = systemd_chart_init,   .update = systemd_chart_update},\n+    {.type = FLB_DOCKER_EV, .init = docker_ev_chart_init, .update = docker_ev_chart_update},\n+    {.type = FLB_SYSLOG,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_SERIAL,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_MQTT,      .init = mqtt_chart_init,      .update = mqtt_chart_update}\n+};\n+\n+char *get_user_config_dir(void){\n+    char *dir = getenv(\"NETDATA_USER_CONFIG_DIR\");\n+\n+    return dir ? dir : CONFIG_DIR;\n+}\n+\n+char *get_stock_config_dir(void){\n+    char *dir = getenv(\"NETDATA_STOCK_CONFIG_DIR\");\n+\n+    return dir ? dir : LIBCONFIG_DIR;\n+}\n+\n+char *get_log_dir(void){\n+    char *dir = getenv(\"NETDATA_LOG_DIR\");\n+\n+    return dir ? dir : LOG_DIR;\n+}\n+\n+char *get_cache_dir(void){\n+    char *dir = getenv(\"NETDATA_CACHE_DIR\");\n+\n+    return dir ? dir : CACHE_DIR;\n+}\n+\n+/** \n+ * @brief Cleanup p_file_info struct\n+ * @param p_file_info The struct of File_info type to be cleaned up.\n+ * @todo  Pass p_file_info by reference, so that it can be set to NULL. */\n+static void p_file_info_destroy(struct File_info *p_file_info){\n+\n+    // TODO: Clean up rrd / chart stuff.\n+\n+    if(unlikely(!p_file_info)){\n+        collector_info(\"p_file_info_destroy() called but p_file_info == NULL - already destroyed?\");\n+        return;\n+    }\n+\n+    char chartname[100];\n+    snprintfz(chartname, 100, \"%s\", p_file_info->chartname ? p_file_info->chartname : \"Unknown\");\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup...\", chartname);\n+\n+    __atomic_store_n(&p_file_info->state, LOG_SRC_EXITING, __ATOMIC_RELAXED);\n+\n+    if(uv_is_active((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer)){\n+        uv_timer_stop(&p_file_info->flb_tmp_buff_cpy_timer);\n+        if (!uv_is_closing((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer))\n+            uv_close((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer, NULL);\n+    }\n+\n+    // TODO: Need to do proper termination of DB threads and allocated memory.\n+    if(p_file_info->db_writer_thread){\n+        uv_thread_join(p_file_info->db_writer_thread);\n+        sqlite3_close(p_file_info->db);\n+        uv_mutex_destroy(p_file_info->db_mut);\n+        freez((void *) p_file_info->db_metadata);\n+        freez((void *) p_file_info->db_dir);\n+        freez(p_file_info->db_writer_thread);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_asc);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_desc);\n+    }\n+\n+    freez((void *) p_file_info->chartname);\n+    freez(p_file_info->filename);\n+    freez((void *) p_file_info->file_basename);\n+    freez((void *) p_file_info->stream_guid);\n+\n+    for(int i = 1; i <= BLOB_MAX_FILES; i++){\n+        if(p_file_info->blob_handles[i]){\n+            uv_fs_close(NULL, NULL, p_file_info->blob_handles[i], NULL);\n+            p_file_info->blob_handles[i] = 0;\n+        }\n+    }\n+\n+    if(p_file_info->circ_buff) \n+        circ_buff_destroy(p_file_info->circ_buff);\n+    \n+    if(p_file_info->parser_metrics){\n+        switch(p_file_info->log_type){\n+            case FLB_WEB_LOG: {\n+                if(p_file_info->parser_metrics->web_log)\n+                    freez(p_file_info->parser_metrics->web_log);\n+                break;\n+            }\n+            case FLB_KMSG: {\n+                if(p_file_info->parser_metrics->kernel){\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->subsystem);\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->device);\n+                    freez(p_file_info->parser_metrics->kernel);\n+                }\n+                break;\n+            }\n+            case FLB_SYSTEMD: \n+            case FLB_SYSLOG: {\n+                if(p_file_info->parser_metrics->systemd)\n+                    freez(p_file_info->parser_metrics->systemd);\n+                break;\n+            }\n+            case FLB_DOCKER_EV: {\n+                if(p_file_info->parser_metrics->docker_ev)\n+                    freez(p_file_info->parser_metrics->docker_ev);\n+                break;\n+            }\n+            case FLB_MQTT: {\n+                if(p_file_info->parser_metrics->mqtt){\n+                    dictionary_destroy(p_file_info->parser_metrics->mqtt->topic);\n+                    freez(p_file_info->parser_metrics->mqtt);\n+                }\n+                break;\n+            }\n+            default:\n+                break;\n+        }   \n+\n+        for(int i = 0; p_file_info->parser_cus_config && \n+                       p_file_info->parser_metrics->parser_cus && \n+                       p_file_info->parser_cus_config[i]; i++){\n+            freez(p_file_info->parser_cus_config[i]->chartname);\n+            freez(p_file_info->parser_cus_config[i]->regex_str);\n+            freez(p_file_info->parser_cus_config[i]->regex_name);\n+            regfree(&p_file_info->parser_cus_config[i]->regex);\n+            freez(p_file_info->parser_cus_config[i]);\n+            freez(p_file_info->parser_metrics->parser_cus[i]);\n+        }    \n+\n+        freez(p_file_info->parser_cus_config);\n+        freez(p_file_info->parser_metrics->parser_cus);\n+\n+        freez(p_file_info->parser_metrics);\n+    }\n+\n+    if(p_file_info->parser_config){\n+        freez(p_file_info->parser_config->gen_config);\n+        freez(p_file_info->parser_config);\n+    }\n+\n+    Flb_output_config_t *output_next = p_file_info->flb_outputs;\n+    while(output_next){\n+        Flb_output_config_t *output = output_next;\n+        output_next = output_next->next;\n+\n+        struct flb_output_config_param *param_next = output->param;\n+        while(param_next){\n+            struct flb_output_config_param *param = param_next;\n+            param_next = param->next;\n+            freez(param->key);\n+            freez(param->val);\n+            freez(param);\n+        }\n+        freez(output->plugin);\n+        freez(output);\n+    }\n+    \n+    freez(p_file_info);\n+\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup done\", chartname);\n+}\n+\n+void p_file_info_destroy_all(void){\n+    if(p_file_infos_arr){\n+        for(int i = 0; i < p_file_infos_arr->count; i++) \n+            p_file_info_destroy(p_file_infos_arr->data[i]);\n+        freez(p_file_infos_arr);\n+        p_file_infos_arr = NULL;\n+    }\n+}\n+\n+/**\n+ * @brief Load logs management configuration.\n+ * @returns  0 if success, \n+ *          -1 if disabled in global config, \n+ *          -2 if config file not found\n+ *          -3 if p_flb_srvc_config if is NULL (no flb_srvc_config_t provided)\n+ */\n+int logs_manag_config_load( flb_srvc_config_t *p_flb_srvc_config, \n+                            Flb_socket_config_t **forward_in_config_p,\n+                            int g_update_every){\n+    int rc = LOGS_MANAG_CONFIG_LOAD_ERROR_OK;\n+    char section[100];\n+    char temp_path[FILENAME_MAX + 1];\n+\n+    struct config logsmanagement_d_conf = {\n+        .first_section = NULL,\n+        .last_section = NULL,\n+        .mutex = NETDATA_MUTEX_INITIALIZER,\n+        .index = {\n+                .avl_tree = {\n+                        .root = NULL,\n+                        .compar = appconfig_section_compare\n+                },\n+                .rwlock = AVL_LOCK_INITIALIZER\n+        }\n+    };\n+\n+    char *filename = strdupz_path_subpath(get_user_config_dir(), \"logsmanagement.d.conf\");\n+    if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)) {\n+        collector_info(\"CONFIG: cannot load user config '%s'. Will try stock config.\", filename);\n+        freez(filename);\n+\n+        filename = strdupz_path_subpath(get_stock_config_dir(), \"logsmanagement.d.conf\");\n+        if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)){\n+            collector_error(\"CONFIG: cannot load stock config '%s'. Logs management will be disabled.\", filename);\n+            rc = LOGS_MANAG_CONFIG_LOAD_ERROR_NO_STOCK_CONFIG;\n+        }\n+    }\n+    freez(filename);\n+    \n+\n+    /* [global] section */\n+\n+    snprintfz(section, 100, \"global\");\n+\n+    if(!appconfig_get_boolean(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"enabled\", \n+            ENABLE_LOGS_MANAGEMENT_DEFAULT)){\n+        collector_info(\"CONFIG: Logs management disabled due to configuration option.\");\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_DISABLED;\n+    }\n+\n+    g_logs_manag_config.update_every = appconfig_get_number(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"update every\", \n+        g_logs_manag_config.update_every);\n+    \n+    g_logs_manag_config.update_every = \n+        g_update_every && g_update_every > g_logs_manag_config.update_every ? \n+        g_update_every : g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.update_timeout = appconfig_get_number(  \n+        &logsmanagement_d_conf, \n+        section, \n+        \"update timeout\", \n+        UPDATE_TIMEOUT_DEFAULT);\n+\n+    if(g_logs_manag_config.update_timeout < g_logs_manag_config.update_every) \n+        g_logs_manag_config.update_timeout = g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.use_log_timestamp = appconfig_get_boolean_ondemand( \n+        &logsmanagement_d_conf,\n+        section,\n+        \"use log timestamp\", \n+        g_logs_manag_config.use_log_timestamp);\n+    \n+    g_logs_manag_config.circ_buff_max_size_in_mib = appconfig_get_number(   \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer max size MiB\", \n+        g_logs_manag_config.circ_buff_max_size_in_mib);\n+    \n+    g_logs_manag_config.circ_buff_drop_logs = appconfig_get_boolean(    \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer drop logs if full\", \n+        g_logs_manag_config.circ_buff_drop_logs);\n+    \n+\n+    g_logs_manag_config.compression_acceleration = appconfig_get_number(    \n+        &logsmanagement_d_conf,\n+        section,\n+        \"compression acceleration\", \n+        g_logs_manag_config.compression_acceleration);\n+\n+    g_logs_manag_config.enable_collected_logs_total = appconfig_get_boolean(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"collected logs total chart enable\", \n+        g_logs_manag_config.enable_collected_logs_total);\n+\n+    g_logs_manag_config.enable_collected_logs_rate = appconfig_get_boolean(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"collected logs rate chart enable\", \n+        g_logs_manag_config.enable_collected_logs_rate);\n+    \n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] update every: %d\",                       section,  g_logs_manag_config.update_every);\n+        collector_info(\"CONFIG: [%s] update timeout: %d\",                     section,  g_logs_manag_config.update_timeout);\n+        collector_info(\"CONFIG: [%s] use log timestamp: %d\",                  section,  g_logs_manag_config.use_log_timestamp);\n+        collector_info(\"CONFIG: [%s] circular buffer max size MiB: %d\",       section,  g_logs_manag_config.circ_buff_max_size_in_mib);\n+        collector_info(\"CONFIG: [%s] circular buffer drop logs if full: %d\",  section,  g_logs_manag_config.circ_buff_drop_logs);\n+        collector_info(\"CONFIG: [%s] compression acceleration: %d\",           section,  g_logs_manag_config.compression_acceleration);\n+        collector_info(\"CONFIG: [%s] collected logs total chart enable: %d\",  section,  g_logs_manag_config.enable_collected_logs_total);\n+        collector_info(\"CONFIG: [%s] collected logs rate chart enable: %d\",   section,  g_logs_manag_config.enable_collected_logs_rate);\n+    }\n+\n+\n+    /* [db] section */\n+\n+    snprintfz(section, 100, \"db\");\n+\n+    const char *const db_mode_str = appconfig_get(\n+        &logsmanagement_d_conf,\n+        section,\n+        \"db mode\",\n+        GLOBAL_DB_MODE_DEFAULT_STR);\n+    g_logs_manag_config.db_mode = db_mode_str_to_db_mode(db_mode_str);\n+\n+    snprintfz(temp_path, FILENAME_MAX, \"%s\" LOGS_MANAG_DB_SUBPATH, get_cache_dir());\n+    db_set_main_dir(appconfig_get(&logsmanagement_d_conf, section, \"db dir\", temp_path));\n+\n+    g_logs_manag_config.buff_flush_to_db_interval = appconfig_get_number(  \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer flush to db\", \n+        g_logs_manag_config.buff_flush_to_db_interval);\n+    \n+    g_logs_manag_config.disk_space_limit_in_mib = appconfig_get_number(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"disk space limit MiB\", \n+        g_logs_manag_config.disk_space_limit_in_mib);\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] db mode: %s [%d]\",                 section, db_mode_str, (int) g_logs_manag_config.db_mode);\n+        collector_info(\"CONFIG: [%s] db dir: %s\",                       section, temp_path);\n+        collector_info(\"CONFIG: [%s] circular buffer flush to db: %d\",  section, g_logs_manag_config.buff_flush_to_db_interval);\n+        collector_info(\"CONFIG: [%s] disk space limit MiB: %d\",         section, g_logs_manag_config.disk_space_limit_in_mib);\n+    }\n+\n+\n+    /* [forward input] section */\n+\n+    snprintfz(section, 100, \"forward input\");\n+\n+    const int fwd_enable = appconfig_get_boolean(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"enabled\", \n+        CONFIG_BOOLEAN_NO);\n+    \n+    *forward_in_config_p = (Flb_socket_config_t *) callocz(1, sizeof(Flb_socket_config_t));\n+\n+    (*forward_in_config_p)->unix_path = appconfig_get(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"unix path\", \n+        FLB_FORWARD_UNIX_PATH_DEFAULT);\n+    \n+    (*forward_in_config_p)->unix_perm = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"unix perm\", \n+        FLB_FORWARD_UNIX_PERM_DEFAULT);\n+    \n+    // TODO: Check if listen is in valid format\n+    (*forward_in_config_p)->listen = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"listen\", \n+        FLB_FORWARD_ADDR_DEFAULT);\n+    \n+    (*forward_in_config_p)->port = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"port\", \n+        FLB_FORWARD_PORT_DEFAULT);\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] enabled: %s\",      section, fwd_enable ? \"yes\" : \"no\");\n+        collector_info(\"CONFIG: [%s] unix path: %s\",    section, (*forward_in_config_p)->unix_path);\n+        collector_info(\"CONFIG: [%s] unix perm: %s\",    section, (*forward_in_config_p)->unix_perm);\n+        collector_info(\"CONFIG: [%s] listen: %s\",       section, (*forward_in_config_p)->listen);\n+        collector_info(\"CONFIG: [%s] port: %s\",         section, (*forward_in_config_p)->port);\n+    }\n+\n+    if(!fwd_enable) {\n+        freez(*forward_in_config_p);\n+        *forward_in_config_p = NULL;\n+    }\n+\n+\n+    /* [fluent bit] section */\n+\n+    snprintfz(section, 100, \"fluent bit\");\n+\n+    snprintfz(temp_path, FILENAME_MAX, \"%s/%s\", get_log_dir(), FLB_LOG_FILENAME_DEFAULT);\n+    \n+    if(p_flb_srvc_config){\n+        p_flb_srvc_config->flush = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"flush\", \n+            p_flb_srvc_config->flush);\n+        \n+        p_flb_srvc_config->http_listen = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http listen\", \n+            p_flb_srvc_config->http_listen);\n+\n+        p_flb_srvc_config->http_port = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http port\", \n+            p_flb_srvc_config->http_port);\n+        \n+        p_flb_srvc_config->http_server = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http server\", \n+            p_flb_srvc_config->http_server);\n+        \n+        p_flb_srvc_config->log_path = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"log file\", \n+            temp_path);\n+        \n+        p_flb_srvc_config->log_level = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"log level\", \n+            p_flb_srvc_config->log_level);\n+        \n+        p_flb_srvc_config->coro_stack_size = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"coro stack size\", \n+            p_flb_srvc_config->coro_stack_size);\n+    }\n+    else\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_P_FLB_SRVC_NULL;\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] flush: %s\", section, p_flb_srvc_config->flush);\n+        collector_info(\"CONFIG: [%s] http listen: %s\", section, p_flb_srvc_config->http_listen);\n+        collector_info(\"CONFIG: [%s] http port: %s\", section, p_flb_srvc_config->http_port);\n+        collector_info(\"CONFIG: [%s] http server: %s\", section, p_flb_srvc_config->http_server);\n+        collector_info(\"CONFIG: [%s] log file: %s\", section, p_flb_srvc_config->log_path);\n+        collector_info(\"CONFIG: [%s] log level: %s\", section, p_flb_srvc_config->log_level);\n+        collector_info(\"CONFIG: [%s] coro stack size: %s\", section, p_flb_srvc_config->coro_stack_size);\n+    }\n+\n+    return rc;\n+}\n+\n+static bool metrics_dict_conflict_cb(const DICTIONARY_ITEM *item __maybe_unused, void *old_value, void *new_value, void *data __maybe_unused){\n+    ((metrics_dict_item_t *)old_value)->num_new += ((metrics_dict_item_t *)new_value)->num_new;\n+    return true;\n+}\n+\n+#define FLB_OUTPUT_PLUGIN_NAME_KEY \"name\"\n+\n+static int flb_output_param_get_cb(void *entry, void *data){\n+    struct config_option *option = (struct config_option *) entry;\n+    Flb_output_config_t *flb_output = (Flb_output_config_t *) data;\n+    \n+    char *param_prefix = callocz(1, snprintf(NULL, 0, \"output %d\", MAX_OUTPUTS_PER_SOURCE) + 1);\n+    sprintf(param_prefix, \"output %d\", flb_output->id);\n+    size_t param_prefix_len = strlen(param_prefix);\n+    \n+    if(!strncasecmp(option->name, param_prefix, param_prefix_len)){ // param->name looks like \"output 1 host\"\n+        char *param_key = &option->name[param_prefix_len]; // param_key should look like \" host\"\n+        while(*param_key == ' ') param_key++; // remove whitespace so it looks like \"host\"\n+        \n+        if(*param_key && strcasecmp(param_key, FLB_OUTPUT_PLUGIN_NAME_KEY)){ // ignore param_key \"name\" \n+            // debug_log( \"config_option: name[%s], value[%s]\", option->name, option->value);\n+            // debug_log( \"config option kv:[%s][%s]\", param_key, option->value);\n+\n+            struct flb_output_config_param **p = &flb_output->param;\n+            while((*p) != NULL) p = &((*p)->next); // Go to last param of linked list\n+\n+            (*p) = callocz(1, sizeof(struct flb_output_config_param));\n+            (*p)->key = strdupz(param_key);\n+            (*p)->val = strdupz(option->value);\n+        }\n+    }\n+\n+    freez(param_prefix);\n+\n+    return 0;\n+}\n+\n+/**\n+ * @brief Initialize logs management based on a section configuration.\n+ * @note On error, calls p_file_info_destroy() to clean up before returning. \n+ * @param config_section Section to read configuration from.\n+ * @todo How to handle duplicate entries?\n+ */\n+static void config_section_init(uv_loop_t *main_loop,\n+                                struct section *config_section, \n+                                Flb_socket_config_t *forward_in_config,\n+                                flb_srvc_config_t *p_flb_srvc_config,\n+                                netdata_mutex_t *stdout_mut){\n+\n+    struct File_info *p_file_info = callocz(1, sizeof(struct File_info));\n+\n+    /* -------------------------------------------------------------------------\n+     * Check if config_section->name is valid and if so, use it as chartname.\n+     * ------------------------------------------------------------------------- */\n+    if(config_section->name && *config_section->name){\n+        p_file_info->chartname = strdupz(config_section->name);\n+        netdata_fix_chart_id((char *) p_file_info->chartname);\n+        collector_info(\"[%s]: Initializing config loading\", p_file_info->chartname);\n+    } else {\n+        collector_error(\"Invalid logs management config section.\");\n+        return p_file_info_destroy(p_file_info);\n+    }\n+    \n+\n+    /* -------------------------------------------------------------------------\n+     * Check if this log source is enabled.\n+     * ------------------------------------------------------------------------- */\n+    if(appconfig_get_boolean(&log_management_config, config_section->name, \"enabled\", CONFIG_BOOLEAN_NO)){\n+        collector_info(\"[%s]: enabled = yes\", p_file_info->chartname);\n+    } else {\n+        collector_info(\"[%s]: enabled = no\", p_file_info->chartname);\n+        return p_file_info_destroy(p_file_info);\n+    }\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Check log type.\n+     * ------------------------------------------------------------------------- */\n+    char *type = appconfig_get(&log_management_config, config_section->name, \"log type\", \"flb_tail\");\n+    if(!type || !*type) p_file_info->log_type = FLB_TAIL; // Default\n+    else{\n+        if(!strcasecmp(type, \"flb_tail\")) p_file_info->log_type = FLB_TAIL;\n+        else if (!strcasecmp(type, \"flb_web_log\")) p_file_info->log_type = FLB_WEB_LOG;\n+        else if (!strcasecmp(type, \"flb_kmsg\")) p_file_info->log_type = FLB_KMSG;\n+        else if (!strcasecmp(type, \"flb_systemd\")) p_file_info->log_type = FLB_SYSTEMD;\n+        else if (!strcasecmp(type, \"flb_docker_events\")) p_file_info->log_type = FLB_DOCKER_EV;\n+        else if (!strcasecmp(type, \"flb_syslog\")) p_file_info->log_type = FLB_SYSLOG;\n+        else if (!strcasecmp(type, \"flb_serial\")) p_file_info->log_type = FLB_SERIAL;\n+        else if (!strcasecmp(type, \"flb_mqtt\")) p_file_info->log_type = FLB_MQTT;\n+        else p_file_info->log_type = FLB_TAIL;\n+    }\n+    freez(type);\n+    collector_info(\"[%s]: log type = %s\", p_file_info->chartname, log_src_type_t_str[p_file_info->log_type]);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read log source.\n+     * ------------------------------------------------------------------------- */\n+    char *source = appconfig_get(&log_management_config, config_section->name, \"log source\", \"local\");\n+    if(!source || !*source) p_file_info->log_source = LOG_SOURCE_LOCAL; // Default\n+    else if(!strcasecmp(source, \"forward\")) p_file_info->log_source = LOG_SOURCE_FORWARD;\n+    else p_file_info->log_source = LOG_SOURCE_LOCAL;\n+    freez(source);\n+    collector_info(\"[%s]: log source = %s\", p_file_info->chartname, log_src_t_str[p_file_info->log_source]);\n+\n+    if(p_file_info->log_source == LOG_SOURCE_FORWARD && !forward_in_config){\n+        collector_info(\"[%s]: forward_in_config == NULL - this log source will be disabled\", p_file_info->chartname);\n+        return p_file_info_destroy(p_file_info);\n+    }\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read stream uuid.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->stream_guid = appconfig_get(&log_management_config, config_section->name, \"stream guid\", \"\");\n+    collector_info(\"[%s]: stream guid = %s\", p_file_info->chartname, p_file_info->stream_guid);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read log path configuration and check if it is valid.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->filename = appconfig_get(&log_management_config, config_section->name, \"log path\", LOG_PATH_AUTO);\n+    if( /* path doesn't matter when log source is not local */\n+        (p_file_info->log_source == LOG_SOURCE_LOCAL) &&\n+        \n+        /* FLB_SYSLOG is special case, may or may not require a path */\n+        (p_file_info->log_type != FLB_SYSLOG) &&\n+\n+        /* FLB_MQTT is special case, does not require a path */\n+        (p_file_info->log_type != FLB_MQTT) &&\n+        \n+        (!p_file_info->filename /* Sanity check */ || \n+         !*p_file_info->filename || \n+         !strcmp(p_file_info->filename, LOG_PATH_AUTO) || \n+         access(p_file_info->filename, R_OK)\n+        )){ \n+\n+        freez(p_file_info->filename);\n+        p_file_info->filename = NULL;\n+            \n+        switch(p_file_info->log_type){\n+            case FLB_TAIL:\n+                if(!strcasecmp(p_file_info->chartname, \"Netdata_error.log\")){\n+                    char path[FILENAME_MAX + 1];\n+                    snprintfz(path, FILENAME_MAX, \"%s/error.log\", get_log_dir());\n+                    if(access(path, R_OK)) {\n+                        collector_error(\"[%s]: 'Netdata_error.log' path (%s) invalid, unknown or needs permissions\", \n+                            p_file_info->chartname, path);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(path);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Netdata_fluentbit.log\")){\n+                    if(access(p_flb_srvc_config->log_path, R_OK)){\n+                        collector_error(\"[%s]: Netdata_fluentbit.log path (%s) invalid, unknown or needs permissions\", \n+                            p_file_info->chartname, p_flb_srvc_config->log_path);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(p_flb_srvc_config->log_path);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Auth.log_tail\")){\n+                    const char * const auth_path_default[] = {\n+                        \"/var/log/auth.log\",\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(auth_path_default[i] && access(auth_path_default[i], R_OK)){i++;};\n+                    if(!auth_path_default[i]){\n+                        collector_error(\"[%s]: auth.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(auth_path_default[i]);\n+                } else if(!strcasecmp(p_file_info->chartname, \"syslog_tail\")){\n+                    const char * const syslog_path_default[] = {\n+                        \"/var/log/syslog\",   /* Debian, Ubuntu */\n+                        \"/var/log/messages\", /* RHEL, Red Hat, CentOS, Fedora */\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(syslog_path_default[i] && access(syslog_path_default[i], R_OK)){i++;};\n+                    if(!syslog_path_default[i]){\n+                        collector_error(\"[%s]: syslog path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(syslog_path_default[i]);\n+                }\n+                break;\n+            case FLB_WEB_LOG:\n+                if(!strcasecmp(p_file_info->chartname, \"Apache_access.log\")){\n+                    const char * const apache_access_path_default[] = {\n+                        \"/var/log/apache/access.log\",\n+                        \"/var/log/apache2/access.log\",  /* Debian and derivatives, Alpine */\n+                        \"/var/log/apache2/access_log\",  /* Gentoo ? */\n+                        \"/var/log/httpd/access_log\",    /* RHEL and derivatives */\n+                        \"/var/log/httpd-access.log\",    /* FreeBSD */\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(apache_access_path_default[i] && access(apache_access_path_default[i], R_OK)){i++;};\n+                    if(!apache_access_path_default[i]){\n+                        collector_error(\"[%s]: Apache access.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(apache_access_path_default[i]);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Nginx_access.log\")){\n+                    const char * const nginx_access_path_default[] = {\n+                        \"/var/log/nginx/access.log\",\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(nginx_access_path_default[i] && access(nginx_access_path_default[i], R_OK)){i++;};\n+                    if(!nginx_access_path_default[i]){\n+                        collector_error(\"[%s]: Nginx access.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(nginx_access_path_default[i]);\n+                }\n+                break;\n+            case FLB_KMSG:\n+            case FLB_SYSTEMD:\n+                p_file_info->filename = strdupz(LOG_PATH_AUTO);\n+                break;\n+            case FLB_DOCKER_EV:\n+                if(access(DOCKER_EV_DEFAULT_PATH, R_OK)){\n+                    collector_error(\"[%s]: Docker socket Unix path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                    return p_file_info_destroy(p_file_info);\n+                } else p_file_info->filename = strdupz(DOCKER_EV_DEFAULT_PATH);\n+                break;\n+            default:\n+                collector_error(\"[%s]: log path invalid or unknown\", p_file_info->chartname);\n+                return p_file_info_destroy(p_file_info);\n+        }\n+    }\n+    p_file_info->file_basename = get_basename(p_file_info->filename); \n+    collector_info(\"[%s]: p_file_info->filename: %s\", p_file_info->chartname, \n+                                            p_file_info->filename ? p_file_info->filename : \"NULL\");\n+    collector_info(\"[%s]: p_file_info->file_basename: %s\", p_file_info->chartname, \n+                                                 p_file_info->file_basename ? p_file_info->file_basename : \"NULL\");\n+    if(unlikely(!p_file_info->filename)) return p_file_info_destroy(p_file_info);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read \"update every\" and \"update timeout\" configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->update_every = appconfig_get_number(   &log_management_config, config_section->name, \n+                                                        \"update every\", g_logs_manag_config.update_every);\n+    collector_info(\"[%s]: update every = %d\", p_file_info->chartname, p_file_info->update_every);\n+\n+    p_file_info->update_timeout = appconfig_get_number( &log_management_config, config_section->name, \n+                                                        \"update timeout\", g_logs_manag_config.update_timeout);\n+    if(p_file_info->update_timeout < p_file_info->update_every) p_file_info->update_timeout = p_file_info->update_every;\n+    collector_info(\"[%s]: update timeout = %d\", p_file_info->chartname, p_file_info->update_timeout);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read \"use log timestamp\" configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->use_log_timestamp = appconfig_get_boolean_ondemand(&log_management_config, config_section->name, \n+                                                                    \"use log timestamp\", \n+                                                                    g_logs_manag_config.use_log_timestamp);\n+    collector_info(\"[%s]: use log timestamp = %s\", p_file_info->chartname, \n+                                                    p_file_info->use_log_timestamp ? \"auto or yes\" : \"no\");\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read compression acceleration configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->compression_accel = appconfig_get_number(  &log_management_config, config_section->name, \n+                                                            \"compression acceleration\", \n+                                                            g_logs_manag_config.compression_acceleration);\n+    collector_info(\"[%s]: compression acceleration = %d\", p_file_info->chartname, p_file_info->compression_accel);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read DB mode.\n+     * ------------------------------------------------------------------------- */\n+    const char *const db_mode_str = appconfig_get(&log_management_config, config_section->name, \"db mode\", NULL);\n+    collector_info(\"[%s]: db mode = %s\", p_file_info->chartname, db_mode_str ? db_mode_str : \"NULL\");\n+    p_file_info->db_mode = db_mode_str_to_db_mode(db_mode_str);\n+    freez((void *)db_mode_str);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read save logs from buffers to DB interval configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->buff_flush_to_db_interval = appconfig_get_number(  &log_management_config, config_section->name, \n+                                                                    \"circular buffer flush to db\", \n+                                                                    g_logs_manag_config.buff_flush_to_db_interval);\n+    if(p_file_info->buff_flush_to_db_interval > SAVE_BLOB_TO_DB_MAX) {\n+        p_file_info->buff_flush_to_db_interval = SAVE_BLOB_TO_DB_MAX;\n+        collector_info(\"[%s]: circular buffer flush to db out of range. Using maximum permitted value: %d\", \n+                p_file_info->chartname, p_file_info->buff_flush_to_db_interval);\n+\n+    } else if(p_file_info->buff_flush_to_db_interval < SAVE_BLOB_TO_DB_MIN) {\n+        p_file_info->buff_flush_to_db_interval = SAVE_BLOB_TO_DB_MIN;\n+        collector_info(\"[%s]: circular buffer flush to db out of range. Using minimum permitted value: %d\",\n+                p_file_info->chartname, p_file_info->buff_flush_to_db_interval);\n+    } \n+    collector_info(\"[%s]: circular buffer flush to db = %d\", p_file_info->chartname, p_file_info->buff_flush_to_db_interval);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read BLOB max size configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->blob_max_size  = appconfig_get_number( &log_management_config, config_section->name, \n+                                                        \"disk space limit MiB\", \n+                                                        g_logs_manag_config.disk_space_limit_in_mib) MiB / BLOB_MAX_FILES;\n+    collector_info(\"[%s]: BLOB max size = %lld\", p_file_info->chartname, (long long)p_file_info->blob_max_size);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read collected logs chart configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->parser_config = callocz(1, sizeof(Log_parser_config_t));\n+\n+    if(appconfig_get_boolean(&log_management_config, config_section->name, \n+                             \"collected logs total chart enable\",\n+                             g_logs_manag_config.enable_collected_logs_total)){\n+        p_file_info->parser_config->chart_config |= CHART_COLLECTED_LOGS_TOTAL;\n+    }\n+    collector_info( \"[%s]: collected logs total chart enable = %s\",  p_file_info->chartname, \n+                    (p_file_info->parser_config->chart_config & CHART_COLLECTED_LOGS_TOTAL) ? \"yes\" : \"no\");\n+\n+    if(appconfig_get_boolean(&log_management_config, config_section->name, \n+                             \"collected logs rate chart enable\",\n+                             g_logs_manag_config.enable_collected_logs_rate)){\n+        p_file_info->parser_config->chart_config |= CHART_COLLECTED_LOGS_RATE;\n+    }\n+    collector_info( \"[%s]: collected logs rate chart enable = %s\",  p_file_info->chartname, \n+                    (p_file_info->parser_config->chart_config & CHART_COLLECTED_LOGS_RATE) ? \"yes\" : \"no\");\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Deal with log-type-specific configuration options.\n+     * ------------------------------------------------------------------------- */\n+    \n+    if(p_file_info->log_type == FLB_TAIL || p_file_info->log_type == FLB_WEB_LOG){\n+        Flb_tail_config_t *tail_config = callocz(1, sizeof(Flb_tail_config_t));\n+        if(appconfig_get_boolean(&log_management_config, config_section->name, \"use inotify\", CONFIG_BOOLEAN_YES))\n+            tail_config->use_inotify = 1;\n+        collector_info( \"[%s]: use inotify = %s\",  p_file_info->chartname, tail_config->use_inotify? \"yes\" : \"no\");\n+\n+        p_file_info->flb_config = tail_config;\n+    }\n+    \n+    if(p_file_info->log_type == FLB_WEB_LOG){\n+        /* Check if a valid web log format configuration is detected */\n+        char *log_format = appconfig_get(&log_management_config, config_section->name, \"log format\", LOG_PATH_AUTO);\n+        const char delimiter = ' '; // TODO!!: TO READ FROM CONFIG\n+        collector_info(\"[%s]: log format = %s\", p_file_info->chartname, log_format ? log_format : \"NULL!\");\n+\n+        /* If \"log format = auto\" or no \"log format\" config is detected, \n+            * try log format autodetection based on last log file line.\n+            * TODO 1: Add another case in OR where log_format is compared with a valid reg exp.\n+            * TODO 2: Set default log format and delimiter if not found in config? Or auto-detect? */ \n+        if(!log_format || !*log_format || !strcmp(log_format, LOG_PATH_AUTO)){ \n+            collector_info(\"[%s]: Attempting auto-detection of log format\", p_file_info->chartname);\n+            char *line = read_last_line(p_file_info->filename, 0);\n+            if(!line){\n+                collector_error(\"[%s]: read_last_line() returned NULL\", p_file_info->chartname);\n+                return p_file_info_destroy(p_file_info);\n+            }\n+            p_file_info->parser_config->gen_config = auto_detect_web_log_parser_config(line, delimiter);\n+            freez(line);\n+        }\n+        else{\n+            p_file_info->parser_config->gen_config = read_web_log_parser_config(log_format, delimiter);\n+            collector_info( \"[%s]: Read web log parser config: %s\", p_file_info->chartname, \n+                    p_file_info->parser_config->gen_config ? \"success!\" : \"failed!\");\n+        }\n+        freez(log_format);\n+\n+        if(!p_file_info->parser_config->gen_config){\n+            collector_error(\"[%s]: No valid web log parser config found\", p_file_info->chartname);\n+            return p_file_info_destroy(p_file_info); \n+        }\n+\n+        /* Check whether metrics verification during parsing is required */\n+        Web_log_parser_config_t *wblp_config = (Web_log_parser_config_t *) p_file_info->parser_config->gen_config;\n+        wblp_config->verify_parsed_logs = appconfig_get_boolean( &log_management_config, config_section->name, \n+                                                                    \"verify parsed logs\", CONFIG_BOOLEAN_NO);\n+        collector_info(\"[%s]: verify parsed logs = %d\", p_file_info->chartname, wblp_config->verify_parsed_logs);\n+\n+        wblp_config->skip_timestamp_parsing = p_file_info->use_log_timestamp ? 0 : 1;\n+        collector_info(\"[%s]: skip_timestamp_parsing = %d\", p_file_info->chartname, wblp_config->skip_timestamp_parsing);\n+        \n+        for(int j = 0; j < wblp_config->num_fields; j++){\n+            if((wblp_config->fields[j] == VHOST_WITH_PORT || wblp_config->fields[j] == VHOST) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"vhosts chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_VHOST;\n+            }\n+            if((wblp_config->fields[j] == VHOST_WITH_PORT || wblp_config->fields[j] == PORT) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"ports chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_PORT;\n+            }\n+            if((wblp_config->fields[j] == REQ_CLIENT) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"IP versions chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_IP_VERSION;\n+            }\n+            if((wblp_config->fields[j] == REQ_CLIENT) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"unique client IPs - current poll chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_REQ_CLIENT_CURRENT;\n+            }\n+            if((wblp_config->fields[j] == REQ_CLIENT) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"unique client IPs - all-time chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_REQ_CLIENT_ALL_TIME;\n+            }\n+            if((wblp_config->fields[j] == REQ || wblp_config->fields[j] == REQ_METHOD) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"http request methods chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_REQ_METHODS;\n+            }\n+            if((wblp_config->fields[j] == REQ || wblp_config->fields[j] == REQ_PROTO) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"http protocol versions chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_REQ_PROTO;\n+            }\n+            if((wblp_config->fields[j] == REQ_SIZE || wblp_config->fields[j] == RESP_SIZE) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"bandwidth chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_BANDWIDTH;\n+            }\n+            if((wblp_config->fields[j] == REQ_PROC_TIME) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"timings chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_REQ_PROC_TIME;\n+            }\n+            if((wblp_config->fields[j] == RESP_CODE) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"response code families chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_RESP_CODE_FAMILY;\n+            }\n+            if((wblp_config->fields[j] == RESP_CODE) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"response codes chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_RESP_CODE;\n+            }\n+            if((wblp_config->fields[j] == RESP_CODE) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"response code types chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_RESP_CODE_TYPE;\n+            }\n+            if((wblp_config->fields[j] == SSL_PROTO) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"SSL protocols chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_SSL_PROTO;\n+            }\n+            if((wblp_config->fields[j] == SSL_CIPHER_SUITE) \n+                && appconfig_get_boolean(&log_management_config, config_section->name, \"SSL chipher suites chart\", CONFIG_BOOLEAN_NO)){ \n+                p_file_info->parser_config->chart_config |= CHART_SSL_CIPHER;\n+            }\n+        }\n+    }\n+    else if(p_file_info->log_type == FLB_KMSG){\n+        if(appconfig_get_boolean(&log_management_config, config_section->name, \"severity chart\", CONFIG_BOOLEAN_NO)) {\n+            p_file_info->parser_config->chart_config |= CHART_SYSLOG_SEVER;\n+        }\n+        if(appconfig_get_boolean(&log_management_config, config_section->name, \"subsystem chart\", CONFIG_BOOLEAN_NO)) {\n+            p_file_info->parser_config->chart_config |= CHART_KMSG_SUBSYSTEM;\n+        }\n+        if(appconfig_get_boolean(&log_management_config, config_section->name, \"device chart\", CONFIG_BOOLEAN_NO)) {\n+            p_file_info->parser_config->chart_config |= CHART_KMSG_DEVICE;\n+        }\n+    }\n+    else if(p_file_info->log_type == FLB_SYSTEMD || p_file_info->log_type == FLB_SYSLOG){\n+        if(p_file_info->log_type == FLB_SYSLOG){\n+            Syslog_parser_config_t *syslog_config = callocz(1, sizeof(Syslog_parser_config_t));\n+\n+            /* Read syslog format */\n+            syslog_config->log_format = appconfig_get(  &log_management_config, \n+                                                        config_section->name, \n+                                                        \"log format\", NULL);\n+            collector_info(\"[%s]: log format = %s\", p_file_info->chartname, \n+                                                    syslog_config->log_format ? syslog_config->log_format : \"NULL!\");\n+            if(!syslog_config->log_format || !*syslog_config->log_format || !strcasecmp(syslog_config->log_format, \"auto\")){\n+                freez(syslog_config->log_format);\n+                freez(syslog_config);\n+                return p_file_info_destroy(p_file_info);\n+            }\n+\n+            syslog_config->socket_config = callocz(1, sizeof(Flb_socket_config_t));\n+\n+            /* Read syslog socket mode\n+             * see also https://docs.fluentbit.io/manual/pipeline/inputs/syslog#configuration-parameters */\n+            syslog_config->socket_config->mode = appconfig_get( &log_management_config, \n+                                                                config_section->name, \n+                                                                \"mode\", \"unix_udp\");\n+            collector_info(\"[%s]: mode = %s\", p_file_info->chartname, syslog_config->socket_config->mode);\n+\n+            /* Check for valid socket path if (mode == unix_udp) or \n+             * (mode == unix_tcp), else read syslog network interface to bind, \n+             * if (mode == udp) or (mode == tcp). */\n+            if( !strcasecmp(syslog_config->socket_config->mode, \"unix_udp\") || \n+                !strcasecmp(syslog_config->socket_config->mode, \"unix_tcp\")){\n+                if(!p_file_info->filename || !*p_file_info->filename || !strcasecmp(p_file_info->filename, LOG_PATH_AUTO)){\n+                    // freez(syslog_config->socket_config->mode);\n+                    freez(syslog_config->socket_config);\n+                    freez(syslog_config->log_format);\n+                    freez(syslog_config);\n+                    return p_file_info_destroy(p_file_info);\n+                }\n+                syslog_config->socket_config->unix_perm = appconfig_get(&log_management_config, \n+                                                                        config_section->name, \n+                                                                        \"unix_perm\", \"0644\");\n+                collector_info(\"[%s]: unix_perm = %s\", p_file_info->chartname, syslog_config->socket_config->unix_perm);\n+            } else if(  !strcasecmp(syslog_config->socket_config->mode, \"udp\") || \n+                        !strcasecmp(syslog_config->socket_config->mode, \"tcp\")){",
                "path": "logsmanagement/logsmanag_config.c",
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "original_commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "Please, take a look in all options read to verify valid values.",
                "created_at": "2023-10-27T03:28:09Z",
                "updated_at": "2023-10-27T03:28:10Z",
                "html_url": "https://github.com/netdata/netdata/pull/13291#discussion_r1374034177",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374034177"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#discussion_r1374034177"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                },
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374034177/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "start_line": null,
                "original_start_line": null,
                "start_side": null,
                "line": 986,
                "original_line": 986,
                "side": "RIGHT",
                "original_position": 986,
                "position": 986,
                "subject_type": "line"
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:28:09Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "a5b3a3a04f83f3a71f73c8f98763ec653057ddec",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T03:19:39Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:28:09Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887216878",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1700944000,
                "node_id": "PRR_kwDOAKPxd85lYliA",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": null,
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "submitted_at": "2023-10-27T03:28:09Z",
                "state": "commented",
                "html_url": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700944000",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700944000"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:28:09Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "a5b3a3a04f83f3a71f73c8f98763ec653057ddec",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T03:19:39Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:28:10Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887186985",
        "type": "PullRequestReviewCommentEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374032635",
                "pull_request_review_id": 1700941793,
                "id": 1374032635,
                "node_id": "PRRC_kwDOAKPxd85R5hL7",
                "diff_hunk": "@@ -0,0 +1,1367 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n+\n+/** @file   logsmanag_config.c\n+ *  @brief  This file includes functions to manage \n+ *          the logs management configuration.\n+ */\n+\n+#include \"logsmanag_config.h\"\n+#include \"db_api.h\"\n+#include \"rrd_api/rrd_api.h\"\n+#include \"helper.h\"\n+\n+g_logs_manag_config_t g_logs_manag_config = {\n+    .update_every = UPDATE_EVERY,\n+    .update_timeout = UPDATE_TIMEOUT_DEFAULT,\n+    .use_log_timestamp = CONFIG_BOOLEAN_AUTO,\n+    .circ_buff_max_size_in_mib = CIRCULAR_BUFF_DEFAULT_MAX_SIZE / (1 MiB),\n+    .circ_buff_drop_logs = CIRCULAR_BUFF_DEFAULT_DROP_LOGS,\n+    .compression_acceleration = COMPRESSION_ACCELERATION_DEFAULT,\n+    .db_mode = GLOBAL_DB_MODE_DEFAULT,\n+    .disk_space_limit_in_mib = DISK_SPACE_LIMIT_DEFAULT,  \n+    .buff_flush_to_db_interval = SAVE_BLOB_TO_DB_DEFAULT,\n+    .enable_collected_logs_total = ENABLE_COLLECTED_LOGS_TOTAL_DEFAULT,\n+    .enable_collected_logs_rate = ENABLE_COLLECTED_LOGS_RATE_DEFAULT\n+};\n+\n+static logs_manag_db_mode_t db_mode_str_to_db_mode(const char *const db_mode_str){\n+    if(!db_mode_str || !*db_mode_str) return g_logs_manag_config.db_mode;\n+    else if(!strcasecmp(db_mode_str, \"full\")) return LOGS_MANAG_DB_MODE_FULL;\n+    else if(!strcasecmp(db_mode_str, \"none\")) return LOGS_MANAG_DB_MODE_NONE;\n+    else return g_logs_manag_config.db_mode;\n+}\n+\n+static struct config log_management_config = {\n+    .first_section = NULL,\n+    .last_section = NULL,\n+    .mutex = NETDATA_MUTEX_INITIALIZER,\n+    .index = {\n+            .avl_tree = {\n+                    .root = NULL,\n+                    .compar = appconfig_section_compare\n+            },\n+            .rwlock = AVL_LOCK_INITIALIZER\n+    }\n+};\n+\n+static struct Chart_meta chart_types[] = {\n+    {.type = FLB_TAIL,      .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_WEB_LOG,   .init = web_log_chart_init,   .update = web_log_chart_update},\n+    {.type = FLB_KMSG,      .init = kernel_chart_init,    .update = kernel_chart_update},\n+    {.type = FLB_SYSTEMD,   .init = systemd_chart_init,   .update = systemd_chart_update},\n+    {.type = FLB_DOCKER_EV, .init = docker_ev_chart_init, .update = docker_ev_chart_update},\n+    {.type = FLB_SYSLOG,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_SERIAL,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_MQTT,      .init = mqtt_chart_init,      .update = mqtt_chart_update}\n+};\n+\n+char *get_user_config_dir(void){\n+    char *dir = getenv(\"NETDATA_USER_CONFIG_DIR\");\n+\n+    return dir ? dir : CONFIG_DIR;\n+}\n+\n+char *get_stock_config_dir(void){\n+    char *dir = getenv(\"NETDATA_STOCK_CONFIG_DIR\");\n+\n+    return dir ? dir : LIBCONFIG_DIR;\n+}\n+\n+char *get_log_dir(void){\n+    char *dir = getenv(\"NETDATA_LOG_DIR\");\n+\n+    return dir ? dir : LOG_DIR;\n+}\n+\n+char *get_cache_dir(void){\n+    char *dir = getenv(\"NETDATA_CACHE_DIR\");\n+\n+    return dir ? dir : CACHE_DIR;\n+}\n+\n+/** \n+ * @brief Cleanup p_file_info struct\n+ * @param p_file_info The struct of File_info type to be cleaned up.\n+ * @todo  Pass p_file_info by reference, so that it can be set to NULL. */\n+static void p_file_info_destroy(struct File_info *p_file_info){\n+\n+    // TODO: Clean up rrd / chart stuff.\n+\n+    if(unlikely(!p_file_info)){\n+        collector_info(\"p_file_info_destroy() called but p_file_info == NULL - already destroyed?\");\n+        return;\n+    }\n+\n+    char chartname[100];\n+    snprintfz(chartname, 100, \"%s\", p_file_info->chartname ? p_file_info->chartname : \"Unknown\");\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup...\", chartname);\n+\n+    __atomic_store_n(&p_file_info->state, LOG_SRC_EXITING, __ATOMIC_RELAXED);\n+\n+    if(uv_is_active((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer)){\n+        uv_timer_stop(&p_file_info->flb_tmp_buff_cpy_timer);\n+        if (!uv_is_closing((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer))\n+            uv_close((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer, NULL);\n+    }\n+\n+    // TODO: Need to do proper termination of DB threads and allocated memory.\n+    if(p_file_info->db_writer_thread){\n+        uv_thread_join(p_file_info->db_writer_thread);\n+        sqlite3_close(p_file_info->db);\n+        uv_mutex_destroy(p_file_info->db_mut);\n+        freez((void *) p_file_info->db_metadata);\n+        freez((void *) p_file_info->db_dir);\n+        freez(p_file_info->db_writer_thread);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_asc);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_desc);\n+    }\n+\n+    freez((void *) p_file_info->chartname);\n+    freez(p_file_info->filename);\n+    freez((void *) p_file_info->file_basename);\n+    freez((void *) p_file_info->stream_guid);\n+\n+    for(int i = 1; i <= BLOB_MAX_FILES; i++){\n+        if(p_file_info->blob_handles[i]){\n+            uv_fs_close(NULL, NULL, p_file_info->blob_handles[i], NULL);\n+            p_file_info->blob_handles[i] = 0;\n+        }\n+    }\n+\n+    if(p_file_info->circ_buff) \n+        circ_buff_destroy(p_file_info->circ_buff);\n+    \n+    if(p_file_info->parser_metrics){\n+        switch(p_file_info->log_type){\n+            case FLB_WEB_LOG: {\n+                if(p_file_info->parser_metrics->web_log)\n+                    freez(p_file_info->parser_metrics->web_log);\n+                break;\n+            }\n+            case FLB_KMSG: {\n+                if(p_file_info->parser_metrics->kernel){\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->subsystem);\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->device);\n+                    freez(p_file_info->parser_metrics->kernel);\n+                }\n+                break;\n+            }\n+            case FLB_SYSTEMD: \n+            case FLB_SYSLOG: {\n+                if(p_file_info->parser_metrics->systemd)\n+                    freez(p_file_info->parser_metrics->systemd);\n+                break;\n+            }\n+            case FLB_DOCKER_EV: {\n+                if(p_file_info->parser_metrics->docker_ev)\n+                    freez(p_file_info->parser_metrics->docker_ev);\n+                break;\n+            }\n+            case FLB_MQTT: {\n+                if(p_file_info->parser_metrics->mqtt){\n+                    dictionary_destroy(p_file_info->parser_metrics->mqtt->topic);\n+                    freez(p_file_info->parser_metrics->mqtt);\n+                }\n+                break;\n+            }\n+            default:\n+                break;\n+        }   \n+\n+        for(int i = 0; p_file_info->parser_cus_config && \n+                       p_file_info->parser_metrics->parser_cus && \n+                       p_file_info->parser_cus_config[i]; i++){\n+            freez(p_file_info->parser_cus_config[i]->chartname);\n+            freez(p_file_info->parser_cus_config[i]->regex_str);\n+            freez(p_file_info->parser_cus_config[i]->regex_name);\n+            regfree(&p_file_info->parser_cus_config[i]->regex);\n+            freez(p_file_info->parser_cus_config[i]);\n+            freez(p_file_info->parser_metrics->parser_cus[i]);\n+        }    \n+\n+        freez(p_file_info->parser_cus_config);\n+        freez(p_file_info->parser_metrics->parser_cus);\n+\n+        freez(p_file_info->parser_metrics);\n+    }\n+\n+    if(p_file_info->parser_config){\n+        freez(p_file_info->parser_config->gen_config);\n+        freez(p_file_info->parser_config);\n+    }\n+\n+    Flb_output_config_t *output_next = p_file_info->flb_outputs;\n+    while(output_next){\n+        Flb_output_config_t *output = output_next;\n+        output_next = output_next->next;\n+\n+        struct flb_output_config_param *param_next = output->param;\n+        while(param_next){\n+            struct flb_output_config_param *param = param_next;\n+            param_next = param->next;\n+            freez(param->key);\n+            freez(param->val);\n+            freez(param);\n+        }\n+        freez(output->plugin);\n+        freez(output);\n+    }\n+    \n+    freez(p_file_info);\n+\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup done\", chartname);\n+}\n+\n+void p_file_info_destroy_all(void){\n+    if(p_file_infos_arr){\n+        for(int i = 0; i < p_file_infos_arr->count; i++) \n+            p_file_info_destroy(p_file_infos_arr->data[i]);\n+        freez(p_file_infos_arr);\n+        p_file_infos_arr = NULL;\n+    }\n+}\n+\n+/**\n+ * @brief Load logs management configuration.\n+ * @returns  0 if success, \n+ *          -1 if disabled in global config, \n+ *          -2 if config file not found\n+ *          -3 if p_flb_srvc_config if is NULL (no flb_srvc_config_t provided)\n+ */\n+int logs_manag_config_load( flb_srvc_config_t *p_flb_srvc_config, \n+                            Flb_socket_config_t **forward_in_config_p,\n+                            int g_update_every){\n+    int rc = LOGS_MANAG_CONFIG_LOAD_ERROR_OK;\n+    char section[100];\n+    char temp_path[FILENAME_MAX + 1];\n+\n+    struct config logsmanagement_d_conf = {\n+        .first_section = NULL,\n+        .last_section = NULL,\n+        .mutex = NETDATA_MUTEX_INITIALIZER,\n+        .index = {\n+                .avl_tree = {\n+                        .root = NULL,\n+                        .compar = appconfig_section_compare\n+                },\n+                .rwlock = AVL_LOCK_INITIALIZER\n+        }\n+    };\n+\n+    char *filename = strdupz_path_subpath(get_user_config_dir(), \"logsmanagement.d.conf\");\n+    if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)) {\n+        collector_info(\"CONFIG: cannot load user config '%s'. Will try stock config.\", filename);\n+        freez(filename);\n+\n+        filename = strdupz_path_subpath(get_stock_config_dir(), \"logsmanagement.d.conf\");\n+        if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)){\n+            collector_error(\"CONFIG: cannot load stock config '%s'. Logs management will be disabled.\", filename);\n+            rc = LOGS_MANAG_CONFIG_LOAD_ERROR_NO_STOCK_CONFIG;\n+        }\n+    }\n+    freez(filename);\n+    \n+\n+    /* [global] section */\n+\n+    snprintfz(section, 100, \"global\");\n+\n+    if(!appconfig_get_boolean(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"enabled\", \n+            ENABLE_LOGS_MANAGEMENT_DEFAULT)){\n+        collector_info(\"CONFIG: Logs management disabled due to configuration option.\");\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_DISABLED;\n+    }\n+\n+    g_logs_manag_config.update_every = appconfig_get_number(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"update every\", \n+        g_logs_manag_config.update_every);\n+    \n+    g_logs_manag_config.update_every = \n+        g_update_every && g_update_every > g_logs_manag_config.update_every ? \n+        g_update_every : g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.update_timeout = appconfig_get_number(  \n+        &logsmanagement_d_conf, \n+        section, \n+        \"update timeout\", \n+        UPDATE_TIMEOUT_DEFAULT);\n+\n+    if(g_logs_manag_config.update_timeout < g_logs_manag_config.update_every) \n+        g_logs_manag_config.update_timeout = g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.use_log_timestamp = appconfig_get_boolean_ondemand( \n+        &logsmanagement_d_conf,\n+        section,\n+        \"use log timestamp\", \n+        g_logs_manag_config.use_log_timestamp);\n+    \n+    g_logs_manag_config.circ_buff_max_size_in_mib = appconfig_get_number(   \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer max size MiB\", \n+        g_logs_manag_config.circ_buff_max_size_in_mib);\n+    \n+    g_logs_manag_config.circ_buff_drop_logs = appconfig_get_boolean(    \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer drop logs if full\", \n+        g_logs_manag_config.circ_buff_drop_logs);\n+    \n+\n+    g_logs_manag_config.compression_acceleration = appconfig_get_number(    \n+        &logsmanagement_d_conf,\n+        section,\n+        \"compression acceleration\", \n+        g_logs_manag_config.compression_acceleration);\n+\n+    g_logs_manag_config.enable_collected_logs_total = appconfig_get_boolean(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"collected logs total chart enable\", \n+        g_logs_manag_config.enable_collected_logs_total);\n+\n+    g_logs_manag_config.enable_collected_logs_rate = appconfig_get_boolean(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"collected logs rate chart enable\", \n+        g_logs_manag_config.enable_collected_logs_rate);\n+    \n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] update every: %d\",                       section,  g_logs_manag_config.update_every);\n+        collector_info(\"CONFIG: [%s] update timeout: %d\",                     section,  g_logs_manag_config.update_timeout);\n+        collector_info(\"CONFIG: [%s] use log timestamp: %d\",                  section,  g_logs_manag_config.use_log_timestamp);\n+        collector_info(\"CONFIG: [%s] circular buffer max size MiB: %d\",       section,  g_logs_manag_config.circ_buff_max_size_in_mib);\n+        collector_info(\"CONFIG: [%s] circular buffer drop logs if full: %d\",  section,  g_logs_manag_config.circ_buff_drop_logs);\n+        collector_info(\"CONFIG: [%s] compression acceleration: %d\",           section,  g_logs_manag_config.compression_acceleration);\n+        collector_info(\"CONFIG: [%s] collected logs total chart enable: %d\",  section,  g_logs_manag_config.enable_collected_logs_total);\n+        collector_info(\"CONFIG: [%s] collected logs rate chart enable: %d\",   section,  g_logs_manag_config.enable_collected_logs_rate);\n+    }\n+\n+\n+    /* [db] section */\n+\n+    snprintfz(section, 100, \"db\");\n+\n+    const char *const db_mode_str = appconfig_get(\n+        &logsmanagement_d_conf,\n+        section,\n+        \"db mode\",\n+        GLOBAL_DB_MODE_DEFAULT_STR);\n+    g_logs_manag_config.db_mode = db_mode_str_to_db_mode(db_mode_str);\n+\n+    snprintfz(temp_path, FILENAME_MAX, \"%s\" LOGS_MANAG_DB_SUBPATH, get_cache_dir());\n+    db_set_main_dir(appconfig_get(&logsmanagement_d_conf, section, \"db dir\", temp_path));\n+\n+    g_logs_manag_config.buff_flush_to_db_interval = appconfig_get_number(  \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer flush to db\", \n+        g_logs_manag_config.buff_flush_to_db_interval);\n+    \n+    g_logs_manag_config.disk_space_limit_in_mib = appconfig_get_number(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"disk space limit MiB\", \n+        g_logs_manag_config.disk_space_limit_in_mib);\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] db mode: %s [%d]\",                 section, db_mode_str, (int) g_logs_manag_config.db_mode);\n+        collector_info(\"CONFIG: [%s] db dir: %s\",                       section, temp_path);\n+        collector_info(\"CONFIG: [%s] circular buffer flush to db: %d\",  section, g_logs_manag_config.buff_flush_to_db_interval);\n+        collector_info(\"CONFIG: [%s] disk space limit MiB: %d\",         section, g_logs_manag_config.disk_space_limit_in_mib);\n+    }\n+\n+\n+    /* [forward input] section */\n+\n+    snprintfz(section, 100, \"forward input\");\n+\n+    const int fwd_enable = appconfig_get_boolean(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"enabled\", \n+        CONFIG_BOOLEAN_NO);\n+    \n+    *forward_in_config_p = (Flb_socket_config_t *) callocz(1, sizeof(Flb_socket_config_t));\n+\n+    (*forward_in_config_p)->unix_path = appconfig_get(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"unix path\", \n+        FLB_FORWARD_UNIX_PATH_DEFAULT);\n+    \n+    (*forward_in_config_p)->unix_perm = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"unix perm\", \n+        FLB_FORWARD_UNIX_PERM_DEFAULT);\n+    \n+    // TODO: Check if listen is in valid format\n+    (*forward_in_config_p)->listen = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"listen\", \n+        FLB_FORWARD_ADDR_DEFAULT);\n+    \n+    (*forward_in_config_p)->port = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"port\", \n+        FLB_FORWARD_PORT_DEFAULT);\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] enabled: %s\",      section, fwd_enable ? \"yes\" : \"no\");\n+        collector_info(\"CONFIG: [%s] unix path: %s\",    section, (*forward_in_config_p)->unix_path);\n+        collector_info(\"CONFIG: [%s] unix perm: %s\",    section, (*forward_in_config_p)->unix_perm);\n+        collector_info(\"CONFIG: [%s] listen: %s\",       section, (*forward_in_config_p)->listen);\n+        collector_info(\"CONFIG: [%s] port: %s\",         section, (*forward_in_config_p)->port);\n+    }\n+\n+    if(!fwd_enable) {\n+        freez(*forward_in_config_p);\n+        *forward_in_config_p = NULL;\n+    }\n+\n+\n+    /* [fluent bit] section */\n+\n+    snprintfz(section, 100, \"fluent bit\");\n+\n+    snprintfz(temp_path, FILENAME_MAX, \"%s/%s\", get_log_dir(), FLB_LOG_FILENAME_DEFAULT);\n+    \n+    if(p_flb_srvc_config){\n+        p_flb_srvc_config->flush = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"flush\", \n+            p_flb_srvc_config->flush);\n+        \n+        p_flb_srvc_config->http_listen = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http listen\", \n+            p_flb_srvc_config->http_listen);\n+\n+        p_flb_srvc_config->http_port = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http port\", \n+            p_flb_srvc_config->http_port);\n+        \n+        p_flb_srvc_config->http_server = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http server\", \n+            p_flb_srvc_config->http_server);\n+        \n+        p_flb_srvc_config->log_path = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"log file\", \n+            temp_path);\n+        \n+        p_flb_srvc_config->log_level = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"log level\", \n+            p_flb_srvc_config->log_level);\n+        \n+        p_flb_srvc_config->coro_stack_size = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"coro stack size\", \n+            p_flb_srvc_config->coro_stack_size);\n+    }\n+    else\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_P_FLB_SRVC_NULL;\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] flush: %s\", section, p_flb_srvc_config->flush);\n+        collector_info(\"CONFIG: [%s] http listen: %s\", section, p_flb_srvc_config->http_listen);\n+        collector_info(\"CONFIG: [%s] http port: %s\", section, p_flb_srvc_config->http_port);\n+        collector_info(\"CONFIG: [%s] http server: %s\", section, p_flb_srvc_config->http_server);\n+        collector_info(\"CONFIG: [%s] log file: %s\", section, p_flb_srvc_config->log_path);\n+        collector_info(\"CONFIG: [%s] log level: %s\", section, p_flb_srvc_config->log_level);\n+        collector_info(\"CONFIG: [%s] coro stack size: %s\", section, p_flb_srvc_config->coro_stack_size);\n+    }\n+\n+    return rc;\n+}\n+\n+static bool metrics_dict_conflict_cb(const DICTIONARY_ITEM *item __maybe_unused, void *old_value, void *new_value, void *data __maybe_unused){\n+    ((metrics_dict_item_t *)old_value)->num_new += ((metrics_dict_item_t *)new_value)->num_new;\n+    return true;\n+}\n+\n+#define FLB_OUTPUT_PLUGIN_NAME_KEY \"name\"\n+\n+static int flb_output_param_get_cb(void *entry, void *data){\n+    struct config_option *option = (struct config_option *) entry;\n+    Flb_output_config_t *flb_output = (Flb_output_config_t *) data;\n+    \n+    char *param_prefix = callocz(1, snprintf(NULL, 0, \"output %d\", MAX_OUTPUTS_PER_SOURCE) + 1);\n+    sprintf(param_prefix, \"output %d\", flb_output->id);\n+    size_t param_prefix_len = strlen(param_prefix);\n+    \n+    if(!strncasecmp(option->name, param_prefix, param_prefix_len)){ // param->name looks like \"output 1 host\"\n+        char *param_key = &option->name[param_prefix_len]; // param_key should look like \" host\"\n+        while(*param_key == ' ') param_key++; // remove whitespace so it looks like \"host\"\n+        \n+        if(*param_key && strcasecmp(param_key, FLB_OUTPUT_PLUGIN_NAME_KEY)){ // ignore param_key \"name\" \n+            // debug_log( \"config_option: name[%s], value[%s]\", option->name, option->value);\n+            // debug_log( \"config option kv:[%s][%s]\", param_key, option->value);\n+\n+            struct flb_output_config_param **p = &flb_output->param;\n+            while((*p) != NULL) p = &((*p)->next); // Go to last param of linked list\n+\n+            (*p) = callocz(1, sizeof(struct flb_output_config_param));\n+            (*p)->key = strdupz(param_key);\n+            (*p)->val = strdupz(option->value);\n+        }\n+    }\n+\n+    freez(param_prefix);\n+\n+    return 0;\n+}\n+\n+/**\n+ * @brief Initialize logs management based on a section configuration.\n+ * @note On error, calls p_file_info_destroy() to clean up before returning. \n+ * @param config_section Section to read configuration from.\n+ * @todo How to handle duplicate entries?\n+ */\n+static void config_section_init(uv_loop_t *main_loop,\n+                                struct section *config_section, \n+                                Flb_socket_config_t *forward_in_config,\n+                                flb_srvc_config_t *p_flb_srvc_config,\n+                                netdata_mutex_t *stdout_mut){\n+\n+    struct File_info *p_file_info = callocz(1, sizeof(struct File_info));\n+\n+    /* -------------------------------------------------------------------------\n+     * Check if config_section->name is valid and if so, use it as chartname.\n+     * ------------------------------------------------------------------------- */\n+    if(config_section->name && *config_section->name){\n+        p_file_info->chartname = strdupz(config_section->name);\n+        netdata_fix_chart_id((char *) p_file_info->chartname);\n+        collector_info(\"[%s]: Initializing config loading\", p_file_info->chartname);\n+    } else {\n+        collector_error(\"Invalid logs management config section.\");\n+        return p_file_info_destroy(p_file_info);\n+    }\n+    \n+\n+    /* -------------------------------------------------------------------------\n+     * Check if this log source is enabled.\n+     * ------------------------------------------------------------------------- */\n+    if(appconfig_get_boolean(&log_management_config, config_section->name, \"enabled\", CONFIG_BOOLEAN_NO)){\n+        collector_info(\"[%s]: enabled = yes\", p_file_info->chartname);\n+    } else {\n+        collector_info(\"[%s]: enabled = no\", p_file_info->chartname);\n+        return p_file_info_destroy(p_file_info);\n+    }\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Check log type.\n+     * ------------------------------------------------------------------------- */\n+    char *type = appconfig_get(&log_management_config, config_section->name, \"log type\", \"flb_tail\");\n+    if(!type || !*type) p_file_info->log_type = FLB_TAIL; // Default\n+    else{\n+        if(!strcasecmp(type, \"flb_tail\")) p_file_info->log_type = FLB_TAIL;\n+        else if (!strcasecmp(type, \"flb_web_log\")) p_file_info->log_type = FLB_WEB_LOG;\n+        else if (!strcasecmp(type, \"flb_kmsg\")) p_file_info->log_type = FLB_KMSG;\n+        else if (!strcasecmp(type, \"flb_systemd\")) p_file_info->log_type = FLB_SYSTEMD;\n+        else if (!strcasecmp(type, \"flb_docker_events\")) p_file_info->log_type = FLB_DOCKER_EV;\n+        else if (!strcasecmp(type, \"flb_syslog\")) p_file_info->log_type = FLB_SYSLOG;\n+        else if (!strcasecmp(type, \"flb_serial\")) p_file_info->log_type = FLB_SERIAL;\n+        else if (!strcasecmp(type, \"flb_mqtt\")) p_file_info->log_type = FLB_MQTT;\n+        else p_file_info->log_type = FLB_TAIL;\n+    }\n+    freez(type);\n+    collector_info(\"[%s]: log type = %s\", p_file_info->chartname, log_src_type_t_str[p_file_info->log_type]);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read log source.\n+     * ------------------------------------------------------------------------- */\n+    char *source = appconfig_get(&log_management_config, config_section->name, \"log source\", \"local\");\n+    if(!source || !*source) p_file_info->log_source = LOG_SOURCE_LOCAL; // Default\n+    else if(!strcasecmp(source, \"forward\")) p_file_info->log_source = LOG_SOURCE_FORWARD;\n+    else p_file_info->log_source = LOG_SOURCE_LOCAL;\n+    freez(source);\n+    collector_info(\"[%s]: log source = %s\", p_file_info->chartname, log_src_t_str[p_file_info->log_source]);\n+\n+    if(p_file_info->log_source == LOG_SOURCE_FORWARD && !forward_in_config){\n+        collector_info(\"[%s]: forward_in_config == NULL - this log source will be disabled\", p_file_info->chartname);\n+        return p_file_info_destroy(p_file_info);\n+    }\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read stream uuid.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->stream_guid = appconfig_get(&log_management_config, config_section->name, \"stream guid\", \"\");\n+    collector_info(\"[%s]: stream guid = %s\", p_file_info->chartname, p_file_info->stream_guid);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read log path configuration and check if it is valid.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->filename = appconfig_get(&log_management_config, config_section->name, \"log path\", LOG_PATH_AUTO);\n+    if( /* path doesn't matter when log source is not local */\n+        (p_file_info->log_source == LOG_SOURCE_LOCAL) &&\n+        \n+        /* FLB_SYSLOG is special case, may or may not require a path */\n+        (p_file_info->log_type != FLB_SYSLOG) &&\n+\n+        /* FLB_MQTT is special case, does not require a path */\n+        (p_file_info->log_type != FLB_MQTT) &&\n+        \n+        (!p_file_info->filename /* Sanity check */ || \n+         !*p_file_info->filename || \n+         !strcmp(p_file_info->filename, LOG_PATH_AUTO) || \n+         access(p_file_info->filename, R_OK)\n+        )){ \n+\n+        freez(p_file_info->filename);\n+        p_file_info->filename = NULL;\n+            \n+        switch(p_file_info->log_type){\n+            case FLB_TAIL:\n+                if(!strcasecmp(p_file_info->chartname, \"Netdata_error.log\")){\n+                    char path[FILENAME_MAX + 1];\n+                    snprintfz(path, FILENAME_MAX, \"%s/error.log\", get_log_dir());\n+                    if(access(path, R_OK)) {\n+                        collector_error(\"[%s]: 'Netdata_error.log' path (%s) invalid, unknown or needs permissions\", \n+                            p_file_info->chartname, path);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(path);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Netdata_fluentbit.log\")){\n+                    if(access(p_flb_srvc_config->log_path, R_OK)){\n+                        collector_error(\"[%s]: Netdata_fluentbit.log path (%s) invalid, unknown or needs permissions\", \n+                            p_file_info->chartname, p_flb_srvc_config->log_path);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(p_flb_srvc_config->log_path);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Auth.log_tail\")){\n+                    const char * const auth_path_default[] = {\n+                        \"/var/log/auth.log\",\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(auth_path_default[i] && access(auth_path_default[i], R_OK)){i++;};\n+                    if(!auth_path_default[i]){\n+                        collector_error(\"[%s]: auth.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(auth_path_default[i]);\n+                } else if(!strcasecmp(p_file_info->chartname, \"syslog_tail\")){\n+                    const char * const syslog_path_default[] = {\n+                        \"/var/log/syslog\",   /* Debian, Ubuntu */\n+                        \"/var/log/messages\", /* RHEL, Red Hat, CentOS, Fedora */\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(syslog_path_default[i] && access(syslog_path_default[i], R_OK)){i++;};\n+                    if(!syslog_path_default[i]){\n+                        collector_error(\"[%s]: syslog path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(syslog_path_default[i]);\n+                }\n+                break;\n+            case FLB_WEB_LOG:\n+                if(!strcasecmp(p_file_info->chartname, \"Apache_access.log\")){\n+                    const char * const apache_access_path_default[] = {\n+                        \"/var/log/apache/access.log\",\n+                        \"/var/log/apache2/access.log\",  /* Debian and derivatives, Alpine */\n+                        \"/var/log/apache2/access_log\",  /* Gentoo ? */\n+                        \"/var/log/httpd/access_log\",    /* RHEL and derivatives */\n+                        \"/var/log/httpd-access.log\",    /* FreeBSD */\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(apache_access_path_default[i] && access(apache_access_path_default[i], R_OK)){i++;};\n+                    if(!apache_access_path_default[i]){\n+                        collector_error(\"[%s]: Apache access.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(apache_access_path_default[i]);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Nginx_access.log\")){\n+                    const char * const nginx_access_path_default[] = {\n+                        \"/var/log/nginx/access.log\",\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(nginx_access_path_default[i] && access(nginx_access_path_default[i], R_OK)){i++;};\n+                    if(!nginx_access_path_default[i]){\n+                        collector_error(\"[%s]: Nginx access.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(nginx_access_path_default[i]);\n+                }\n+                break;\n+            case FLB_KMSG:\n+            case FLB_SYSTEMD:\n+                p_file_info->filename = strdupz(LOG_PATH_AUTO);\n+                break;\n+            case FLB_DOCKER_EV:\n+                if(access(DOCKER_EV_DEFAULT_PATH, R_OK)){\n+                    collector_error(\"[%s]: Docker socket Unix path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                    return p_file_info_destroy(p_file_info);\n+                } else p_file_info->filename = strdupz(DOCKER_EV_DEFAULT_PATH);\n+                break;\n+            default:\n+                collector_error(\"[%s]: log path invalid or unknown\", p_file_info->chartname);\n+                return p_file_info_destroy(p_file_info);\n+        }\n+    }\n+    p_file_info->file_basename = get_basename(p_file_info->filename); \n+    collector_info(\"[%s]: p_file_info->filename: %s\", p_file_info->chartname, \n+                                            p_file_info->filename ? p_file_info->filename : \"NULL\");\n+    collector_info(\"[%s]: p_file_info->file_basename: %s\", p_file_info->chartname, \n+                                                 p_file_info->file_basename ? p_file_info->file_basename : \"NULL\");\n+    if(unlikely(!p_file_info->filename)) return p_file_info_destroy(p_file_info);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read \"update every\" and \"update timeout\" configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->update_every = appconfig_get_number(   &log_management_config, config_section->name, \n+                                                        \"update every\", g_logs_manag_config.update_every);\n+    collector_info(\"[%s]: update every = %d\", p_file_info->chartname, p_file_info->update_every);\n+\n+    p_file_info->update_timeout = appconfig_get_number( &log_management_config, config_section->name, \n+                                                        \"update timeout\", g_logs_manag_config.update_timeout);\n+    if(p_file_info->update_timeout < p_file_info->update_every) p_file_info->update_timeout = p_file_info->update_every;\n+    collector_info(\"[%s]: update timeout = %d\", p_file_info->chartname, p_file_info->update_timeout);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read \"use log timestamp\" configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->use_log_timestamp = appconfig_get_boolean_ondemand(&log_management_config, config_section->name, \n+                                                                    \"use log timestamp\", \n+                                                                    g_logs_manag_config.use_log_timestamp);\n+    collector_info(\"[%s]: use log timestamp = %s\", p_file_info->chartname, \n+                                                    p_file_info->use_log_timestamp ? \"auto or yes\" : \"no\");\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read compression acceleration configuration.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->compression_accel = appconfig_get_number(  &log_management_config, config_section->name, \n+                                                            \"compression acceleration\", \n+                                                            g_logs_manag_config.compression_acceleration);\n+    collector_info(\"[%s]: compression acceleration = %d\", p_file_info->chartname, p_file_info->compression_accel);",
                "path": "logsmanagement/logsmanag_config.c",
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "original_commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "Should we test for acceleration value received?",
                "created_at": "2023-10-27T03:25:39Z",
                "updated_at": "2023-10-27T03:25:40Z",
                "html_url": "https://github.com/netdata/netdata/pull/13291#discussion_r1374032635",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374032635"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#discussion_r1374032635"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                },
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374032635/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "start_line": null,
                "original_start_line": null,
                "start_side": null,
                "line": 758,
                "original_line": 758,
                "side": "RIGHT",
                "original_position": 758,
                "position": 758,
                "subject_type": "line"
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:25:40Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "a5b3a3a04f83f3a71f73c8f98763ec653057ddec",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T03:19:39Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:25:39Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887186906",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1700941793,
                "node_id": "PRR_kwDOAKPxd85lYk_h",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": null,
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "submitted_at": "2023-10-27T03:25:40Z",
                "state": "commented",
                "html_url": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700941793",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700941793"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:25:40Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "a5b3a3a04f83f3a71f73c8f98763ec653057ddec",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T03:19:39Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:25:40Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887169649",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1700940444,
                "node_id": "PRR_kwDOAKPxd85lYkqc",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": null,
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "submitted_at": "2023-10-27T03:24:15Z",
                "state": "commented",
                "html_url": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700940444",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700940444"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:24:15Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "dd71d0e7de8a54a54ce83a5295df5c56cd9555a7",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T03:19:39Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:24:16Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887169711",
        "type": "PullRequestReviewCommentEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374031656",
                "pull_request_review_id": 1700940444,
                "id": 1374031656,
                "node_id": "PRRC_kwDOAKPxd85R5g8o",
                "diff_hunk": "@@ -0,0 +1,1367 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n+\n+/** @file   logsmanag_config.c\n+ *  @brief  This file includes functions to manage \n+ *          the logs management configuration.\n+ */\n+\n+#include \"logsmanag_config.h\"\n+#include \"db_api.h\"\n+#include \"rrd_api/rrd_api.h\"\n+#include \"helper.h\"\n+\n+g_logs_manag_config_t g_logs_manag_config = {\n+    .update_every = UPDATE_EVERY,\n+    .update_timeout = UPDATE_TIMEOUT_DEFAULT,\n+    .use_log_timestamp = CONFIG_BOOLEAN_AUTO,\n+    .circ_buff_max_size_in_mib = CIRCULAR_BUFF_DEFAULT_MAX_SIZE / (1 MiB),\n+    .circ_buff_drop_logs = CIRCULAR_BUFF_DEFAULT_DROP_LOGS,\n+    .compression_acceleration = COMPRESSION_ACCELERATION_DEFAULT,\n+    .db_mode = GLOBAL_DB_MODE_DEFAULT,\n+    .disk_space_limit_in_mib = DISK_SPACE_LIMIT_DEFAULT,  \n+    .buff_flush_to_db_interval = SAVE_BLOB_TO_DB_DEFAULT,\n+    .enable_collected_logs_total = ENABLE_COLLECTED_LOGS_TOTAL_DEFAULT,\n+    .enable_collected_logs_rate = ENABLE_COLLECTED_LOGS_RATE_DEFAULT\n+};\n+\n+static logs_manag_db_mode_t db_mode_str_to_db_mode(const char *const db_mode_str){\n+    if(!db_mode_str || !*db_mode_str) return g_logs_manag_config.db_mode;\n+    else if(!strcasecmp(db_mode_str, \"full\")) return LOGS_MANAG_DB_MODE_FULL;\n+    else if(!strcasecmp(db_mode_str, \"none\")) return LOGS_MANAG_DB_MODE_NONE;\n+    else return g_logs_manag_config.db_mode;\n+}\n+\n+static struct config log_management_config = {\n+    .first_section = NULL,\n+    .last_section = NULL,\n+    .mutex = NETDATA_MUTEX_INITIALIZER,\n+    .index = {\n+            .avl_tree = {\n+                    .root = NULL,\n+                    .compar = appconfig_section_compare\n+            },\n+            .rwlock = AVL_LOCK_INITIALIZER\n+    }\n+};\n+\n+static struct Chart_meta chart_types[] = {\n+    {.type = FLB_TAIL,      .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_WEB_LOG,   .init = web_log_chart_init,   .update = web_log_chart_update},\n+    {.type = FLB_KMSG,      .init = kernel_chart_init,    .update = kernel_chart_update},\n+    {.type = FLB_SYSTEMD,   .init = systemd_chart_init,   .update = systemd_chart_update},\n+    {.type = FLB_DOCKER_EV, .init = docker_ev_chart_init, .update = docker_ev_chart_update},\n+    {.type = FLB_SYSLOG,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_SERIAL,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_MQTT,      .init = mqtt_chart_init,      .update = mqtt_chart_update}\n+};\n+\n+char *get_user_config_dir(void){\n+    char *dir = getenv(\"NETDATA_USER_CONFIG_DIR\");\n+\n+    return dir ? dir : CONFIG_DIR;\n+}\n+\n+char *get_stock_config_dir(void){\n+    char *dir = getenv(\"NETDATA_STOCK_CONFIG_DIR\");\n+\n+    return dir ? dir : LIBCONFIG_DIR;\n+}\n+\n+char *get_log_dir(void){\n+    char *dir = getenv(\"NETDATA_LOG_DIR\");\n+\n+    return dir ? dir : LOG_DIR;\n+}\n+\n+char *get_cache_dir(void){\n+    char *dir = getenv(\"NETDATA_CACHE_DIR\");\n+\n+    return dir ? dir : CACHE_DIR;\n+}\n+\n+/** \n+ * @brief Cleanup p_file_info struct\n+ * @param p_file_info The struct of File_info type to be cleaned up.\n+ * @todo  Pass p_file_info by reference, so that it can be set to NULL. */\n+static void p_file_info_destroy(struct File_info *p_file_info){\n+\n+    // TODO: Clean up rrd / chart stuff.\n+\n+    if(unlikely(!p_file_info)){\n+        collector_info(\"p_file_info_destroy() called but p_file_info == NULL - already destroyed?\");\n+        return;\n+    }\n+\n+    char chartname[100];\n+    snprintfz(chartname, 100, \"%s\", p_file_info->chartname ? p_file_info->chartname : \"Unknown\");\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup...\", chartname);\n+\n+    __atomic_store_n(&p_file_info->state, LOG_SRC_EXITING, __ATOMIC_RELAXED);\n+\n+    if(uv_is_active((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer)){\n+        uv_timer_stop(&p_file_info->flb_tmp_buff_cpy_timer);\n+        if (!uv_is_closing((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer))\n+            uv_close((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer, NULL);\n+    }\n+\n+    // TODO: Need to do proper termination of DB threads and allocated memory.\n+    if(p_file_info->db_writer_thread){\n+        uv_thread_join(p_file_info->db_writer_thread);\n+        sqlite3_close(p_file_info->db);\n+        uv_mutex_destroy(p_file_info->db_mut);\n+        freez((void *) p_file_info->db_metadata);\n+        freez((void *) p_file_info->db_dir);\n+        freez(p_file_info->db_writer_thread);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_asc);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_desc);\n+    }\n+\n+    freez((void *) p_file_info->chartname);\n+    freez(p_file_info->filename);\n+    freez((void *) p_file_info->file_basename);\n+    freez((void *) p_file_info->stream_guid);\n+\n+    for(int i = 1; i <= BLOB_MAX_FILES; i++){\n+        if(p_file_info->blob_handles[i]){\n+            uv_fs_close(NULL, NULL, p_file_info->blob_handles[i], NULL);\n+            p_file_info->blob_handles[i] = 0;\n+        }\n+    }\n+\n+    if(p_file_info->circ_buff) \n+        circ_buff_destroy(p_file_info->circ_buff);\n+    \n+    if(p_file_info->parser_metrics){\n+        switch(p_file_info->log_type){\n+            case FLB_WEB_LOG: {\n+                if(p_file_info->parser_metrics->web_log)\n+                    freez(p_file_info->parser_metrics->web_log);\n+                break;\n+            }\n+            case FLB_KMSG: {\n+                if(p_file_info->parser_metrics->kernel){\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->subsystem);\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->device);\n+                    freez(p_file_info->parser_metrics->kernel);\n+                }\n+                break;\n+            }\n+            case FLB_SYSTEMD: \n+            case FLB_SYSLOG: {\n+                if(p_file_info->parser_metrics->systemd)\n+                    freez(p_file_info->parser_metrics->systemd);\n+                break;\n+            }\n+            case FLB_DOCKER_EV: {\n+                if(p_file_info->parser_metrics->docker_ev)\n+                    freez(p_file_info->parser_metrics->docker_ev);\n+                break;\n+            }\n+            case FLB_MQTT: {\n+                if(p_file_info->parser_metrics->mqtt){\n+                    dictionary_destroy(p_file_info->parser_metrics->mqtt->topic);\n+                    freez(p_file_info->parser_metrics->mqtt);\n+                }\n+                break;\n+            }\n+            default:\n+                break;\n+        }   \n+\n+        for(int i = 0; p_file_info->parser_cus_config && \n+                       p_file_info->parser_metrics->parser_cus && \n+                       p_file_info->parser_cus_config[i]; i++){\n+            freez(p_file_info->parser_cus_config[i]->chartname);\n+            freez(p_file_info->parser_cus_config[i]->regex_str);\n+            freez(p_file_info->parser_cus_config[i]->regex_name);\n+            regfree(&p_file_info->parser_cus_config[i]->regex);\n+            freez(p_file_info->parser_cus_config[i]);\n+            freez(p_file_info->parser_metrics->parser_cus[i]);\n+        }    \n+\n+        freez(p_file_info->parser_cus_config);\n+        freez(p_file_info->parser_metrics->parser_cus);\n+\n+        freez(p_file_info->parser_metrics);\n+    }\n+\n+    if(p_file_info->parser_config){\n+        freez(p_file_info->parser_config->gen_config);\n+        freez(p_file_info->parser_config);\n+    }\n+\n+    Flb_output_config_t *output_next = p_file_info->flb_outputs;\n+    while(output_next){\n+        Flb_output_config_t *output = output_next;\n+        output_next = output_next->next;\n+\n+        struct flb_output_config_param *param_next = output->param;\n+        while(param_next){\n+            struct flb_output_config_param *param = param_next;\n+            param_next = param->next;\n+            freez(param->key);\n+            freez(param->val);\n+            freez(param);\n+        }\n+        freez(output->plugin);\n+        freez(output);\n+    }\n+    \n+    freez(p_file_info);\n+\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup done\", chartname);\n+}\n+\n+void p_file_info_destroy_all(void){\n+    if(p_file_infos_arr){\n+        for(int i = 0; i < p_file_infos_arr->count; i++) \n+            p_file_info_destroy(p_file_infos_arr->data[i]);\n+        freez(p_file_infos_arr);\n+        p_file_infos_arr = NULL;\n+    }\n+}\n+\n+/**\n+ * @brief Load logs management configuration.\n+ * @returns  0 if success, \n+ *          -1 if disabled in global config, \n+ *          -2 if config file not found\n+ *          -3 if p_flb_srvc_config if is NULL (no flb_srvc_config_t provided)\n+ */\n+int logs_manag_config_load( flb_srvc_config_t *p_flb_srvc_config, \n+                            Flb_socket_config_t **forward_in_config_p,\n+                            int g_update_every){\n+    int rc = LOGS_MANAG_CONFIG_LOAD_ERROR_OK;\n+    char section[100];\n+    char temp_path[FILENAME_MAX + 1];\n+\n+    struct config logsmanagement_d_conf = {\n+        .first_section = NULL,\n+        .last_section = NULL,\n+        .mutex = NETDATA_MUTEX_INITIALIZER,\n+        .index = {\n+                .avl_tree = {\n+                        .root = NULL,\n+                        .compar = appconfig_section_compare\n+                },\n+                .rwlock = AVL_LOCK_INITIALIZER\n+        }\n+    };\n+\n+    char *filename = strdupz_path_subpath(get_user_config_dir(), \"logsmanagement.d.conf\");\n+    if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)) {\n+        collector_info(\"CONFIG: cannot load user config '%s'. Will try stock config.\", filename);\n+        freez(filename);\n+\n+        filename = strdupz_path_subpath(get_stock_config_dir(), \"logsmanagement.d.conf\");\n+        if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)){\n+            collector_error(\"CONFIG: cannot load stock config '%s'. Logs management will be disabled.\", filename);\n+            rc = LOGS_MANAG_CONFIG_LOAD_ERROR_NO_STOCK_CONFIG;\n+        }\n+    }\n+    freez(filename);\n+    \n+\n+    /* [global] section */\n+\n+    snprintfz(section, 100, \"global\");\n+\n+    if(!appconfig_get_boolean(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"enabled\", \n+            ENABLE_LOGS_MANAGEMENT_DEFAULT)){\n+        collector_info(\"CONFIG: Logs management disabled due to configuration option.\");\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_DISABLED;\n+    }\n+\n+    g_logs_manag_config.update_every = appconfig_get_number(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"update every\", \n+        g_logs_manag_config.update_every);\n+    \n+    g_logs_manag_config.update_every = \n+        g_update_every && g_update_every > g_logs_manag_config.update_every ? \n+        g_update_every : g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.update_timeout = appconfig_get_number(  \n+        &logsmanagement_d_conf, \n+        section, \n+        \"update timeout\", \n+        UPDATE_TIMEOUT_DEFAULT);\n+\n+    if(g_logs_manag_config.update_timeout < g_logs_manag_config.update_every) \n+        g_logs_manag_config.update_timeout = g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.use_log_timestamp = appconfig_get_boolean_ondemand( \n+        &logsmanagement_d_conf,\n+        section,\n+        \"use log timestamp\", \n+        g_logs_manag_config.use_log_timestamp);\n+    \n+    g_logs_manag_config.circ_buff_max_size_in_mib = appconfig_get_number(   \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer max size MiB\", \n+        g_logs_manag_config.circ_buff_max_size_in_mib);\n+    \n+    g_logs_manag_config.circ_buff_drop_logs = appconfig_get_boolean(    \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer drop logs if full\", \n+        g_logs_manag_config.circ_buff_drop_logs);\n+    \n+\n+    g_logs_manag_config.compression_acceleration = appconfig_get_number(    \n+        &logsmanagement_d_conf,\n+        section,\n+        \"compression acceleration\", \n+        g_logs_manag_config.compression_acceleration);\n+\n+    g_logs_manag_config.enable_collected_logs_total = appconfig_get_boolean(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"collected logs total chart enable\", \n+        g_logs_manag_config.enable_collected_logs_total);\n+\n+    g_logs_manag_config.enable_collected_logs_rate = appconfig_get_boolean(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"collected logs rate chart enable\", \n+        g_logs_manag_config.enable_collected_logs_rate);\n+    \n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] update every: %d\",                       section,  g_logs_manag_config.update_every);\n+        collector_info(\"CONFIG: [%s] update timeout: %d\",                     section,  g_logs_manag_config.update_timeout);\n+        collector_info(\"CONFIG: [%s] use log timestamp: %d\",                  section,  g_logs_manag_config.use_log_timestamp);\n+        collector_info(\"CONFIG: [%s] circular buffer max size MiB: %d\",       section,  g_logs_manag_config.circ_buff_max_size_in_mib);\n+        collector_info(\"CONFIG: [%s] circular buffer drop logs if full: %d\",  section,  g_logs_manag_config.circ_buff_drop_logs);\n+        collector_info(\"CONFIG: [%s] compression acceleration: %d\",           section,  g_logs_manag_config.compression_acceleration);\n+        collector_info(\"CONFIG: [%s] collected logs total chart enable: %d\",  section,  g_logs_manag_config.enable_collected_logs_total);\n+        collector_info(\"CONFIG: [%s] collected logs rate chart enable: %d\",   section,  g_logs_manag_config.enable_collected_logs_rate);\n+    }\n+\n+\n+    /* [db] section */\n+\n+    snprintfz(section, 100, \"db\");\n+\n+    const char *const db_mode_str = appconfig_get(\n+        &logsmanagement_d_conf,\n+        section,\n+        \"db mode\",\n+        GLOBAL_DB_MODE_DEFAULT_STR);\n+    g_logs_manag_config.db_mode = db_mode_str_to_db_mode(db_mode_str);\n+\n+    snprintfz(temp_path, FILENAME_MAX, \"%s\" LOGS_MANAG_DB_SUBPATH, get_cache_dir());\n+    db_set_main_dir(appconfig_get(&logsmanagement_d_conf, section, \"db dir\", temp_path));\n+\n+    g_logs_manag_config.buff_flush_to_db_interval = appconfig_get_number(  \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer flush to db\", \n+        g_logs_manag_config.buff_flush_to_db_interval);\n+    \n+    g_logs_manag_config.disk_space_limit_in_mib = appconfig_get_number(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"disk space limit MiB\", \n+        g_logs_manag_config.disk_space_limit_in_mib);\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] db mode: %s [%d]\",                 section, db_mode_str, (int) g_logs_manag_config.db_mode);\n+        collector_info(\"CONFIG: [%s] db dir: %s\",                       section, temp_path);\n+        collector_info(\"CONFIG: [%s] circular buffer flush to db: %d\",  section, g_logs_manag_config.buff_flush_to_db_interval);\n+        collector_info(\"CONFIG: [%s] disk space limit MiB: %d\",         section, g_logs_manag_config.disk_space_limit_in_mib);\n+    }\n+\n+\n+    /* [forward input] section */\n+\n+    snprintfz(section, 100, \"forward input\");\n+\n+    const int fwd_enable = appconfig_get_boolean(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"enabled\", \n+        CONFIG_BOOLEAN_NO);\n+    \n+    *forward_in_config_p = (Flb_socket_config_t *) callocz(1, sizeof(Flb_socket_config_t));\n+\n+    (*forward_in_config_p)->unix_path = appconfig_get(\n+        &logsmanagement_d_conf,\n+        section, \n+        \"unix path\", \n+        FLB_FORWARD_UNIX_PATH_DEFAULT);\n+    \n+    (*forward_in_config_p)->unix_perm = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"unix perm\", \n+        FLB_FORWARD_UNIX_PERM_DEFAULT);\n+    \n+    // TODO: Check if listen is in valid format\n+    (*forward_in_config_p)->listen = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section,\n+        \"listen\", \n+        FLB_FORWARD_ADDR_DEFAULT);\n+    \n+    (*forward_in_config_p)->port = appconfig_get(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"port\", \n+        FLB_FORWARD_PORT_DEFAULT);\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] enabled: %s\",      section, fwd_enable ? \"yes\" : \"no\");\n+        collector_info(\"CONFIG: [%s] unix path: %s\",    section, (*forward_in_config_p)->unix_path);\n+        collector_info(\"CONFIG: [%s] unix perm: %s\",    section, (*forward_in_config_p)->unix_perm);\n+        collector_info(\"CONFIG: [%s] listen: %s\",       section, (*forward_in_config_p)->listen);\n+        collector_info(\"CONFIG: [%s] port: %s\",         section, (*forward_in_config_p)->port);\n+    }\n+\n+    if(!fwd_enable) {\n+        freez(*forward_in_config_p);\n+        *forward_in_config_p = NULL;\n+    }\n+\n+\n+    /* [fluent bit] section */\n+\n+    snprintfz(section, 100, \"fluent bit\");\n+\n+    snprintfz(temp_path, FILENAME_MAX, \"%s/%s\", get_log_dir(), FLB_LOG_FILENAME_DEFAULT);\n+    \n+    if(p_flb_srvc_config){\n+        p_flb_srvc_config->flush = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"flush\", \n+            p_flb_srvc_config->flush);\n+        \n+        p_flb_srvc_config->http_listen = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http listen\", \n+            p_flb_srvc_config->http_listen);\n+\n+        p_flb_srvc_config->http_port = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http port\", \n+            p_flb_srvc_config->http_port);\n+        \n+        p_flb_srvc_config->http_server = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"http server\", \n+            p_flb_srvc_config->http_server);\n+        \n+        p_flb_srvc_config->log_path = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"log file\", \n+            temp_path);\n+        \n+        p_flb_srvc_config->log_level = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"log level\", \n+            p_flb_srvc_config->log_level);\n+        \n+        p_flb_srvc_config->coro_stack_size = appconfig_get(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"coro stack size\", \n+            p_flb_srvc_config->coro_stack_size);\n+    }\n+    else\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_P_FLB_SRVC_NULL;\n+\n+    if(!rc){\n+        collector_info(\"CONFIG: [%s] flush: %s\", section, p_flb_srvc_config->flush);\n+        collector_info(\"CONFIG: [%s] http listen: %s\", section, p_flb_srvc_config->http_listen);\n+        collector_info(\"CONFIG: [%s] http port: %s\", section, p_flb_srvc_config->http_port);\n+        collector_info(\"CONFIG: [%s] http server: %s\", section, p_flb_srvc_config->http_server);\n+        collector_info(\"CONFIG: [%s] log file: %s\", section, p_flb_srvc_config->log_path);\n+        collector_info(\"CONFIG: [%s] log level: %s\", section, p_flb_srvc_config->log_level);\n+        collector_info(\"CONFIG: [%s] coro stack size: %s\", section, p_flb_srvc_config->coro_stack_size);\n+    }\n+\n+    return rc;\n+}\n+\n+static bool metrics_dict_conflict_cb(const DICTIONARY_ITEM *item __maybe_unused, void *old_value, void *new_value, void *data __maybe_unused){\n+    ((metrics_dict_item_t *)old_value)->num_new += ((metrics_dict_item_t *)new_value)->num_new;\n+    return true;\n+}\n+\n+#define FLB_OUTPUT_PLUGIN_NAME_KEY \"name\"\n+\n+static int flb_output_param_get_cb(void *entry, void *data){\n+    struct config_option *option = (struct config_option *) entry;\n+    Flb_output_config_t *flb_output = (Flb_output_config_t *) data;\n+    \n+    char *param_prefix = callocz(1, snprintf(NULL, 0, \"output %d\", MAX_OUTPUTS_PER_SOURCE) + 1);\n+    sprintf(param_prefix, \"output %d\", flb_output->id);\n+    size_t param_prefix_len = strlen(param_prefix);\n+    \n+    if(!strncasecmp(option->name, param_prefix, param_prefix_len)){ // param->name looks like \"output 1 host\"\n+        char *param_key = &option->name[param_prefix_len]; // param_key should look like \" host\"\n+        while(*param_key == ' ') param_key++; // remove whitespace so it looks like \"host\"\n+        \n+        if(*param_key && strcasecmp(param_key, FLB_OUTPUT_PLUGIN_NAME_KEY)){ // ignore param_key \"name\" \n+            // debug_log( \"config_option: name[%s], value[%s]\", option->name, option->value);\n+            // debug_log( \"config option kv:[%s][%s]\", param_key, option->value);\n+\n+            struct flb_output_config_param **p = &flb_output->param;\n+            while((*p) != NULL) p = &((*p)->next); // Go to last param of linked list\n+\n+            (*p) = callocz(1, sizeof(struct flb_output_config_param));\n+            (*p)->key = strdupz(param_key);\n+            (*p)->val = strdupz(option->value);\n+        }\n+    }\n+\n+    freez(param_prefix);\n+\n+    return 0;\n+}\n+\n+/**\n+ * @brief Initialize logs management based on a section configuration.\n+ * @note On error, calls p_file_info_destroy() to clean up before returning. \n+ * @param config_section Section to read configuration from.\n+ * @todo How to handle duplicate entries?\n+ */\n+static void config_section_init(uv_loop_t *main_loop,\n+                                struct section *config_section, \n+                                Flb_socket_config_t *forward_in_config,\n+                                flb_srvc_config_t *p_flb_srvc_config,\n+                                netdata_mutex_t *stdout_mut){\n+\n+    struct File_info *p_file_info = callocz(1, sizeof(struct File_info));\n+\n+    /* -------------------------------------------------------------------------\n+     * Check if config_section->name is valid and if so, use it as chartname.\n+     * ------------------------------------------------------------------------- */\n+    if(config_section->name && *config_section->name){\n+        p_file_info->chartname = strdupz(config_section->name);\n+        netdata_fix_chart_id((char *) p_file_info->chartname);\n+        collector_info(\"[%s]: Initializing config loading\", p_file_info->chartname);\n+    } else {\n+        collector_error(\"Invalid logs management config section.\");\n+        return p_file_info_destroy(p_file_info);\n+    }\n+    \n+\n+    /* -------------------------------------------------------------------------\n+     * Check if this log source is enabled.\n+     * ------------------------------------------------------------------------- */\n+    if(appconfig_get_boolean(&log_management_config, config_section->name, \"enabled\", CONFIG_BOOLEAN_NO)){\n+        collector_info(\"[%s]: enabled = yes\", p_file_info->chartname);\n+    } else {\n+        collector_info(\"[%s]: enabled = no\", p_file_info->chartname);\n+        return p_file_info_destroy(p_file_info);\n+    }\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Check log type.\n+     * ------------------------------------------------------------------------- */\n+    char *type = appconfig_get(&log_management_config, config_section->name, \"log type\", \"flb_tail\");\n+    if(!type || !*type) p_file_info->log_type = FLB_TAIL; // Default\n+    else{\n+        if(!strcasecmp(type, \"flb_tail\")) p_file_info->log_type = FLB_TAIL;\n+        else if (!strcasecmp(type, \"flb_web_log\")) p_file_info->log_type = FLB_WEB_LOG;\n+        else if (!strcasecmp(type, \"flb_kmsg\")) p_file_info->log_type = FLB_KMSG;\n+        else if (!strcasecmp(type, \"flb_systemd\")) p_file_info->log_type = FLB_SYSTEMD;\n+        else if (!strcasecmp(type, \"flb_docker_events\")) p_file_info->log_type = FLB_DOCKER_EV;\n+        else if (!strcasecmp(type, \"flb_syslog\")) p_file_info->log_type = FLB_SYSLOG;\n+        else if (!strcasecmp(type, \"flb_serial\")) p_file_info->log_type = FLB_SERIAL;\n+        else if (!strcasecmp(type, \"flb_mqtt\")) p_file_info->log_type = FLB_MQTT;\n+        else p_file_info->log_type = FLB_TAIL;\n+    }\n+    freez(type);\n+    collector_info(\"[%s]: log type = %s\", p_file_info->chartname, log_src_type_t_str[p_file_info->log_type]);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read log source.\n+     * ------------------------------------------------------------------------- */\n+    char *source = appconfig_get(&log_management_config, config_section->name, \"log source\", \"local\");\n+    if(!source || !*source) p_file_info->log_source = LOG_SOURCE_LOCAL; // Default\n+    else if(!strcasecmp(source, \"forward\")) p_file_info->log_source = LOG_SOURCE_FORWARD;\n+    else p_file_info->log_source = LOG_SOURCE_LOCAL;\n+    freez(source);\n+    collector_info(\"[%s]: log source = %s\", p_file_info->chartname, log_src_t_str[p_file_info->log_source]);\n+\n+    if(p_file_info->log_source == LOG_SOURCE_FORWARD && !forward_in_config){\n+        collector_info(\"[%s]: forward_in_config == NULL - this log source will be disabled\", p_file_info->chartname);\n+        return p_file_info_destroy(p_file_info);\n+    }\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read stream uuid.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->stream_guid = appconfig_get(&log_management_config, config_section->name, \"stream guid\", \"\");\n+    collector_info(\"[%s]: stream guid = %s\", p_file_info->chartname, p_file_info->stream_guid);\n+\n+\n+    /* -------------------------------------------------------------------------\n+     * Read log path configuration and check if it is valid.\n+     * ------------------------------------------------------------------------- */\n+    p_file_info->filename = appconfig_get(&log_management_config, config_section->name, \"log path\", LOG_PATH_AUTO);\n+    if( /* path doesn't matter when log source is not local */\n+        (p_file_info->log_source == LOG_SOURCE_LOCAL) &&\n+        \n+        /* FLB_SYSLOG is special case, may or may not require a path */\n+        (p_file_info->log_type != FLB_SYSLOG) &&\n+\n+        /* FLB_MQTT is special case, does not require a path */\n+        (p_file_info->log_type != FLB_MQTT) &&\n+        \n+        (!p_file_info->filename /* Sanity check */ || \n+         !*p_file_info->filename || \n+         !strcmp(p_file_info->filename, LOG_PATH_AUTO) || \n+         access(p_file_info->filename, R_OK)\n+        )){ \n+\n+        freez(p_file_info->filename);\n+        p_file_info->filename = NULL;\n+            \n+        switch(p_file_info->log_type){\n+            case FLB_TAIL:\n+                if(!strcasecmp(p_file_info->chartname, \"Netdata_error.log\")){\n+                    char path[FILENAME_MAX + 1];\n+                    snprintfz(path, FILENAME_MAX, \"%s/error.log\", get_log_dir());\n+                    if(access(path, R_OK)) {\n+                        collector_error(\"[%s]: 'Netdata_error.log' path (%s) invalid, unknown or needs permissions\", \n+                            p_file_info->chartname, path);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(path);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Netdata_fluentbit.log\")){\n+                    if(access(p_flb_srvc_config->log_path, R_OK)){\n+                        collector_error(\"[%s]: Netdata_fluentbit.log path (%s) invalid, unknown or needs permissions\", \n+                            p_file_info->chartname, p_flb_srvc_config->log_path);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(p_flb_srvc_config->log_path);\n+                } else if(!strcasecmp(p_file_info->chartname, \"Auth.log_tail\")){\n+                    const char * const auth_path_default[] = {\n+                        \"/var/log/auth.log\",\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(auth_path_default[i] && access(auth_path_default[i], R_OK)){i++;};\n+                    if(!auth_path_default[i]){\n+                        collector_error(\"[%s]: auth.log path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(auth_path_default[i]);\n+                } else if(!strcasecmp(p_file_info->chartname, \"syslog_tail\")){\n+                    const char * const syslog_path_default[] = {\n+                        \"/var/log/syslog\",   /* Debian, Ubuntu */\n+                        \"/var/log/messages\", /* RHEL, Red Hat, CentOS, Fedora */\n+                        NULL\n+                    };\n+                    int i = 0;\n+                    while(syslog_path_default[i] && access(syslog_path_default[i], R_OK)){i++;};\n+                    if(!syslog_path_default[i]){\n+                        collector_error(\"[%s]: syslog path invalid, unknown or needs permissions\", p_file_info->chartname);\n+                        return p_file_info_destroy(p_file_info);\n+                    } else p_file_info->filename = strdupz(syslog_path_default[i]);\n+                }\n+                break;\n+            case FLB_WEB_LOG:\n+                if(!strcasecmp(p_file_info->chartname, \"Apache_access.log\")){\n+                    const char * const apache_access_path_default[] = {\n+                        \"/var/log/apache/access.log\",\n+                        \"/var/log/apache2/access.log\",  /* Debian and derivatives, Alpine */\n+                        \"/var/log/apache2/access_log\",  /* Gentoo ? */\n+                        \"/var/log/httpd/access_log\",    /* RHEL and derivatives */",
                "path": "logsmanagement/logsmanag_config.c",
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "original_commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "In reality, this is the default Apache log [file](https://httpd.apache.org/docs/2.4/logs.html), and it does not have relationship with RHEL.",
                "created_at": "2023-10-27T03:24:14Z",
                "updated_at": "2023-10-27T03:24:15Z",
                "html_url": "https://github.com/netdata/netdata/pull/13291#discussion_r1374031656",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374031656"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#discussion_r1374031656"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                },
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374031656/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "start_line": null,
                "original_start_line": null,
                "start_side": null,
                "line": 683,
                "original_line": 683,
                "side": "RIGHT",
                "original_position": 683,
                "position": 683,
                "subject_type": "line"
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:24:15Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "dd71d0e7de8a54a54ce83a5295df5c56cd9555a7",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T03:19:39Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:24:14Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32887112128",
        "type": "PushEvent",
        "actor": {
            "id": 2662304,
            "login": "ktsaou",
            "display_login": "ktsaou",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ktsaou",
            "avatar_url": "https://avatars.githubusercontent.com/u/2662304?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "repository_id": 10744183,
            "push_id": 15585949844,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/master",
            "head": "4071d1a3ff3c5efe6260f795ff6ea98455698be6",
            "before": "bd8dc71c296c1803811de27a32683e156479f168",
            "commits": [
                {
                    "sha": "4071d1a3ff3c5efe6260f795ff6ea98455698be6",
                    "author": {
                        "email": "costa@netdata.cloud",
                        "name": "Costa Tsaousis"
                    },
                    "message": "Update README.md",
                    "distinct": true,
                    "url": "https://api.github.com/repos/netdata/netdata/commits/4071d1a3ff3c5efe6260f795ff6ea98455698be6"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-27T03:19:40Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32886998383",
        "type": "PullRequestReviewCommentEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374025332",
                "pull_request_review_id": 1700931778,
                "id": 1374025332,
                "node_id": "PRRC_kwDOAKPxd85R5fZ0",
                "diff_hunk": "@@ -0,0 +1,1367 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n+\n+/** @file   logsmanag_config.c\n+ *  @brief  This file includes functions to manage \n+ *          the logs management configuration.\n+ */\n+\n+#include \"logsmanag_config.h\"\n+#include \"db_api.h\"\n+#include \"rrd_api/rrd_api.h\"\n+#include \"helper.h\"\n+\n+g_logs_manag_config_t g_logs_manag_config = {\n+    .update_every = UPDATE_EVERY,\n+    .update_timeout = UPDATE_TIMEOUT_DEFAULT,\n+    .use_log_timestamp = CONFIG_BOOLEAN_AUTO,\n+    .circ_buff_max_size_in_mib = CIRCULAR_BUFF_DEFAULT_MAX_SIZE / (1 MiB),\n+    .circ_buff_drop_logs = CIRCULAR_BUFF_DEFAULT_DROP_LOGS,\n+    .compression_acceleration = COMPRESSION_ACCELERATION_DEFAULT,\n+    .db_mode = GLOBAL_DB_MODE_DEFAULT,\n+    .disk_space_limit_in_mib = DISK_SPACE_LIMIT_DEFAULT,  \n+    .buff_flush_to_db_interval = SAVE_BLOB_TO_DB_DEFAULT,\n+    .enable_collected_logs_total = ENABLE_COLLECTED_LOGS_TOTAL_DEFAULT,\n+    .enable_collected_logs_rate = ENABLE_COLLECTED_LOGS_RATE_DEFAULT\n+};\n+\n+static logs_manag_db_mode_t db_mode_str_to_db_mode(const char *const db_mode_str){\n+    if(!db_mode_str || !*db_mode_str) return g_logs_manag_config.db_mode;\n+    else if(!strcasecmp(db_mode_str, \"full\")) return LOGS_MANAG_DB_MODE_FULL;\n+    else if(!strcasecmp(db_mode_str, \"none\")) return LOGS_MANAG_DB_MODE_NONE;\n+    else return g_logs_manag_config.db_mode;\n+}\n+\n+static struct config log_management_config = {\n+    .first_section = NULL,\n+    .last_section = NULL,\n+    .mutex = NETDATA_MUTEX_INITIALIZER,\n+    .index = {\n+            .avl_tree = {\n+                    .root = NULL,\n+                    .compar = appconfig_section_compare\n+            },\n+            .rwlock = AVL_LOCK_INITIALIZER\n+    }\n+};\n+\n+static struct Chart_meta chart_types[] = {\n+    {.type = FLB_TAIL,      .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_WEB_LOG,   .init = web_log_chart_init,   .update = web_log_chart_update},\n+    {.type = FLB_KMSG,      .init = kernel_chart_init,    .update = kernel_chart_update},\n+    {.type = FLB_SYSTEMD,   .init = systemd_chart_init,   .update = systemd_chart_update},\n+    {.type = FLB_DOCKER_EV, .init = docker_ev_chart_init, .update = docker_ev_chart_update},\n+    {.type = FLB_SYSLOG,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_SERIAL,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_MQTT,      .init = mqtt_chart_init,      .update = mqtt_chart_update}\n+};\n+\n+char *get_user_config_dir(void){\n+    char *dir = getenv(\"NETDATA_USER_CONFIG_DIR\");\n+\n+    return dir ? dir : CONFIG_DIR;\n+}\n+\n+char *get_stock_config_dir(void){\n+    char *dir = getenv(\"NETDATA_STOCK_CONFIG_DIR\");\n+\n+    return dir ? dir : LIBCONFIG_DIR;\n+}\n+\n+char *get_log_dir(void){\n+    char *dir = getenv(\"NETDATA_LOG_DIR\");\n+\n+    return dir ? dir : LOG_DIR;\n+}\n+\n+char *get_cache_dir(void){\n+    char *dir = getenv(\"NETDATA_CACHE_DIR\");\n+\n+    return dir ? dir : CACHE_DIR;\n+}\n+\n+/** \n+ * @brief Cleanup p_file_info struct\n+ * @param p_file_info The struct of File_info type to be cleaned up.\n+ * @todo  Pass p_file_info by reference, so that it can be set to NULL. */\n+static void p_file_info_destroy(struct File_info *p_file_info){\n+\n+    // TODO: Clean up rrd / chart stuff.\n+\n+    if(unlikely(!p_file_info)){\n+        collector_info(\"p_file_info_destroy() called but p_file_info == NULL - already destroyed?\");\n+        return;\n+    }\n+\n+    char chartname[100];\n+    snprintfz(chartname, 100, \"%s\", p_file_info->chartname ? p_file_info->chartname : \"Unknown\");\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup...\", chartname);\n+\n+    __atomic_store_n(&p_file_info->state, LOG_SRC_EXITING, __ATOMIC_RELAXED);\n+\n+    if(uv_is_active((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer)){\n+        uv_timer_stop(&p_file_info->flb_tmp_buff_cpy_timer);\n+        if (!uv_is_closing((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer))\n+            uv_close((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer, NULL);\n+    }\n+\n+    // TODO: Need to do proper termination of DB threads and allocated memory.\n+    if(p_file_info->db_writer_thread){\n+        uv_thread_join(p_file_info->db_writer_thread);\n+        sqlite3_close(p_file_info->db);\n+        uv_mutex_destroy(p_file_info->db_mut);\n+        freez((void *) p_file_info->db_metadata);\n+        freez((void *) p_file_info->db_dir);\n+        freez(p_file_info->db_writer_thread);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_asc);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_desc);\n+    }\n+\n+    freez((void *) p_file_info->chartname);\n+    freez(p_file_info->filename);\n+    freez((void *) p_file_info->file_basename);\n+    freez((void *) p_file_info->stream_guid);\n+\n+    for(int i = 1; i <= BLOB_MAX_FILES; i++){\n+        if(p_file_info->blob_handles[i]){\n+            uv_fs_close(NULL, NULL, p_file_info->blob_handles[i], NULL);\n+            p_file_info->blob_handles[i] = 0;\n+        }\n+    }\n+\n+    if(p_file_info->circ_buff) \n+        circ_buff_destroy(p_file_info->circ_buff);\n+    \n+    if(p_file_info->parser_metrics){\n+        switch(p_file_info->log_type){\n+            case FLB_WEB_LOG: {\n+                if(p_file_info->parser_metrics->web_log)\n+                    freez(p_file_info->parser_metrics->web_log);\n+                break;\n+            }\n+            case FLB_KMSG: {\n+                if(p_file_info->parser_metrics->kernel){\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->subsystem);\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->device);\n+                    freez(p_file_info->parser_metrics->kernel);\n+                }\n+                break;\n+            }\n+            case FLB_SYSTEMD: \n+            case FLB_SYSLOG: {\n+                if(p_file_info->parser_metrics->systemd)\n+                    freez(p_file_info->parser_metrics->systemd);\n+                break;\n+            }\n+            case FLB_DOCKER_EV: {\n+                if(p_file_info->parser_metrics->docker_ev)\n+                    freez(p_file_info->parser_metrics->docker_ev);\n+                break;\n+            }\n+            case FLB_MQTT: {\n+                if(p_file_info->parser_metrics->mqtt){\n+                    dictionary_destroy(p_file_info->parser_metrics->mqtt->topic);\n+                    freez(p_file_info->parser_metrics->mqtt);\n+                }\n+                break;\n+            }\n+            default:\n+                break;\n+        }   \n+\n+        for(int i = 0; p_file_info->parser_cus_config && \n+                       p_file_info->parser_metrics->parser_cus && \n+                       p_file_info->parser_cus_config[i]; i++){\n+            freez(p_file_info->parser_cus_config[i]->chartname);\n+            freez(p_file_info->parser_cus_config[i]->regex_str);\n+            freez(p_file_info->parser_cus_config[i]->regex_name);\n+            regfree(&p_file_info->parser_cus_config[i]->regex);\n+            freez(p_file_info->parser_cus_config[i]);\n+            freez(p_file_info->parser_metrics->parser_cus[i]);\n+        }    \n+\n+        freez(p_file_info->parser_cus_config);\n+        freez(p_file_info->parser_metrics->parser_cus);\n+\n+        freez(p_file_info->parser_metrics);\n+    }\n+\n+    if(p_file_info->parser_config){\n+        freez(p_file_info->parser_config->gen_config);\n+        freez(p_file_info->parser_config);\n+    }\n+\n+    Flb_output_config_t *output_next = p_file_info->flb_outputs;\n+    while(output_next){\n+        Flb_output_config_t *output = output_next;\n+        output_next = output_next->next;\n+\n+        struct flb_output_config_param *param_next = output->param;\n+        while(param_next){\n+            struct flb_output_config_param *param = param_next;\n+            param_next = param->next;\n+            freez(param->key);\n+            freez(param->val);\n+            freez(param);\n+        }\n+        freez(output->plugin);\n+        freez(output);\n+    }\n+    \n+    freez(p_file_info);\n+\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup done\", chartname);\n+}\n+\n+void p_file_info_destroy_all(void){\n+    if(p_file_infos_arr){\n+        for(int i = 0; i < p_file_infos_arr->count; i++) \n+            p_file_info_destroy(p_file_infos_arr->data[i]);\n+        freez(p_file_infos_arr);\n+        p_file_infos_arr = NULL;\n+    }\n+}\n+\n+/**\n+ * @brief Load logs management configuration.\n+ * @returns  0 if success, \n+ *          -1 if disabled in global config, \n+ *          -2 if config file not found\n+ *          -3 if p_flb_srvc_config if is NULL (no flb_srvc_config_t provided)\n+ */\n+int logs_manag_config_load( flb_srvc_config_t *p_flb_srvc_config, \n+                            Flb_socket_config_t **forward_in_config_p,\n+                            int g_update_every){\n+    int rc = LOGS_MANAG_CONFIG_LOAD_ERROR_OK;\n+    char section[100];\n+    char temp_path[FILENAME_MAX + 1];\n+\n+    struct config logsmanagement_d_conf = {\n+        .first_section = NULL,\n+        .last_section = NULL,\n+        .mutex = NETDATA_MUTEX_INITIALIZER,\n+        .index = {\n+                .avl_tree = {\n+                        .root = NULL,\n+                        .compar = appconfig_section_compare\n+                },\n+                .rwlock = AVL_LOCK_INITIALIZER\n+        }\n+    };\n+\n+    char *filename = strdupz_path_subpath(get_user_config_dir(), \"logsmanagement.d.conf\");\n+    if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)) {\n+        collector_info(\"CONFIG: cannot load user config '%s'. Will try stock config.\", filename);\n+        freez(filename);\n+\n+        filename = strdupz_path_subpath(get_stock_config_dir(), \"logsmanagement.d.conf\");\n+        if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)){\n+            collector_error(\"CONFIG: cannot load stock config '%s'. Logs management will be disabled.\", filename);\n+            rc = LOGS_MANAG_CONFIG_LOAD_ERROR_NO_STOCK_CONFIG;\n+        }\n+    }\n+    freez(filename);\n+    \n+\n+    /* [global] section */\n+\n+    snprintfz(section, 100, \"global\");\n+\n+    if(!appconfig_get_boolean(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"enabled\", \n+            ENABLE_LOGS_MANAGEMENT_DEFAULT)){\n+        collector_info(\"CONFIG: Logs management disabled due to configuration option.\");\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_DISABLED;\n+    }\n+\n+    g_logs_manag_config.update_every = appconfig_get_number(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"update every\", \n+        g_logs_manag_config.update_every);\n+    \n+    g_logs_manag_config.update_every = \n+        g_update_every && g_update_every > g_logs_manag_config.update_every ? \n+        g_update_every : g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.update_timeout = appconfig_get_number(  \n+        &logsmanagement_d_conf, \n+        section, \n+        \"update timeout\", \n+        UPDATE_TIMEOUT_DEFAULT);\n+\n+    if(g_logs_manag_config.update_timeout < g_logs_manag_config.update_every) \n+        g_logs_manag_config.update_timeout = g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.use_log_timestamp = appconfig_get_boolean_ondemand( \n+        &logsmanagement_d_conf,\n+        section,\n+        \"use log timestamp\", \n+        g_logs_manag_config.use_log_timestamp);\n+    \n+    g_logs_manag_config.circ_buff_max_size_in_mib = appconfig_get_number(   \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer max size MiB\", \n+        g_logs_manag_config.circ_buff_max_size_in_mib);",
                "path": "logsmanagement/logsmanag_config.c",
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "original_commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "the same question applies to next options.",
                "created_at": "2023-10-27T03:10:34Z",
                "updated_at": "2023-10-27T03:10:34Z",
                "html_url": "https://github.com/netdata/netdata/pull/13291#discussion_r1374025332",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374025332"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#discussion_r1374025332"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                },
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374025332/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "start_line": null,
                "original_start_line": null,
                "start_side": null,
                "line": 307,
                "original_line": 307,
                "side": "RIGHT",
                "in_reply_to_id": 1374025116,
                "original_position": 307,
                "position": 307,
                "subject_type": "line"
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:10:34Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "dd71d0e7de8a54a54ce83a5295df5c56cd9555a7",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T00:17:12Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:10:34Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32886998317",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1700931778,
                "node_id": "PRR_kwDOAKPxd85lYijC",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": null,
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "submitted_at": "2023-10-27T03:10:34Z",
                "state": "commented",
                "html_url": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700931778",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700931778"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:10:34Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "dd71d0e7de8a54a54ce83a5295df5c56cd9555a7",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T00:17:12Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:10:35Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32886990335",
        "type": "PullRequestReviewCommentEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "comment": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374025116",
                "pull_request_review_id": 1700931449,
                "id": 1374025116,
                "node_id": "PRRC_kwDOAKPxd85R5fWc",
                "diff_hunk": "@@ -0,0 +1,1367 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n+\n+/** @file   logsmanag_config.c\n+ *  @brief  This file includes functions to manage \n+ *          the logs management configuration.\n+ */\n+\n+#include \"logsmanag_config.h\"\n+#include \"db_api.h\"\n+#include \"rrd_api/rrd_api.h\"\n+#include \"helper.h\"\n+\n+g_logs_manag_config_t g_logs_manag_config = {\n+    .update_every = UPDATE_EVERY,\n+    .update_timeout = UPDATE_TIMEOUT_DEFAULT,\n+    .use_log_timestamp = CONFIG_BOOLEAN_AUTO,\n+    .circ_buff_max_size_in_mib = CIRCULAR_BUFF_DEFAULT_MAX_SIZE / (1 MiB),\n+    .circ_buff_drop_logs = CIRCULAR_BUFF_DEFAULT_DROP_LOGS,\n+    .compression_acceleration = COMPRESSION_ACCELERATION_DEFAULT,\n+    .db_mode = GLOBAL_DB_MODE_DEFAULT,\n+    .disk_space_limit_in_mib = DISK_SPACE_LIMIT_DEFAULT,  \n+    .buff_flush_to_db_interval = SAVE_BLOB_TO_DB_DEFAULT,\n+    .enable_collected_logs_total = ENABLE_COLLECTED_LOGS_TOTAL_DEFAULT,\n+    .enable_collected_logs_rate = ENABLE_COLLECTED_LOGS_RATE_DEFAULT\n+};\n+\n+static logs_manag_db_mode_t db_mode_str_to_db_mode(const char *const db_mode_str){\n+    if(!db_mode_str || !*db_mode_str) return g_logs_manag_config.db_mode;\n+    else if(!strcasecmp(db_mode_str, \"full\")) return LOGS_MANAG_DB_MODE_FULL;\n+    else if(!strcasecmp(db_mode_str, \"none\")) return LOGS_MANAG_DB_MODE_NONE;\n+    else return g_logs_manag_config.db_mode;\n+}\n+\n+static struct config log_management_config = {\n+    .first_section = NULL,\n+    .last_section = NULL,\n+    .mutex = NETDATA_MUTEX_INITIALIZER,\n+    .index = {\n+            .avl_tree = {\n+                    .root = NULL,\n+                    .compar = appconfig_section_compare\n+            },\n+            .rwlock = AVL_LOCK_INITIALIZER\n+    }\n+};\n+\n+static struct Chart_meta chart_types[] = {\n+    {.type = FLB_TAIL,      .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_WEB_LOG,   .init = web_log_chart_init,   .update = web_log_chart_update},\n+    {.type = FLB_KMSG,      .init = kernel_chart_init,    .update = kernel_chart_update},\n+    {.type = FLB_SYSTEMD,   .init = systemd_chart_init,   .update = systemd_chart_update},\n+    {.type = FLB_DOCKER_EV, .init = docker_ev_chart_init, .update = docker_ev_chart_update},\n+    {.type = FLB_SYSLOG,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_SERIAL,    .init = generic_chart_init,   .update = generic_chart_update},\n+    {.type = FLB_MQTT,      .init = mqtt_chart_init,      .update = mqtt_chart_update}\n+};\n+\n+char *get_user_config_dir(void){\n+    char *dir = getenv(\"NETDATA_USER_CONFIG_DIR\");\n+\n+    return dir ? dir : CONFIG_DIR;\n+}\n+\n+char *get_stock_config_dir(void){\n+    char *dir = getenv(\"NETDATA_STOCK_CONFIG_DIR\");\n+\n+    return dir ? dir : LIBCONFIG_DIR;\n+}\n+\n+char *get_log_dir(void){\n+    char *dir = getenv(\"NETDATA_LOG_DIR\");\n+\n+    return dir ? dir : LOG_DIR;\n+}\n+\n+char *get_cache_dir(void){\n+    char *dir = getenv(\"NETDATA_CACHE_DIR\");\n+\n+    return dir ? dir : CACHE_DIR;\n+}\n+\n+/** \n+ * @brief Cleanup p_file_info struct\n+ * @param p_file_info The struct of File_info type to be cleaned up.\n+ * @todo  Pass p_file_info by reference, so that it can be set to NULL. */\n+static void p_file_info_destroy(struct File_info *p_file_info){\n+\n+    // TODO: Clean up rrd / chart stuff.\n+\n+    if(unlikely(!p_file_info)){\n+        collector_info(\"p_file_info_destroy() called but p_file_info == NULL - already destroyed?\");\n+        return;\n+    }\n+\n+    char chartname[100];\n+    snprintfz(chartname, 100, \"%s\", p_file_info->chartname ? p_file_info->chartname : \"Unknown\");\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup...\", chartname);\n+\n+    __atomic_store_n(&p_file_info->state, LOG_SRC_EXITING, __ATOMIC_RELAXED);\n+\n+    if(uv_is_active((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer)){\n+        uv_timer_stop(&p_file_info->flb_tmp_buff_cpy_timer);\n+        if (!uv_is_closing((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer))\n+            uv_close((uv_handle_t *) &p_file_info->flb_tmp_buff_cpy_timer, NULL);\n+    }\n+\n+    // TODO: Need to do proper termination of DB threads and allocated memory.\n+    if(p_file_info->db_writer_thread){\n+        uv_thread_join(p_file_info->db_writer_thread);\n+        sqlite3_close(p_file_info->db);\n+        uv_mutex_destroy(p_file_info->db_mut);\n+        freez((void *) p_file_info->db_metadata);\n+        freez((void *) p_file_info->db_dir);\n+        freez(p_file_info->db_writer_thread);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_asc);\n+        sqlite3_finalize(p_file_info->stmt_get_log_msg_metadata_desc);\n+    }\n+\n+    freez((void *) p_file_info->chartname);\n+    freez(p_file_info->filename);\n+    freez((void *) p_file_info->file_basename);\n+    freez((void *) p_file_info->stream_guid);\n+\n+    for(int i = 1; i <= BLOB_MAX_FILES; i++){\n+        if(p_file_info->blob_handles[i]){\n+            uv_fs_close(NULL, NULL, p_file_info->blob_handles[i], NULL);\n+            p_file_info->blob_handles[i] = 0;\n+        }\n+    }\n+\n+    if(p_file_info->circ_buff) \n+        circ_buff_destroy(p_file_info->circ_buff);\n+    \n+    if(p_file_info->parser_metrics){\n+        switch(p_file_info->log_type){\n+            case FLB_WEB_LOG: {\n+                if(p_file_info->parser_metrics->web_log)\n+                    freez(p_file_info->parser_metrics->web_log);\n+                break;\n+            }\n+            case FLB_KMSG: {\n+                if(p_file_info->parser_metrics->kernel){\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->subsystem);\n+                    dictionary_destroy(p_file_info->parser_metrics->kernel->device);\n+                    freez(p_file_info->parser_metrics->kernel);\n+                }\n+                break;\n+            }\n+            case FLB_SYSTEMD: \n+            case FLB_SYSLOG: {\n+                if(p_file_info->parser_metrics->systemd)\n+                    freez(p_file_info->parser_metrics->systemd);\n+                break;\n+            }\n+            case FLB_DOCKER_EV: {\n+                if(p_file_info->parser_metrics->docker_ev)\n+                    freez(p_file_info->parser_metrics->docker_ev);\n+                break;\n+            }\n+            case FLB_MQTT: {\n+                if(p_file_info->parser_metrics->mqtt){\n+                    dictionary_destroy(p_file_info->parser_metrics->mqtt->topic);\n+                    freez(p_file_info->parser_metrics->mqtt);\n+                }\n+                break;\n+            }\n+            default:\n+                break;\n+        }   \n+\n+        for(int i = 0; p_file_info->parser_cus_config && \n+                       p_file_info->parser_metrics->parser_cus && \n+                       p_file_info->parser_cus_config[i]; i++){\n+            freez(p_file_info->parser_cus_config[i]->chartname);\n+            freez(p_file_info->parser_cus_config[i]->regex_str);\n+            freez(p_file_info->parser_cus_config[i]->regex_name);\n+            regfree(&p_file_info->parser_cus_config[i]->regex);\n+            freez(p_file_info->parser_cus_config[i]);\n+            freez(p_file_info->parser_metrics->parser_cus[i]);\n+        }    \n+\n+        freez(p_file_info->parser_cus_config);\n+        freez(p_file_info->parser_metrics->parser_cus);\n+\n+        freez(p_file_info->parser_metrics);\n+    }\n+\n+    if(p_file_info->parser_config){\n+        freez(p_file_info->parser_config->gen_config);\n+        freez(p_file_info->parser_config);\n+    }\n+\n+    Flb_output_config_t *output_next = p_file_info->flb_outputs;\n+    while(output_next){\n+        Flb_output_config_t *output = output_next;\n+        output_next = output_next->next;\n+\n+        struct flb_output_config_param *param_next = output->param;\n+        while(param_next){\n+            struct flb_output_config_param *param = param_next;\n+            param_next = param->next;\n+            freez(param->key);\n+            freez(param->val);\n+            freez(param);\n+        }\n+        freez(output->plugin);\n+        freez(output);\n+    }\n+    \n+    freez(p_file_info);\n+\n+    collector_info(\"[%s]: p_file_info_destroy() cleanup done\", chartname);\n+}\n+\n+void p_file_info_destroy_all(void){\n+    if(p_file_infos_arr){\n+        for(int i = 0; i < p_file_infos_arr->count; i++) \n+            p_file_info_destroy(p_file_infos_arr->data[i]);\n+        freez(p_file_infos_arr);\n+        p_file_infos_arr = NULL;\n+    }\n+}\n+\n+/**\n+ * @brief Load logs management configuration.\n+ * @returns  0 if success, \n+ *          -1 if disabled in global config, \n+ *          -2 if config file not found\n+ *          -3 if p_flb_srvc_config if is NULL (no flb_srvc_config_t provided)\n+ */\n+int logs_manag_config_load( flb_srvc_config_t *p_flb_srvc_config, \n+                            Flb_socket_config_t **forward_in_config_p,\n+                            int g_update_every){\n+    int rc = LOGS_MANAG_CONFIG_LOAD_ERROR_OK;\n+    char section[100];\n+    char temp_path[FILENAME_MAX + 1];\n+\n+    struct config logsmanagement_d_conf = {\n+        .first_section = NULL,\n+        .last_section = NULL,\n+        .mutex = NETDATA_MUTEX_INITIALIZER,\n+        .index = {\n+                .avl_tree = {\n+                        .root = NULL,\n+                        .compar = appconfig_section_compare\n+                },\n+                .rwlock = AVL_LOCK_INITIALIZER\n+        }\n+    };\n+\n+    char *filename = strdupz_path_subpath(get_user_config_dir(), \"logsmanagement.d.conf\");\n+    if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)) {\n+        collector_info(\"CONFIG: cannot load user config '%s'. Will try stock config.\", filename);\n+        freez(filename);\n+\n+        filename = strdupz_path_subpath(get_stock_config_dir(), \"logsmanagement.d.conf\");\n+        if(!appconfig_load(&logsmanagement_d_conf, filename, 0, NULL)){\n+            collector_error(\"CONFIG: cannot load stock config '%s'. Logs management will be disabled.\", filename);\n+            rc = LOGS_MANAG_CONFIG_LOAD_ERROR_NO_STOCK_CONFIG;\n+        }\n+    }\n+    freez(filename);\n+    \n+\n+    /* [global] section */\n+\n+    snprintfz(section, 100, \"global\");\n+\n+    if(!appconfig_get_boolean(\n+            &logsmanagement_d_conf, \n+            section, \n+            \"enabled\", \n+            ENABLE_LOGS_MANAGEMENT_DEFAULT)){\n+        collector_info(\"CONFIG: Logs management disabled due to configuration option.\");\n+        rc = LOGS_MANAG_CONFIG_LOAD_ERROR_DISABLED;\n+    }\n+\n+    g_logs_manag_config.update_every = appconfig_get_number(\n+        &logsmanagement_d_conf, \n+        section, \n+        \"update every\", \n+        g_logs_manag_config.update_every);\n+    \n+    g_logs_manag_config.update_every = \n+        g_update_every && g_update_every > g_logs_manag_config.update_every ? \n+        g_update_every : g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.update_timeout = appconfig_get_number(  \n+        &logsmanagement_d_conf, \n+        section, \n+        \"update timeout\", \n+        UPDATE_TIMEOUT_DEFAULT);\n+\n+    if(g_logs_manag_config.update_timeout < g_logs_manag_config.update_every) \n+        g_logs_manag_config.update_timeout = g_logs_manag_config.update_every;\n+\n+    g_logs_manag_config.use_log_timestamp = appconfig_get_boolean_ondemand( \n+        &logsmanagement_d_conf,\n+        section,\n+        \"use log timestamp\", \n+        g_logs_manag_config.use_log_timestamp);\n+    \n+    g_logs_manag_config.circ_buff_max_size_in_mib = appconfig_get_number(   \n+        &logsmanagement_d_conf,\n+        section, \n+        \"circular buffer max size MiB\", \n+        g_logs_manag_config.circ_buff_max_size_in_mib);",
                "path": "logsmanagement/logsmanag_config.c",
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "original_commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "Why are you not testing this specific user input?",
                "created_at": "2023-10-27T03:09:59Z",
                "updated_at": "2023-10-27T03:09:59Z",
                "html_url": "https://github.com/netdata/netdata/pull/13291#discussion_r1374025116",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374025116"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#discussion_r1374025116"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                },
                "reactions": {
                    "url": "https://api.github.com/repos/netdata/netdata/pulls/comments/1374025116/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "start_line": null,
                "original_start_line": null,
                "start_side": null,
                "line": 307,
                "original_line": 307,
                "side": "RIGHT",
                "original_position": 307,
                "position": 307,
                "subject_type": "line"
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:09:59Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "dd71d0e7de8a54a54ce83a5295df5c56cd9555a7",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T00:17:12Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:09:59Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    },
    {
        "id": "32886990276",
        "type": "PullRequestReviewEvent",
        "actor": {
            "id": 49162938,
            "login": "thiagoftsm",
            "display_login": "thiagoftsm",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thiagoftsm",
            "avatar_url": "https://avatars.githubusercontent.com/u/49162938?"
        },
        "repo": {
            "id": 10744183,
            "name": "netdata/netdata",
            "url": "https://api.github.com/repos/netdata/netdata"
        },
        "payload": {
            "action": "created",
            "review": {
                "id": 1700931449,
                "node_id": "PRR_kwDOAKPxd85lYid5",
                "user": {
                    "login": "thiagoftsm",
                    "id": 49162938,
                    "node_id": "MDQ6VXNlcjQ5MTYyOTM4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49162938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/thiagoftsm",
                    "html_url": "https://github.com/thiagoftsm",
                    "followers_url": "https://api.github.com/users/thiagoftsm/followers",
                    "following_url": "https://api.github.com/users/thiagoftsm/following{/other_user}",
                    "gists_url": "https://api.github.com/users/thiagoftsm/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/thiagoftsm/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/thiagoftsm/subscriptions",
                    "organizations_url": "https://api.github.com/users/thiagoftsm/orgs",
                    "repos_url": "https://api.github.com/users/thiagoftsm/repos",
                    "events_url": "https://api.github.com/users/thiagoftsm/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/thiagoftsm/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": null,
                "commit_id": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                "submitted_at": "2023-10-27T03:09:59Z",
                "state": "commented",
                "html_url": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700931449",
                "pull_request_url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "author_association": "CONTRIBUTOR",
                "_links": {
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291#pullrequestreview-1700931449"
                    },
                    "pull_request": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    }
                }
            },
            "pull_request": {
                "url": "https://api.github.com/repos/netdata/netdata/pulls/13291",
                "id": 985219556,
                "node_id": "PR_kwDOAKPxd846uUHk",
                "html_url": "https://github.com/netdata/netdata/pull/13291",
                "diff_url": "https://github.com/netdata/netdata/pull/13291.diff",
                "patch_url": "https://github.com/netdata/netdata/pull/13291.patch",
                "issue_url": "https://api.github.com/repos/netdata/netdata/issues/13291",
                "number": 13291,
                "state": "open",
                "locked": false,
                "title": "Logs Management",
                "user": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "body": "# Table of Contents\r\n\r\n- [Summary](#summary)  \r\n- [Design Overview](#design-overview)  \r\n\t- [Configuration](#configuration) \r\n\t    - [Custom charts based on regex parsers](#custom-regex-charts)\r\n\t    - [Configuration Examples](#configuration-examples) \r\n\t- [Log Collection](#log-collection) \r\n\t    - [Tail_plugin.c](#tail-plugin-c) \r\n\t    - [FLB_plugin.c](#flb-plugin-c) \r\n\t- [Buffering](#buffering) \r\n\t- [Parsing](#parsing) \r\n\t- [Database Storage](#database-storage) \r\n\t- [Querying](#querying) \r\n- [Test Plan](#test-plan)  \r\n\t- [Unit Tests](#unit-tests) \r\n- [Performance](#performance)  \r\n- [External Dependencies / Packaging](#external-dependencies-packaging)  \r\n- [TODO](#todo) \r\n\r\n<a name=\"summary\"/></a>\r\n\r\n# Summary\r\n\r\nThis is a sizeable PR that adds logs management functionality to the agent, including:\r\n\r\n- web access log (Apache and NGINX) collection, \r\n- Systemd log collection, \r\n- Docker events log collection,\r\n- compression of collected logs using LZ4, \r\n- parsing of collected logs for metrics extraction and chart generation, \r\n- buffering, \r\n- storage to disk,\r\n- querying.\r\n\r\nThe implemented logs management engine is a separate entity to the DBengine. Almost all of the code resides in the following 2 places:\r\n\r\n- [logsmanagement](https://github.com/Dim-P/netdata/tree/logs-manag-master/logsmanagement)\r\n- [collectors/logsmanagement.plugin](https://github.com/Dim-P/netdata/tree/logs-manag-master/collectors/logsmanagement.plugin)\r\n\r\n\r\n<a name=\"design-overview\"/></a>\r\n\r\n# Design Overview\r\n\r\nThis PR introduces 2 new static threads which are implemented by the following functions: [logsmanagement_plugin_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/collectors/logsmanagement.plugin/plugin_logsmanagement.c#L183) and [logsmanagement_main()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L464). The first one is responsible for using the extracted metrics to populate the dashboard charts and the second one takes care of everything else (that is, initialising all the necessary subsystems and spawning children threads, before executing its own event loop).\r\n\r\nThe digested logs generally follow this pipeline:\r\n\r\n![Logs management pipeline](https://user-images.githubusercontent.com/5953192/191845591-fea3392c-427a-4b56-95f4-e029775378b0.jpg \"Logs management pipeline\")\r\n\r\n<a name=\"configuration\"/></a>\r\n\r\n## Configuration\r\n\r\nThere is a new section introduced in `netdata.conf`:\r\n```\r\n[logs management]\r\n\t# enabled = yes\r\n\t# update every = 1\r\n\t# db dir = /tmp/netdata/var/cache/netdata/logs_management_db\r\n```\r\n\r\nThere is also a separate `logsmanagement.conf` configuration file, which follows the standard `.ini` Netdata configuration format. It is read only once during initialiasation by the [config_init()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/logsmanagement.c#L182) function and it works same as all the other user / stock configuration files that can be edited via the `edit-config` script.\r\n\r\nEach section listed in the configuration file represents a different log source. The name of the section will be used as the chart name for that log source. Currently, 6 different `log type` configuration options are supported:\r\n\r\n- `generic` (default, tails log files using our own C implementation)\r\n- `flb_generic` (same as above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `web_log` (tails and parses web log files using our own C implementation, based on the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog))\r\n- `flb_web_log` (similar functionality to above, but using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [tail input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/tail \"tail input plugin\"))\r\n- `flb_systemd` (collects and extracts metrics from Systemd logs using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [systemd input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/systemd \"systemd input plugin\"))\r\n- `flb_docker_events` (collects and extracts metrics from [Docker event logs](https://docs.docker.com/engine/reference/commandline/events/ \"Docker event logs\") using [Fluent-Bit engine](https://docs.fluentbit.io/manual/ \"Fluent-Bit engine\") and Fluent-Bit [docker events input plugin](https://docs.fluentbit.io/manual/pipeline/inputs/docker-events \"docker events input plugin\"))\r\n\r\nConfiguration options common to all log source types:\r\n\r\n- `enabled`: Whether this log source will be monitored or not.\r\n- `update every`: How often to update the charts (`netdata.conf` `update every` has priority over this)\r\n- `log type`: Type of this log. If unset, `generic` will be used by default.\r\n- `circular buffer max size`: Maximum RAM used to buffer collected logs until they are inserted in the database.\r\n- `compression acceleration`: Fine-tunes tradeoff between log compression speed and compression ratio, see [here](https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195) for more.\r\n- `buffer flush to DB`: Interval at which logs will be transferred from in-memory buffers to the database.\r\n- `disk space limit`: Maximum disk space that all compressed logs in database can occupy (per log source). \r\n\r\nConfiguration options applicable to WEB_LOG and FLB_WEB_LOG log types only:\r\n\r\n- `log path`: Absolute path of log file source.\r\n- `verify parsed logs`: If enabled, the parser will attempt to verify some fields for correctness, when extracting metrics. For example, a Vhost not matching this regex: `^[a-zA-Z0-9:.-]+` will be measured as invalid in the respective chart if this setting is enable, otherwise it will show up as a valid entry.\r\n- `log format`: Indicates the formatting of the logs. Supported options are currently [Apache log formats](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html \"Apache log formats\") and [NGINX log formats](https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format \"NGINX log formats\"). There is also the option for autodetection of the log format if the keyword `auto` is used instead.\r\n- `vhosts chart`, `ports chart` .... : Disable individual charts, all charts enabled by default.\r\n\r\n<a name=\"custom-regex-charts\"/></a>\r\n\r\n### Custom charts based on regex parsers\r\n\r\nAny log source section of `logsmanagement.conf` can optionally have a practically unlimited number of custom charts added to it, in the form of:\r\n```\r\n\tcustom xxx chart = sudo\r\n\tcustom xxx regex name = sudo\r\n\tcustom xxx regex = \\bsudo\\b\r\n\tcustom xxx ignore case = yes\r\n```\r\nwhere a dimension named as the value of `custom xxx regex name` will count the log records of this source that match the regex defined by `custom xxx regex`. `xxx` must be an incremental integer for any new regex to be monitored, starting from `1` for each log source.  \r\n\r\nIf `custom xxx regex name` is absent, then the regex (i.e. the value of `custom xxx regex`) will be used as the dimension name instead.\r\n\r\nIf `custom xxx chart` exists already for this log source, then a new dimension will be added to it rather than a new chart being created, so this is a way for regexs to be grouped together in the same chart (see example below).\r\n\r\n\r\n<a name=\"configuration-examples\"/></a>\r\n\r\n### Configuration Examples\r\n\r\nExample of configuration for the collection of Apache access logs:\r\n```\r\n[Apache access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/apache2/access.log\r\n\tlog format = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"\r\n\tverify parsed logs = yes\r\n\t# log format = auto\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for the collection of NGINX access logs:\r\n```\r\n[Nginx access.log]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/nginx/access.log\r\n\tlog format = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_length $request_time \"$http_referer\" \"$http_user_agent\"\r\n\tverify parsed logs = yes\r\n\tvhosts chart = yes\r\n\tports chart = yes\r\n\tIP versions chart = yes\r\n\tunique client IPs - current poll chart = yes\r\n\tunique client IPs - all-time chart = yes\r\n\thttp request methods chart = yes\r\n\thttp protocol versions chart = yes\r\n\tbandwidth chart = yes\r\n\ttimings chart = yes\r\n\tresponse code families chart = yes\r\n\tresponse codes chart = yes\r\n\tresponse code types chart = yes\r\n\tSSL protocols chart = yes\r\n\tSSL chipher suites chart = yes\r\n```\r\n\r\nExample of configuration for System Logs collection:\r\n```\r\n[System Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_systemd\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tpriority value chart = yes\r\n\tseverity chart = yes\r\n\tfacility chart = yes\r\n```\r\n\r\nExample of configuration for Docker Events Logs collection:\r\n```\r\n[Docker Events Logs]\r\n\tenabled = yes\r\n\tupdate every = 1\r\n\tlog type = flb_docker_events\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tevent type chart = yes\r\n```\r\n\r\nExample of configuration for a generic log source collection with custom regex-based parsers:\r\n```\r\n[Auth.log]\r\n\tenabled = yes\r\n\tupdate every = 5\r\n\tlog type = generic\r\n\tcircular buffer max size = 256 # in MiB\r\n\tcompression acceleration = 1 # see https://github.com/lz4/lz4/blob/90d68e37093d815e7ea06b0ee3c168cccffc84b8/lib/lz4.h#L195\r\n\tbuffer flush to DB = 6 # in sec, default 6 min 4\r\n\tdisk space limit = 500 # in MiB, default 500MiB\r\n\tlog path = /var/log/auth.log\r\n\r\n\tcustom 1 chart = sudo and su\r\n\tcustom 1 regex name = sudo\r\n\tcustom 1 regex = \\bsudo\\b\r\n\tcustom 1 ignore case = yes\r\n\r\n\tcustom 2 chart = sudo and su\r\n\t# custom 2 regex name = su\r\n\tcustom 2 regex = \\bsu\\b\r\n\tcustom 2 ignore case = yes\r\n\r\n\tcustom 3 chart = sudo or su\r\n\tcustom 3 regex name = sudo or su\r\n\tcustom 3 regex = \\bsudo\\b|\\bsu\\b\r\n\tcustom 3 ignore case = yes\r\n```\r\n\r\nAnd the generated charts based on this configuration:\r\n\r\n![Auth.log](https://user-images.githubusercontent.com/5953192/197003292-13cf2285-c614-42a1-ad5a-896370c22883.PNG)\r\n\r\n<a name=\"log-collection\"/></a>\r\n\r\n## Log Collection\r\n\r\n2 modules can be used for the collection of logs: \r\n\r\n1. [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\")\r\n2. [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\")\r\n\r\n<a name=\"tail-plugin-c\"/></a>\r\n\r\n### Tail_plugin.c\r\n\r\n[tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") uses [libuv](https://github.com/libuv/libuv \"libuv\")'s [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") to monitor a given path for changes. [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") uses a kernel interface such as inotify or kqueue to detect events. Once an event is detected (and provided the log file has grown in size), an asynchronous file read is scheduled to collect the new logs. The [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") callback function is then responsible for (synchronously) compressing\\* the collected logs, pushing them into the circular buffer and notifying the parser thread that they need to be parsed. All callbacks of this plugin run in the logs management main thread.\r\n\r\nDuring all this, no other events from the same log source should be processed, so [FS Event handle](http://docs.libuv.org/en/v1.x/fs_event.html \"FS Event handle\") monitoring is disable for the particular log source and re-enabled once [read_file_cb()](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c#L214 \"read_file_cb()\") finishes its work.\r\n\r\nThe plugin will handle log rotations using the `create` method (but not the `copytrunctate` method yet). Also, it will handle any [ \"UV_ENOENT no such file or directory\"](http://docs.libuv.org/en/v1.x/errors.html#c.UV_ENOENT) errors in case any file becomes incaccessible for some reason and until it is accessible again.\r\n\r\n**Important! If a file log source is missing during initialisation, it will never be monitored without an agent restart, even if it becomes available later. That said, if it gets (re)moved later, it will still be monitored when it reppears.**\r\n\r\n\\**We want the compression to happen as soon as possible, so that the compressed logs are ready to be streamed.*\r\n\r\n<a name=\"flb-plugin-c\"/></a>\r\n\r\n### FLB_plugin.c\r\n\r\n[flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") uses the [Fluent-Bit log processor](https://github.com/fluent/fluent-bit \"Fluent-Bit log processing engine\") to:\r\n\r\n1. Implement log file tailing in a similar way to [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") and\r\n2. Collect and parse systemd logs and docker event logs.\r\n\r\nFluent-Bit has its own multi-threaded engine to collect, buffer, process and forward logs. All logs collected using [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") need to pass through the Fluent-Bit engine first, which adds to the total memory and CPU consumption. However, the Fluent-Bit engine and its plugins are very robust and support features such as log rotation, multi-line logs etc. out-of-the-box.\r\n\r\nA preliminary comparison and benchmarking between Fluent-Bit log tailing and Netdata log tailing (before Fluent-Bit was integrated into the agent) was done and can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). [tail_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/tail_plugin.c \"tail_plugin.c\") is significantly faster than [flb_plugin.c](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/flb_plugin.c \"flb_plugin.c\") (and even than the [Go web log plugin](https://github.com/netdata/go.d.plugin/tree/master/modules/weblog) as measured [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\")), but not as complete in terms of functionality. So for now, both options are supported in the configuration file. \r\n\r\nIt is worth noting that while the Fluent-Bit tail plugin can deliver raw logs from files, the Fluent-Bit systemd and docker events plugins deliver only structured logs (by querying the respective daemon). This makes metrics extraction for system and docker event logs easier (no need to use the parser thread), however because we store all logs in the database in unstructured format\\*\\*, any structured logs must be reconstructed. System logs are reconstructed in the [RFC3164](https://datatracker.ietf.org/doc/html/rfc3164 \"RFC3164\") Syslog format before they get compressed and docker event logs to the default presentation format used by the `docker events` command. \r\n\r\n\\*\\**Moving forward, we can pass on the choice of unstructured vs structured log storage to the user.*\r\n\r\n<a name=\"buffering\"/></a>\r\n\r\n## Buffering\r\n\r\nThe logs are temporarily stored in a circular buffer that consists of discrete items of [struct Circ_buff_item](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.h#L36 \"struct Circ_buff_item\") type:\r\n\r\n```\r\ntypedef struct Circ_buff_item {\r\n    circ_buff_item_status_t status;    /**< Denotes if item is unprocessed, in processing or processed **/\r\n    uint64_t timestamp;                /**< Epoch datetime of when data was collected **/\r\n    char *data;                        /**< Base of buffer to store both uncompressed and compressed logs **/\r\n    size_t text_size;                  /**< Size of uncompressed logs **/\r\n    char *text_compressed;             /**< Pointer offset within *data that points to start of compressed logs **/\r\n    size_t text_compressed_size;       /**< Size of compressed logs **/\r\n    size_t data_max_size;              /**< Allocated size of *data **/\r\n} Circ_buff_item_t;\r\n```\r\n\r\nThe `char *data` pointer of each `Circ_buff_item_t` item points to a continuous memory area, which stores first the raw logs and then (in series) the compressed logs collected in that iteration (see left-hand side of below image). When new raw and compressed logs are to be inserted in such a space of a `Circ_buff_item_t` item, `char *data` can be realloc'ed if more than ` size_t data_max_size` is required (provided that the sum of all these buffers for each circular buffer is not > `circular buffer max size`, as that is defined in the configuration file).\r\n\r\nThere are four indices that are used with the circular buffer (`head`, `parse`, `read` and `tail`) and their use can be seen in the image below. For example, in this particular instance:\r\n\r\n- items with a green circle are available to be reused,\r\n- items with a blue circle inside cannot be reused yet, as they have been read by the \"database writer\" thread, but the synchronisation of the data and metadata to the disk and the database have not been completed yet,\r\n- items with an orange circle are ready to be read (`status = CIRC_BUFF_ITEM_STATUS_DONE`) and transferred to the database,\r\n- items with a red circle must still remain in the circular buffer, as they have not been fully processed yet (this could mean e.g. parsing is pending).\r\n\r\n![Circular buffer structure](https://user-images.githubusercontent.com/5953192/183752224-8f95cda7-7df8-4fa8-84e2-202c8dfdb8d8.jpg)\r\n\r\nThe total number of discrete `Circ_buff_item_t` items for each log source is equal to `buffer flush to DB` + `CIRCULAR_BUFF_SPARE_ITEMS`. The former is defined in the configuration file of each log source, while the latter is hard-coded to 2. This ensures that in the worst case scenario, the database writer is allowed to take up to 2 secs to flush the buffered items, without prohibiting any new logs to be collected.\r\n\r\nThis circular buffer implementation has some useful properties:\r\n\r\n- Due to the use of (atomic) indices to keep track of `head`, `read` and `tail` positions, it is lockless. Items can be inserted, read or get parsed simultaneously.\r\n- No large copies occur when a new item is inserted, since [pointer exchange is used](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/circular_buffer.c#L174 \"pointer exchange is used\").\r\n- Raw and compressed log data are stacked up using the same base address (per item); this results in reduced memory usage.\r\n\r\n<a name=\"parsing\"/></a>\r\n\r\n## Parsing\r\n**TODO**\r\n\r\n\r\n<a name=\"database-storage\"/></a>\r\n\r\n## Database Storage\r\n\r\nThe default path for the logs management database is `/var/cache/netdata/logs_management_db/` but it can be changed in `netdata.conf`. Under that path, a `main.db` SQLite database can be found. This database has 1 table (`LogCollections`) with 3 columns, which links each log source to its database path. For example, for a Systemd log source and an Apache access.log log source, the table could look like this:\r\n\r\n|  Id  | Machine_GUID | Log_Source_Path | Type  | DB_Dir  |\r\n| ------------ | ------------ | ------------ | ------------ | ------------ |\r\n| 1 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | systemd_default  | 2 | /tmp/netdata/var/cache/netdata/logs_management_db/da8e33a7-9ea9-4c9b-a75a-d6be14e718cc/\r\n| 2 | d9f57f3c-3aaf-11ed-b7b7-dd88b84aa470 | /var/log/apache2/access.log | 1 | /tmp/netdata/var/cache/netdata/logs_management_db/6558ff1c-95f1-4d5a-8169-556e1c7cc7f8/\r\n\r\nThe `Machine_GUID` column is not used currently, but it will be useful in the future if streaming is added, to uniquely (globally) identify a log collection.\r\n\r\nNow, if for example we examine the Systemd path, we will see a `metadata.db` SQLite database which stores metadata information about the collected Systemd logs and 10 BLOBs that store the compressed logs:\r\n```\r\n$ sudo ls -l /var/cache/netdata/logs_management_db/systemd_0\r\ntotal 428\r\n-rw-r----- 1 netdata netdata   5162 Aug 18 23:51 logs.bin.0\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.1\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.2\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.3\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.4\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.5\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.6\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.7\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.8\r\n-rw-r----- 1 netdata netdata      0 Aug 18 23:41 logs.bin.9\r\n-rw-r----- 1 netdata netdata   4096 Aug 18 23:41 metadata.db\r\n-rw-r----- 1 netdata netdata  32768 Aug 18 23:51 metadata.db-shm\r\n-rw-r----- 1 netdata netdata 391432 Aug 18 23:51 metadata.db-wal\r\n```\r\n`metadata.db` includes 2 tables, which in this example look like:\r\n\r\n`Blobs` table:\r\n\r\n|Id|Filename|Filesize|\r\n| ------------ | ------------ | ------------ |\r\n|1|logs.bin.0|5162|\r\n|2|logs.bin.1|0|\r\n|3|logs.bin.2|0|\r\n|4|logs.bin.3|0|\r\n|5|logs.bin.4|0|\r\n|6|logs.bin.5|0|\r\n|7|logs.bin.6|0|\r\n|8|logs.bin.7|0|\r\n|9|logs.bin.8|0|\r\n|10|logs.bin.9|0|\r\n\r\n`Logs` table:\r\n\r\n|Id|FK_BLOB_Id|BLOB_Offset|Timestamp|Msg_compr_size|Msg_decompr_size|\r\n| ------------ | ------------ | ------------ | ------------ | ------------ | ------------ |\r\n|1|1|0|1660862500727|79|77|\r\n|2|1|79|1660862550143|98|100|\r\n|3|1|177|1660862552424|254|309|\r\n|4|1|431|1660862561737|79|77|\r\n|5|1|510|1660862622747|79|77|\r\n|6|1|589|1660862683757|79|77|\r\n|7|1|668|1660862701520|189|311|\r\n|8|1|857|1660862718333|98|100|\r\n|...|...|...|...|...|...|\r\n\r\nEvery `buffer flush to DB` seconds, the circular buffer items with `status = CIRC_BUFF_ITEM_STATUS_DONE` will be saved to the database in the following steps:\r\n\r\n1. Retrieve next circular buffer item with `status = CIRC_BUFF_ITEM_STATUS_DONE`.\r\n2. Write compressed logs from that item in `logs.bin.0`.\r\n3. Write metadata of saved logs in `Logs` table of  `metadata.db`.\r\n4. Update `Filesize` of `logs.bin.0` in `Blobs` table of `metadata.db`.\r\n5. Repeat until there are no more items that can be retrieved from circular buffer.\r\n6. (Synchronously) flush BLOBs data and SQLite metadata to disk. \r\n7. Check `disk space limit` to see if BLOBs need to be rotated (`logs.bin.0` becomes `logs.bin.1` and so on, until `logs.bin.9` is truncated and becomes `logs.bin.0` ).\r\n\r\nThere is a database writer thread per log source.\r\n\r\n<a name=\"querying\"/></a>\r\n\r\n## Querying\r\n\r\n2 new endpoints have been added to the web API. The first one retrieves all available log sources that are being monitored at that moment: `/api/v1/logsmanagement_sources` \r\n\r\nFor example, if it is systemd logs and Apache access.log that are being monitored, it would return on success:\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"log sources\": {\r\n\t\t \"System Logs\":{\r\n\t\t\t\"basename\": \"systemd\",\r\n\t\t\t\"filename\": \"systemd\",\r\n\t\t\t\"log type\": \"FLB_SYSTEMD\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/systemd_0/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t},\r\n\t\t \"Apache access.log\":{\r\n\t\t\t\"basename\": \"access.log\",\r\n\t\t\t\"filename\": \"/var/log/apache2/access.log\",\r\n\t\t\t\"log type\": \"WEB_LOG\",\r\n\t\t\t\"DB dir\": \"/tmp/netdata/var/cache/netdata/logs_management_db/access.log_1/\",\r\n\t\t\t\"DB flush interval\": 6,\r\n\t\t\t\"DB disk space limit\": 524288000\r\n\t\t}\r\n\t},\r\n\t\"error code\": 0,\r\n\t\"error\": \"no error\"\r\n}\r\n```\r\n\r\nThe second endpoint can be used to query the logs management database (and the circular buffers) for logs that were generated and collected from a certain log source, within a specific timeframe. For example, to retrieve system logs, a request could look like this:\r\n```\r\n/api/v1/logsmanagement?from=1660933646475&until=1660933649201&chart_name=System Logs&ignore_case=1&keyword=dimitris\r\n```\r\nwhere the client:\r\n- Must use the `from` and `until` parameters (in epoch milliseconds) to define a timeframe to be searched.\r\n- Must either use the `chart_name` or the `filename` parameter, to define the log source to be searched. The `chart_name` takes precedence in case both values are defined.\r\n- Can used a `quota` (in bytes) that if surpassed, no more logs will be returned in this request.\r\n- Can optionally include a `keyword`, so that only logs including the keyword will be returned. In that case, `ignore_case` can also be used. The keyword can be provided either in plain text or as a POSIX regex. If there are any special characters to be searched, such as `[]\\^$.|?*+(){}` , then `sanitise_keyword` must also be set to 1, otherwise the special characters will not be escaped and they will be used by the POSIX regex engine.\r\n\r\nThe results of the above example request will look similar to this:\r\n\r\n```\r\n{\r\n\t\"version\": 1,\r\n\t\"requested from\": 1660933646475,\r\n\t\"requested until\": 1660933649201,\r\n\t\"requested keyword\": \"dimitris\"\r\n\t\"actual from\": 1660933646475,\r\n\t\"actual until\": 1660933649201,\r\n\t\"quota\": 524288,\r\n\t\"requested filename\": [\r\n\t\r\n\t],\r\n\t\"requested chart_name\": [\r\n\t\t\"System Logs\"\r\n\t]\r\n\t\"data\":[\r\n\t\t[ 1660933646475, \"<85>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:26 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2],\r\n\t\t[ 1660933649201, \"<85>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: dimitris : TTY=pts/3 ; PWD=/home/dimitris ; USER=root ; COMMAND=/bin/bash\\n<86>Aug 19 19:27:29 WORK-PC-wsl sudo[unknown]: pam_unix(sudo:session): session opened for user root by dimitris(uid=0)\", 2]\r\n\t],\r\n\t\"data array length\": 524,\r\n\t\"keyword matches\": 4,\r\n\t\"user time\": 9876,\r\n\t\"system time\": 3364,\r\n\t\"error code\": 0,\r\n\t\"error\": \"success\"\r\n}\r\n```\r\n\r\nIf the quota\\*\\*\\* is exceeded and there are more logs that match the query, the `actual until` value will be less than the `requested until` value. It is then the responsibility of the client to perform a new query to retrieve the remaining logs, where the new `requested from` value is the previous `actual until` value. This way a form of pagination is implemented and all the requests remain stateless.\r\n\r\n\\*\\*\\**Note that due to the way the logs management collection engine works (i.e. logs are collected every 1 sec and compressed and stored as a single entry), each `data` array element may contain more than one log messages that have been collected under the same timestamp (and thus 1 sec is the minimum quantum of logs that can be queried and returned by a request).*\r\n\r\nFinally, the return `error` codes can be found [here](https://github.com/Dim-P/netdata/blob/6aed3c52557587f0830b222c89086ed8ffa358fa/logsmanagement/query.h#L16-L22 \"here\").\r\n\r\n<a name=\"test-plan\"/></a>\r\n\r\n# Test Plan\r\n\r\nAt the current project state, the recommended way to test it is to build it using the `logsmanagement/stress_test/run_stress_tests.sh` script:\r\n\r\n```\r\nUsage: run_stress_test.sh [ARGS]...\r\nExample: run_stress_test.sh 0 1 2 1000 1000000 10 6 6 0\r\nBuild, install and run netdata with logs management\r\nfunctionality enabled and (optional) stress tests.\r\n\r\narg[1]: [build_clean_netdata]                    Default: 0\r\narg[2]: [optimisation_level]                     Default: 1\r\narg[3]: [num_log_sources]                        Default: 0\r\narg[4]: [delay_between_msg_write]                Default: 1000000 us\r\narg[5]: [total_msgs_per_source]                  Default: 1000000\r\narg[6]: [queries_delay]                          Default: 3600 s\r\narg[7]: [log_rotate_after_sec]                   Default: 3600 s\r\narg[8]: [delay_open_to_write_sec]                Default: 6 s\r\narg[9]: [run_logs_management_tests_only]         Default: 0\r\n```\r\n\r\nwith the following options for example, the script will make a clean agent build with debug symbols, and it will create 2 artificial web log sources which will start generating 1 log record / sec, after 6 seconds:\r\n`./run_stress_test.sh 1 0 2 1000000 1000000 3600 3600 6 0`\r\n\r\nSetting `num_log_sources == 0` will disabled all stress tests. To test the project in its release state, run:\r\n`./run_stress_test.sh 1 1 0 `\r\n\r\nThe script installs Netdata as `root` in `/tmp/netdata`.\r\n\r\n<a name=\"unit-tests\"/></a>\r\n\r\n## Unit Tests\r\n\r\nThere are [very few unit tests](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/unit_test/unit_test.c \"very few unit tests\") written for the moment and only for functions that are mostly independent from the rest of the code (i.e. no \"setup\" stage exists for the unit tests). This is something that needs to be worked on more on a case-by-case basis as the project goes on.\r\n\r\n<a name=\"performance\"/>\r\n\r\n# Performance\r\nSome benchmarking results can be found [here](https://github.com/netdata/product/issues/2886#issuecomment-1115285851 \"here\") and [here](https://github.com/netdata/product/issues/2886#issuecomment-1125460130 \"here\"). As far as the web logs case goes (since it's the only one that has been benchmarked), using the `WEB_LOG` option for log collection and parsing is faster than using the equivalent Go plugin. However, using `FLB_WEB_LOG` is at least 25% slower than using `WEB_LOG` (and potentially a lot more, as all benchmarking was performed before Fluent-Bit was integrated into the agent).\r\n\r\nMore benchmarking is required now that Fluent-Bit can be used by the agent to reach to conclusive results about performance.\r\n\r\n<a name=\"external-dependencies-packaging\"/></a>\r\n\r\n# External Dependencies / Packaging\r\n\r\nThe logs management code has been added to the agent's build system (there are 2 new flags, `--enable-logsmanagement` and `--enable-logsmanagement-tests`). \r\n\r\nHowever, Fluent-Bit must also be built as a shared library and deployed together with Netdata (it is loaded at runtime using `dlopen()`). ~~For development, it has been being built using the `run_stress_test.sh` script and by passing on any necessary `CFLAGS` and `LDFLAGS` to `./netdata-installer.sh`.~~\r\n\r\n**Update: Now Fluent-Bit configuration, compilation and installation is fully integrated with the Netdata installer.**\r\n\r\n~~Fluent-bit's plugins have been configured so that there are no other external dependencies, apart from `libsystemd-dev` (tested on Debian, Ubuntu, Fedora).~~ **Update: Some dependencies have been introduced as Fluent-Bit doesn't build properly without `flex`, `bison` and on Alpine `fts-dev`. In the future, `flex` and `bison` might be removed from the dependencies list.**\r\n\r\n<a name=\"todo\"/></a>\r\n\r\n# TODO\r\n\r\nSome future items (in no particular order):\r\n\r\n- ~~Integrate Fluent-Bit build into agent's build code~~\r\n- Add streaming (and / or exporting) support\r\n- ~~Add keyword matches to query results~~\r\n- Add support for parsers other than CSV (such as LTSV, JSON)\r\n- Add log tagging and aggregation of various log sources\r\n- Add `copytrunctate` rotation support to tail plugin\r\n- Add services to systemd logs chart\r\n- Support RFC5424 system log format\r\n- Support storage of logs in structured format (?)\r\n- Complete compound queries (works for DB search, doesn't work for circular buffers)\r\n- Add more monitoring charts for logs management (~~DB size~~, CPU usage, workers etc.)\r\n- Add configuration options for number of DB BLOBs (currently hardcoded to 10). \r\n- Support more log sources (~~and a generic log parser~~, related: https://github.com/netdata/netdata/issues/7420 https://github.com/netdata/netdata/pull/4900 https://github.com/netdata/netdata/issues/3729\r\n- ~~[plugin_logsmanagement.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/collectors/logsmanagement.plugin/plugin_logsmanagement.c \"collectors/logsmanagement.plugin/plugin_logsmanagement.c\"), [parser.c](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.c\") and [parser.h](https://github.com/Dim-P/netdata/blob/logs-manag-master/logsmanagement/parser.h \"parser.h\") could do with refactoring as the metrics and charts structs waste a lot of memory the way they are designed now.~~\r\n- Handle metadata vacuuming / defragmentation.\r\n- Add 2nd tier \"cold\" log storage / archiving, instead of just deletion of oldest records. \r\n- Handle special case of full circular buffers.\r\n- Consider adding non-disk (RAM-only) mode.\r\n- Ensure update of all circular buffer indexes happens atomically (i.e. head, tail .... are updated simultaneously and not in series). \r\n- ~~Add support for future database migrations.~~",
                "created_at": "2022-07-01T18:01:41Z",
                "updated_at": "2023-10-27T03:09:59Z",
                "closed_at": null,
                "merged_at": null,
                "merge_commit_sha": "dd71d0e7de8a54a54ce83a5295df5c56cd9555a7",
                "assignee": {
                    "login": "Dim-P",
                    "id": 5953192,
                    "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Dim-P",
                    "html_url": "https://github.com/Dim-P",
                    "followers_url": "https://api.github.com/users/Dim-P/followers",
                    "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                    "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                    "repos_url": "https://api.github.com/users/Dim-P/repos",
                    "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_reviewers": [
                    {
                        "login": "novykh",
                        "id": 601483,
                        "node_id": "MDQ6VXNlcjYwMTQ4Mw==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/601483?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/novykh",
                        "html_url": "https://github.com/novykh",
                        "followers_url": "https://api.github.com/users/novykh/followers",
                        "following_url": "https://api.github.com/users/novykh/following{/other_user}",
                        "gists_url": "https://api.github.com/users/novykh/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/novykh/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/novykh/subscriptions",
                        "organizations_url": "https://api.github.com/users/novykh/orgs",
                        "repos_url": "https://api.github.com/users/novykh/repos",
                        "events_url": "https://api.github.com/users/novykh/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/novykh/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ferroin",
                        "id": 905151,
                        "node_id": "MDQ6VXNlcjkwNTE1MQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/905151?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ferroin",
                        "html_url": "https://github.com/Ferroin",
                        "followers_url": "https://api.github.com/users/Ferroin/followers",
                        "following_url": "https://api.github.com/users/Ferroin/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ferroin/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ferroin/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ferroin/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ferroin/orgs",
                        "repos_url": "https://api.github.com/users/Ferroin/repos",
                        "events_url": "https://api.github.com/users/Ferroin/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ferroin/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "MrZammler",
                        "id": 1905463,
                        "node_id": "MDQ6VXNlcjE5MDU0NjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/1905463?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/MrZammler",
                        "html_url": "https://github.com/MrZammler",
                        "followers_url": "https://api.github.com/users/MrZammler/followers",
                        "following_url": "https://api.github.com/users/MrZammler/following{/other_user}",
                        "gists_url": "https://api.github.com/users/MrZammler/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/MrZammler/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/MrZammler/subscriptions",
                        "organizations_url": "https://api.github.com/users/MrZammler/orgs",
                        "repos_url": "https://api.github.com/users/MrZammler/repos",
                        "events_url": "https://api.github.com/users/MrZammler/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/MrZammler/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "andrewm4894",
                        "id": 2178292,
                        "node_id": "MDQ6VXNlcjIxNzgyOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2178292?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/andrewm4894",
                        "html_url": "https://github.com/andrewm4894",
                        "followers_url": "https://api.github.com/users/andrewm4894/followers",
                        "following_url": "https://api.github.com/users/andrewm4894/following{/other_user}",
                        "gists_url": "https://api.github.com/users/andrewm4894/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/andrewm4894/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/andrewm4894/subscriptions",
                        "organizations_url": "https://api.github.com/users/andrewm4894/orgs",
                        "repos_url": "https://api.github.com/users/andrewm4894/repos",
                        "events_url": "https://api.github.com/users/andrewm4894/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/andrewm4894/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ktsaou",
                        "id": 2662304,
                        "node_id": "MDQ6VXNlcjI2NjIzMDQ=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/2662304?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ktsaou",
                        "html_url": "https://github.com/ktsaou",
                        "followers_url": "https://api.github.com/users/ktsaou/followers",
                        "following_url": "https://api.github.com/users/ktsaou/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ktsaou/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ktsaou/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ktsaou/subscriptions",
                        "organizations_url": "https://api.github.com/users/ktsaou/orgs",
                        "repos_url": "https://api.github.com/users/ktsaou/repos",
                        "events_url": "https://api.github.com/users/ktsaou/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ktsaou/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "jacekkolasa",
                        "id": 5786722,
                        "node_id": "MDQ6VXNlcjU3ODY3MjI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5786722?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jacekkolasa",
                        "html_url": "https://github.com/jacekkolasa",
                        "followers_url": "https://api.github.com/users/jacekkolasa/followers",
                        "following_url": "https://api.github.com/users/jacekkolasa/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jacekkolasa/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jacekkolasa/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jacekkolasa/subscriptions",
                        "organizations_url": "https://api.github.com/users/jacekkolasa/orgs",
                        "repos_url": "https://api.github.com/users/jacekkolasa/repos",
                        "events_url": "https://api.github.com/users/jacekkolasa/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jacekkolasa/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "underhood",
                        "id": 6674623,
                        "node_id": "MDQ6VXNlcjY2NzQ2MjM=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/6674623?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/underhood",
                        "html_url": "https://github.com/underhood",
                        "followers_url": "https://api.github.com/users/underhood/followers",
                        "following_url": "https://api.github.com/users/underhood/following{/other_user}",
                        "gists_url": "https://api.github.com/users/underhood/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/underhood/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/underhood/subscriptions",
                        "organizations_url": "https://api.github.com/users/underhood/orgs",
                        "repos_url": "https://api.github.com/users/underhood/repos",
                        "events_url": "https://api.github.com/users/underhood/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/underhood/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "tkatsoulas",
                        "id": 12612986,
                        "node_id": "MDQ6VXNlcjEyNjEyOTg2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/12612986?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/tkatsoulas",
                        "html_url": "https://github.com/tkatsoulas",
                        "followers_url": "https://api.github.com/users/tkatsoulas/followers",
                        "following_url": "https://api.github.com/users/tkatsoulas/following{/other_user}",
                        "gists_url": "https://api.github.com/users/tkatsoulas/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/tkatsoulas/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/tkatsoulas/subscriptions",
                        "organizations_url": "https://api.github.com/users/tkatsoulas/orgs",
                        "repos_url": "https://api.github.com/users/tkatsoulas/repos",
                        "events_url": "https://api.github.com/users/tkatsoulas/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/tkatsoulas/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "ilyam8",
                        "id": 22274335,
                        "node_id": "MDQ6VXNlcjIyMjc0MzM1",
                        "avatar_url": "https://avatars.githubusercontent.com/u/22274335?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/ilyam8",
                        "html_url": "https://github.com/ilyam8",
                        "followers_url": "https://api.github.com/users/ilyam8/followers",
                        "following_url": "https://api.github.com/users/ilyam8/following{/other_user}",
                        "gists_url": "https://api.github.com/users/ilyam8/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/ilyam8/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/ilyam8/subscriptions",
                        "organizations_url": "https://api.github.com/users/ilyam8/orgs",
                        "repos_url": "https://api.github.com/users/ilyam8/repos",
                        "events_url": "https://api.github.com/users/ilyam8/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/ilyam8/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "vkalintiris",
                        "id": 25480816,
                        "node_id": "MDQ6VXNlcjI1NDgwODE2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/25480816?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/vkalintiris",
                        "html_url": "https://github.com/vkalintiris",
                        "followers_url": "https://api.github.com/users/vkalintiris/followers",
                        "following_url": "https://api.github.com/users/vkalintiris/following{/other_user}",
                        "gists_url": "https://api.github.com/users/vkalintiris/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/vkalintiris/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/vkalintiris/subscriptions",
                        "organizations_url": "https://api.github.com/users/vkalintiris/orgs",
                        "repos_url": "https://api.github.com/users/vkalintiris/repos",
                        "events_url": "https://api.github.com/users/vkalintiris/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/vkalintiris/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "netdatabot",
                        "id": 43409846,
                        "node_id": "MDQ6VXNlcjQzNDA5ODQ2",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43409846?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdatabot",
                        "html_url": "https://github.com/netdatabot",
                        "followers_url": "https://api.github.com/users/netdatabot/followers",
                        "following_url": "https://api.github.com/users/netdatabot/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdatabot/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdatabot/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdatabot/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdatabot/orgs",
                        "repos_url": "https://api.github.com/users/netdatabot/repos",
                        "events_url": "https://api.github.com/users/netdatabot/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdatabot/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "stelfrag",
                        "id": 52996999,
                        "node_id": "MDQ6VXNlcjUyOTk2OTk5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/52996999?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/stelfrag",
                        "html_url": "https://github.com/stelfrag",
                        "followers_url": "https://api.github.com/users/stelfrag/followers",
                        "following_url": "https://api.github.com/users/stelfrag/following{/other_user}",
                        "gists_url": "https://api.github.com/users/stelfrag/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/stelfrag/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/stelfrag/subscriptions",
                        "organizations_url": "https://api.github.com/users/stelfrag/orgs",
                        "repos_url": "https://api.github.com/users/stelfrag/repos",
                        "events_url": "https://api.github.com/users/stelfrag/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/stelfrag/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    {
                        "login": "Ancairon",
                        "id": 70198089,
                        "node_id": "MDQ6VXNlcjcwMTk4MDg5",
                        "avatar_url": "https://avatars.githubusercontent.com/u/70198089?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Ancairon",
                        "html_url": "https://github.com/Ancairon",
                        "followers_url": "https://api.github.com/users/Ancairon/followers",
                        "following_url": "https://api.github.com/users/Ancairon/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Ancairon/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Ancairon/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Ancairon/subscriptions",
                        "organizations_url": "https://api.github.com/users/Ancairon/orgs",
                        "repos_url": "https://api.github.com/users/Ancairon/repos",
                        "events_url": "https://api.github.com/users/Ancairon/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Ancairon/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "requested_teams": [],
                "labels": [
                    {
                        "id": 301643335,
                        "node_id": "MDU6TGFiZWwzMDE2NDMzMzU=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/ci",
                        "name": "area/ci",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 351418949,
                        "node_id": "MDU6TGFiZWwzNTE0MTg5NDk=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/packaging",
                        "name": "area/packaging",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Packaging and operating systems support"
                    },
                    {
                        "id": 351419251,
                        "node_id": "MDU6TGFiZWwzNTE0MTkyNTE=",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/docs",
                        "name": "area/docs",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1065924531,
                        "node_id": "MDU6TGFiZWwxMDY1OTI0NTMx",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/web",
                        "name": "area/web",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1131633615,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNjE1",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/collectors",
                        "name": "area/collectors",
                        "color": "0288D1",
                        "default": false,
                        "description": "Everything related to data collection"
                    },
                    {
                        "id": 1131633776,
                        "node_id": "MDU6TGFiZWwxMTMxNjMzNzc2",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/daemon",
                        "name": "area/daemon",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1133129254,
                        "node_id": "MDU6TGFiZWwxMTMzMTI5MjU0",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/tests",
                        "name": "area/tests",
                        "color": "0f34c6",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 1512177950,
                        "node_id": "MDU6TGFiZWwxNTEyMTc3OTUw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/Epic",
                        "name": "Epic",
                        "color": "3E4B9E",
                        "default": false,
                        "description": null
                    },
                    {
                        "id": 1889651768,
                        "node_id": "MDU6TGFiZWwxODg5NjUxNzY4",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/area/build",
                        "name": "area/build",
                        "color": "0f34c6",
                        "default": false,
                        "description": "Build system (autotools and cmake)."
                    },
                    {
                        "id": 4028281282,
                        "node_id": "LA_kwDOAKPxd87wGrHC",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/apps",
                        "name": "collectors/apps",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4028421923,
                        "node_id": "LA_kwDOAKPxd87wHNcj",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/collectors/plugins.d",
                        "name": "collectors/plugins.d",
                        "color": "3F33E7",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4657059379,
                        "node_id": "LA_kwDOAKPxd88AAAABFZUWMw",
                        "url": "https://api.github.com/repos/netdata/netdata/labels/run-ci/codeql",
                        "name": "run-ci/codeql",
                        "color": "B1A6FB",
                        "default": false,
                        "description": "Force running CodeQL checks on labeled PRs even if they would not normally run."
                    }
                ],
                "milestone": null,
                "draft": false,
                "commits_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits",
                "review_comments_url": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments",
                "review_comment_url": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/netdata/netdata/issues/13291/comments",
                "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7",
                "head": {
                    "label": "Dim-P:logs-manag-master",
                    "ref": "logs-manag-master",
                    "sha": "5f3cbb949dc429ea352d42f4913916f478584ea7",
                    "user": {
                        "login": "Dim-P",
                        "id": 5953192,
                        "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                        "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/Dim-P",
                        "html_url": "https://github.com/Dim-P",
                        "followers_url": "https://api.github.com/users/Dim-P/followers",
                        "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                        "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                        "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                        "repos_url": "https://api.github.com/users/Dim-P/repos",
                        "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                        "type": "User",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 346155793,
                        "node_id": "MDEwOlJlcG9zaXRvcnkzNDYxNTU3OTM=",
                        "name": "netdata",
                        "full_name": "Dim-P/netdata",
                        "private": false,
                        "owner": {
                            "login": "Dim-P",
                            "id": 5953192,
                            "node_id": "MDQ6VXNlcjU5NTMxOTI=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/5953192?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/Dim-P",
                            "html_url": "https://github.com/Dim-P",
                            "followers_url": "https://api.github.com/users/Dim-P/followers",
                            "following_url": "https://api.github.com/users/Dim-P/following{/other_user}",
                            "gists_url": "https://api.github.com/users/Dim-P/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/Dim-P/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/Dim-P/subscriptions",
                            "organizations_url": "https://api.github.com/users/Dim-P/orgs",
                            "repos_url": "https://api.github.com/users/Dim-P/repos",
                            "events_url": "https://api.github.com/users/Dim-P/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/Dim-P/received_events",
                            "type": "User",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/Dim-P/netdata",
                        "description": "Real-time performance monitoring, done right! https://www.netdata.cloud",
                        "fork": true,
                        "url": "https://api.github.com/repos/Dim-P/netdata",
                        "forks_url": "https://api.github.com/repos/Dim-P/netdata/forks",
                        "keys_url": "https://api.github.com/repos/Dim-P/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/Dim-P/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/Dim-P/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/Dim-P/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/Dim-P/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/Dim-P/netdata/events",
                        "assignees_url": "https://api.github.com/repos/Dim-P/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/Dim-P/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/Dim-P/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/Dim-P/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/Dim-P/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/Dim-P/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/Dim-P/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/Dim-P/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/Dim-P/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/Dim-P/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/Dim-P/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/Dim-P/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/Dim-P/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/Dim-P/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/Dim-P/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/Dim-P/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/Dim-P/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/Dim-P/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/Dim-P/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/Dim-P/netdata/merges",
                        "archive_url": "https://api.github.com/repos/Dim-P/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/Dim-P/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/Dim-P/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/Dim-P/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/Dim-P/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/Dim-P/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/Dim-P/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/Dim-P/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/Dim-P/netdata/deployments",
                        "created_at": "2021-03-09T22:00:26Z",
                        "updated_at": "2022-03-31T18:16:08Z",
                        "pushed_at": "2023-10-26T19:00:38Z",
                        "git_url": "git://github.com/Dim-P/netdata.git",
                        "ssh_url": "git@github.com:Dim-P/netdata.git",
                        "clone_url": "https://github.com/Dim-P/netdata.git",
                        "svn_url": "https://github.com/Dim-P/netdata",
                        "homepage": "",
                        "size": 172597,
                        "stargazers_count": 1,
                        "watchers_count": 1,
                        "language": "C",
                        "has_issues": false,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": true,
                        "has_pages": false,
                        "has_discussions": false,
                        "forks_count": 0,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 0,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [],
                        "visibility": "public",
                        "forks": 0,
                        "open_issues": 0,
                        "watchers": 1,
                        "default_branch": "master"
                    }
                },
                "base": {
                    "label": "netdata:master",
                    "ref": "master",
                    "sha": "fc465e0bf654c21858e4290b5bc927c645b58bcb",
                    "user": {
                        "login": "netdata",
                        "id": 43390781,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                        "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/netdata",
                        "html_url": "https://github.com/netdata",
                        "followers_url": "https://api.github.com/users/netdata/followers",
                        "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                        "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                        "organizations_url": "https://api.github.com/users/netdata/orgs",
                        "repos_url": "https://api.github.com/users/netdata/repos",
                        "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/netdata/received_events",
                        "type": "Organization",
                        "site_admin": false
                    },
                    "repo": {
                        "id": 10744183,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxMDc0NDE4Mw==",
                        "name": "netdata",
                        "full_name": "netdata/netdata",
                        "private": false,
                        "owner": {
                            "login": "netdata",
                            "id": 43390781,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQzMzkwNzgx",
                            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/netdata",
                            "html_url": "https://github.com/netdata",
                            "followers_url": "https://api.github.com/users/netdata/followers",
                            "following_url": "https://api.github.com/users/netdata/following{/other_user}",
                            "gists_url": "https://api.github.com/users/netdata/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/netdata/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/netdata/subscriptions",
                            "organizations_url": "https://api.github.com/users/netdata/orgs",
                            "repos_url": "https://api.github.com/users/netdata/repos",
                            "events_url": "https://api.github.com/users/netdata/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/netdata/received_events",
                            "type": "Organization",
                            "site_admin": false
                        },
                        "html_url": "https://github.com/netdata/netdata",
                        "description": "Monitor your servers, containers, and applications, in high-resolution and in real-time!",
                        "fork": false,
                        "url": "https://api.github.com/repos/netdata/netdata",
                        "forks_url": "https://api.github.com/repos/netdata/netdata/forks",
                        "keys_url": "https://api.github.com/repos/netdata/netdata/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/netdata/netdata/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/netdata/netdata/teams",
                        "hooks_url": "https://api.github.com/repos/netdata/netdata/hooks",
                        "issue_events_url": "https://api.github.com/repos/netdata/netdata/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/netdata/netdata/events",
                        "assignees_url": "https://api.github.com/repos/netdata/netdata/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/netdata/netdata/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/netdata/netdata/tags",
                        "blobs_url": "https://api.github.com/repos/netdata/netdata/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/netdata/netdata/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/netdata/netdata/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/netdata/netdata/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/netdata/netdata/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/netdata/netdata/languages",
                        "stargazers_url": "https://api.github.com/repos/netdata/netdata/stargazers",
                        "contributors_url": "https://api.github.com/repos/netdata/netdata/contributors",
                        "subscribers_url": "https://api.github.com/repos/netdata/netdata/subscribers",
                        "subscription_url": "https://api.github.com/repos/netdata/netdata/subscription",
                        "commits_url": "https://api.github.com/repos/netdata/netdata/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/netdata/netdata/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/netdata/netdata/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/netdata/netdata/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/netdata/netdata/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/netdata/netdata/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/netdata/netdata/merges",
                        "archive_url": "https://api.github.com/repos/netdata/netdata/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/netdata/netdata/downloads",
                        "issues_url": "https://api.github.com/repos/netdata/netdata/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/netdata/netdata/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/netdata/netdata/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/netdata/netdata/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/netdata/netdata/labels{/name}",
                        "releases_url": "https://api.github.com/repos/netdata/netdata/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/netdata/netdata/deployments",
                        "created_at": "2013-06-17T18:39:10Z",
                        "updated_at": "2023-10-27T02:27:00Z",
                        "pushed_at": "2023-10-27T00:17:12Z",
                        "git_url": "git://github.com/netdata/netdata.git",
                        "ssh_url": "git@github.com:netdata/netdata.git",
                        "clone_url": "https://github.com/netdata/netdata.git",
                        "svn_url": "https://github.com/netdata/netdata",
                        "homepage": "https://www.netdata.cloud",
                        "size": 170565,
                        "stargazers_count": 65636,
                        "watchers_count": 65636,
                        "language": "C",
                        "has_issues": true,
                        "has_projects": true,
                        "has_downloads": true,
                        "has_wiki": false,
                        "has_pages": false,
                        "has_discussions": true,
                        "forks_count": 5710,
                        "mirror_url": null,
                        "archived": false,
                        "disabled": false,
                        "open_issues_count": 368,
                        "license": {
                            "key": "gpl-3.0",
                            "name": "GNU General Public License v3.0",
                            "spdx_id": "GPL-3.0",
                            "url": "https://api.github.com/licenses/gpl-3.0",
                            "node_id": "MDc6TGljZW5zZTk="
                        },
                        "allow_forking": true,
                        "is_template": false,
                        "web_commit_signoff_required": false,
                        "topics": [
                            "alerting",
                            "cncf",
                            "data-visualization",
                            "database",
                            "devops",
                            "docker",
                            "grafana",
                            "influxdb",
                            "kubernetes",
                            "linux",
                            "machine-learning",
                            "mongodb",
                            "monitoring",
                            "mysql",
                            "netdata",
                            "observability",
                            "postgresql",
                            "prometheus",
                            "raspberry-pi",
                            "statsd"
                        ],
                        "visibility": "public",
                        "forks": 5710,
                        "open_issues": 368,
                        "watchers": 65636,
                        "default_branch": "master"
                    }
                },
                "_links": {
                    "self": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291"
                    },
                    "html": {
                        "href": "https://github.com/netdata/netdata/pull/13291"
                    },
                    "issue": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291"
                    },
                    "comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/issues/13291/comments"
                    },
                    "review_comments": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/comments"
                    },
                    "review_comment": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/comments{/number}"
                    },
                    "commits": {
                        "href": "https://api.github.com/repos/netdata/netdata/pulls/13291/commits"
                    },
                    "statuses": {
                        "href": "https://api.github.com/repos/netdata/netdata/statuses/5f3cbb949dc429ea352d42f4913916f478584ea7"
                    }
                },
                "author_association": "CONTRIBUTOR",
                "auto_merge": null,
                "active_lock_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T03:10:00Z",
        "org": {
            "id": 43390781,
            "login": "netdata",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/netdata",
            "avatar_url": "https://avatars.githubusercontent.com/u/43390781?"
        }
    }
]