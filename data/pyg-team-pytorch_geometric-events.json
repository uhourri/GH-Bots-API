[
    {
        "id": "32895320046",
        "type": "WatchEvent",
        "actor": {
            "id": 7403396,
            "login": "penny4860",
            "display_login": "penny4860",
            "gravatar_id": "",
            "url": "https://api.github.com/users/penny4860",
            "avatar_url": "https://avatars.githubusercontent.com/u/7403396?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T10:15:43Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32894371495",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 49785055,
            "login": "flxmr",
            "display_login": "flxmr",
            "gravatar_id": "",
            "url": "https://api.github.com/users/flxmr",
            "avatar_url": "https://avatars.githubusercontent.com/u/49785055?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071",
                "id": 1909597169,
                "node_id": "PR_kwDOBlHMec5bBw5i",
                "number": 8071,
                "title": "Multi-Node-Multi-GPU Tutorial",
                "user": {
                    "login": "puririshi98",
                    "id": 20074092,
                    "node_id": "MDQ6VXNlcjIwMDc0MDky",
                    "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/puririshi98",
                    "html_url": "https://github.com/puririshi98",
                    "followers_url": "https://api.github.com/users/puririshi98/followers",
                    "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                    "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                    "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                    "repos_url": "https://api.github.com/users/puririshi98/repos",
                    "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 1267385588,
                        "node_id": "MDU6TGFiZWwxMjY3Mzg1NTg4",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/feature",
                        "name": "feature",
                        "color": "a2eeef",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 3358952533,
                        "node_id": "MDU6TGFiZWwzMzU4OTUyNTMz",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/documentation",
                        "name": "documentation",
                        "color": "0075ca",
                        "default": true,
                        "description": ""
                    },
                    {
                        "id": 3358958308,
                        "node_id": "MDU6TGFiZWwzMzU4OTU4MzA4",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/1%20-%20Priority%20P1",
                        "name": "1 - Priority P1",
                        "color": "FBCA04",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4017636777,
                        "node_id": "LA_kwDOBlHMec7veEWp",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/example",
                        "name": "example",
                        "color": "27D88A",
                        "default": false,
                        "description": ""
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": {
                    "login": "puririshi98",
                    "id": 20074092,
                    "node_id": "MDQ6VXNlcjIwMDc0MDky",
                    "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/puririshi98",
                    "html_url": "https://github.com/puririshi98",
                    "followers_url": "https://api.github.com/users/puririshi98/followers",
                    "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                    "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                    "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                    "repos_url": "https://api.github.com/users/puririshi98/repos",
                    "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "puririshi98",
                        "id": 20074092,
                        "node_id": "MDQ6VXNlcjIwMDc0MDky",
                        "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/puririshi98",
                        "html_url": "https://github.com/puririshi98",
                        "followers_url": "https://api.github.com/users/puririshi98/followers",
                        "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                        "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                        "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                        "repos_url": "https://api.github.com/users/puririshi98/repos",
                        "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "milestone": null,
                "comments": 5,
                "created_at": "2023-09-22T22:48:13Z",
                "updated_at": "2023-10-27T09:39:30Z",
                "closed_at": "2023-10-24T05:22:48Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/pulls/8071",
                    "html_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071",
                    "diff_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071.diff",
                    "patch_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071.patch",
                    "merged_at": "2023-10-24T05:22:48Z"
                },
                "body": "ready for review",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782611503",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071#issuecomment-1782611503",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071",
                "id": 1782611503,
                "node_id": "IC_kwDOBlHMec5qQH4v",
                "user": {
                    "login": "flxmr",
                    "id": 49785055,
                    "node_id": "MDQ6VXNlcjQ5Nzg1MDU1",
                    "avatar_url": "https://avatars.githubusercontent.com/u/49785055?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/flxmr",
                    "html_url": "https://github.com/flxmr",
                    "followers_url": "https://api.github.com/users/flxmr/followers",
                    "following_url": "https://api.github.com/users/flxmr/following{/other_user}",
                    "gists_url": "https://api.github.com/users/flxmr/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/flxmr/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/flxmr/subscriptions",
                    "organizations_url": "https://api.github.com/users/flxmr/orgs",
                    "repos_url": "https://api.github.com/users/flxmr/repos",
                    "events_url": "https://api.github.com/users/flxmr/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/flxmr/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T09:39:30Z",
                "updated_at": "2023-10-27T09:39:30Z",
                "author_association": "NONE",
                "body": "Yes, we will prepare something the upcoming week. Our own cluster doesn't have any container-integration, but I found an university-available array of DGX-systems which have, so we can also integrate the container instructions.",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782611503/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T09:39:30Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32893933613",
        "type": "WatchEvent",
        "actor": {
            "id": 45214467,
            "login": "bdfsaraiva",
            "display_login": "bdfsaraiva",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdfsaraiva",
            "avatar_url": "https://avatars.githubusercontent.com/u/45214467?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T09:22:58Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32892562514",
        "type": "IssuesEvent",
        "actor": {
            "id": 95291314,
            "login": "QuentinSoubeyranAqemia",
            "display_login": "QuentinSoubeyranAqemia",
            "gravatar_id": "",
            "url": "https://api.github.com/users/QuentinSoubeyranAqemia",
            "avatar_url": "https://avatars.githubusercontent.com/u/95291314?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "opened",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8272",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8272/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8272/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8272/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8272",
                "id": 1965032511,
                "node_id": "I_kwDOBlHMec51IAQ_",
                "number": 8272,
                "title": "`torch_gemoetric.data.Data.subgraph()` fails on graph without edges",
                "user": {
                    "login": "QuentinSoubeyranAqemia",
                    "id": 95291314,
                    "node_id": "U_kgDOBa4Hsg",
                    "avatar_url": "https://avatars.githubusercontent.com/u/95291314?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/QuentinSoubeyranAqemia",
                    "html_url": "https://github.com/QuentinSoubeyranAqemia",
                    "followers_url": "https://api.github.com/users/QuentinSoubeyranAqemia/followers",
                    "following_url": "https://api.github.com/users/QuentinSoubeyranAqemia/following{/other_user}",
                    "gists_url": "https://api.github.com/users/QuentinSoubeyranAqemia/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/QuentinSoubeyranAqemia/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/QuentinSoubeyranAqemia/subscriptions",
                    "organizations_url": "https://api.github.com/users/QuentinSoubeyranAqemia/orgs",
                    "repos_url": "https://api.github.com/users/QuentinSoubeyranAqemia/repos",
                    "events_url": "https://api.github.com/users/QuentinSoubeyranAqemia/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/QuentinSoubeyranAqemia/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 712483737,
                        "node_id": "MDU6TGFiZWw3MTI0ODM3Mzc=",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/bug",
                        "name": "bug",
                        "color": "d73a4a",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 0,
                "created_at": "2023-10-27T08:31:02Z",
                "updated_at": "2023-10-27T08:31:02Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### \ud83d\udc1b Describe the bug\n\n### Description\r\nCalling `torch_geometric.data.Data.subgraph` on a graph with no edge (no `edge_index` attribute) raises an `AttributeError: 'NoneType' object has no attribute 'device'`.\r\n\r\n### Expected behavior\r\nThe method correclty returns a subgraph of the current graph, with only the `pos`, `x`, `y`, etc... for the selected nodes.\r\n\r\n### Minimal Reproducible Example\r\n\r\n```python\r\nimport torch\r\nfrom pytorch_geometric import data\r\n\r\ngraph = data.Data(\r\n    pos=torch.Tensor([[0, 0, 0], [1, 1, 1]]),\r\n    x=torch.Tensor([[0], [1]]),\r\n)\r\ngraph.subgraph(torch.LongTensor([0]))  # AttributeError: NoneType has no attribute 'device'\r\n```\r\n\r\n### Workaround\r\nDefine an empty `edge_index` attribute (`torch.LongTensor([[], []])`) before calling subgraph, and remove it afterward\r\n\r\n### Context\r\nThe edges are not yet define on my graphs because they are built afterward by code I do not control. After loading data, graphs I produce contains many nodes which I don't need, which I thus filter out with `.subgraph()` (at data-loading time) to produce smaller graph and reduce load.\r\n\r\n### Details of the bug\r\n\r\nBug is due to:\r\n1. `torch_geometric.data.Data.edge_index` is an [optional attribute (doc)](https://pytorch-geometric.readthedocs.io/en/latest/get_started/introduction.html#data-handling-of-graphs) that might be missing (e.g. graphs with only nodes, where edges are to be built later)\r\n2. [`torch_geometric.data.Data.subgraph`](https://github.com/pyg-team/pytorch_geometric/blob/3752d94447950e83e9d6e03c1332d0c031a2376c/torch_geometric/data/data.py#L626-L634) unconditionally passes `self.edge_index` to `torch_geometric.utils.subgraph.subgraph()`, even though it might be undefined and thus `None`\r\n3. [`torch.utils.subgraph.subgraph()`](https://github.com/pyg-team/pytorch_geometric/blob/3752d94447950e83e9d6e03c1332d0c031a2376c/torch_geometric/utils/subgraph.py#L42) expects a `torch.Tensor` as the `edge_index` attribute\r\n\r\nNot sure which `subgraph()` routines needs to be fixed. I'd lean toward `utils.subgraph.subgraph()` because it makes sense to take the subgraph of an edge-less graph.\r\n\n\n### Environment\n\n* PyG version: `2.4.0` (bug still present in repo `master` source code AFAIK)\r\n* PyTorch version: `2.1.0+cpu`\r\n* OS: Linux\r\n* Python version: `3.8.18`\r\n* CUDA/cuDNN version: N/A\r\n* How you installed PyTorch and PyG (`conda`, `pip`, source): `pip`\r\n* Any other relevant information (*e.g.*, version of `torch-scatter`): N/A",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8272/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8272/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T08:31:03Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32891651087",
        "type": "WatchEvent",
        "actor": {
            "id": 13744757,
            "login": "leiyuan1989",
            "display_login": "leiyuan1989",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leiyuan1989",
            "avatar_url": "https://avatars.githubusercontent.com/u/13744757?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T07:55:04Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32891373663",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 779688,
            "login": "mova",
            "display_login": "mova",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mova",
            "avatar_url": "https://avatars.githubusercontent.com/u/779688?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8226",
                "id": 1952624748,
                "node_id": "I_kwDOBlHMec50YrBs",
                "number": 8226,
                "title": "Manipulation tools for Batches",
                "user": {
                    "login": "mova",
                    "id": 779688,
                    "node_id": "MDQ6VXNlcjc3OTY4OA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/779688?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mova",
                    "html_url": "https://github.com/mova",
                    "followers_url": "https://api.github.com/users/mova/followers",
                    "following_url": "https://api.github.com/users/mova/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mova/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mova/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mova/subscriptions",
                    "organizations_url": "https://api.github.com/users/mova/orgs",
                    "repos_url": "https://api.github.com/users/mova/repos",
                    "events_url": "https://api.github.com/users/mova/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mova/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 1267385588,
                        "node_id": "MDU6TGFiZWwxMjY3Mzg1NTg4",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/feature",
                        "name": "feature",
                        "color": "a2eeef",
                        "default": false,
                        "description": ""
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 9,
                "created_at": "2023-10-19T16:13:24Z",
                "updated_at": "2023-10-27T07:43:30Z",
                "closed_at": null,
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### \ud83d\ude80 The feature, motivation and pitch\n\nCurrently,  Batches should not manipulated once created.\r\nYet, I would be useful to be able \r\n- create batches from an index (`init_batch`)\r\n- add features for the nodes/edges/graph (`add_?_attr`)\r\n- concatenate and slice batches (`from_batch_list` and TBD)\r\nwithout turning the batch into a list and batching the list again.\r\nI have implemented these functions here:\r\nhttps://github.com/DeGeSim/caloutils/blob/main/caloutils/utils/batch.py\r\nTests \r\nhttps://github.com/DeGeSim/caloutils/blob/main/tests/test_batch.py\r\nDo you see any chance of integrating this? \r\nWhat would need to happen before that? \r\nCheers!\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782452734",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8226#issuecomment-1782452734",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8226",
                "id": 1782452734,
                "node_id": "IC_kwDOBlHMec5qPhH-",
                "user": {
                    "login": "mova",
                    "id": 779688,
                    "node_id": "MDQ6VXNlcjc3OTY4OA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/779688?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mova",
                    "html_url": "https://github.com/mova",
                    "followers_url": "https://api.github.com/users/mova/followers",
                    "following_url": "https://api.github.com/users/mova/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mova/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mova/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/mova/subscriptions",
                    "organizations_url": "https://api.github.com/users/mova/orgs",
                    "repos_url": "https://api.github.com/users/mova/repos",
                    "events_url": "https://api.github.com/users/mova/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/mova/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T07:43:29Z",
                "updated_at": "2023-10-27T07:43:29Z",
                "author_association": "CONTRIBUTOR",
                "body": "Yes, I will. It may take a bit, Im not available  next week. \n Would you want this in the `data.Batch` class or in a new class? \nIt looks to me like the existing Batch class can handle heterogeneous graphs, while my current implementation would likely need significant work to handle that. I haven't checked though. \n\nAm 26. Oktober 2023 20:45:42 MESZ schrieb Matthias Fey ***@***.***>:\n>Thank you. Do you have interest in submitting a PR for this?\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/pyg-team/pytorch_geometric/issues/8226#issuecomment-1781688267\n>You are receiving this because you authored the thread.\n>\n>Message ID: ***@***.***>",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782452734/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T07:43:30Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32890913602",
        "type": "PushEvent",
        "actor": {
            "id": 97102979,
            "login": "JakubPietrakIntel",
            "display_login": "JakubPietrakIntel",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JakubPietrakIntel",
            "avatar_url": "https://avatars.githubusercontent.com/u/97102979?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15587939977,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/intel/dist-test-e2e-3",
            "head": "bca23f5f115d98567c922278a674dcd641324fc5",
            "before": "b55d56e0c0c9c22c3a4816c11d93a4d4d3ab5cf5",
            "commits": [
                {
                    "sha": "bca23f5f115d98567c922278a674dcd641324fc5",
                    "author": {
                        "email": "kinga.gajdamowicz@intel.com",
                        "name": "kgajdamo"
                    },
                    "message": "add comments",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/bca23f5f115d98567c922278a674dcd641324fc5"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-27T07:24:05Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32890419345",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 11624203,
            "login": "OswaldoBornemann",
            "display_login": "OswaldoBornemann",
            "gravatar_id": "",
            "url": "https://api.github.com/users/OswaldoBornemann",
            "avatar_url": "https://avatars.githubusercontent.com/u/11624203?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8261",
                "id": 1961074197,
                "node_id": "I_kwDOBlHMec50454V",
                "number": 8261,
                "title": "How to use GPSConv to the node classification task ?",
                "user": {
                    "login": "OswaldoBornemann",
                    "id": 11624203,
                    "node_id": "MDQ6VXNlcjExNjI0MjAz",
                    "avatar_url": "https://avatars.githubusercontent.com/u/11624203?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/OswaldoBornemann",
                    "html_url": "https://github.com/OswaldoBornemann",
                    "followers_url": "https://api.github.com/users/OswaldoBornemann/followers",
                    "following_url": "https://api.github.com/users/OswaldoBornemann/following{/other_user}",
                    "gists_url": "https://api.github.com/users/OswaldoBornemann/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/OswaldoBornemann/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/OswaldoBornemann/subscriptions",
                    "organizations_url": "https://api.github.com/users/OswaldoBornemann/orgs",
                    "repos_url": "https://api.github.com/users/OswaldoBornemann/repos",
                    "events_url": "https://api.github.com/users/OswaldoBornemann/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/OswaldoBornemann/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 3358959205,
                        "node_id": "MDU6TGFiZWwzMzU4OTU5MjA1",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/question",
                        "name": "question",
                        "color": "d876e3",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 2,
                "created_at": "2023-10-25T10:33:54Z",
                "updated_at": "2023-10-27T07:01:52Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### \ud83d\udc1b Describe the bug\r\n\r\nHow do we use GPSConv for the node classification task?\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782402567",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8261#issuecomment-1782402567",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8261",
                "id": 1782402567,
                "node_id": "IC_kwDOBlHMec5qPU4H",
                "user": {
                    "login": "OswaldoBornemann",
                    "id": 11624203,
                    "node_id": "MDQ6VXNlcjExNjI0MjAz",
                    "avatar_url": "https://avatars.githubusercontent.com/u/11624203?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/OswaldoBornemann",
                    "html_url": "https://github.com/OswaldoBornemann",
                    "followers_url": "https://api.github.com/users/OswaldoBornemann/followers",
                    "following_url": "https://api.github.com/users/OswaldoBornemann/following{/other_user}",
                    "gists_url": "https://api.github.com/users/OswaldoBornemann/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/OswaldoBornemann/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/OswaldoBornemann/subscriptions",
                    "organizations_url": "https://api.github.com/users/OswaldoBornemann/orgs",
                    "repos_url": "https://api.github.com/users/OswaldoBornemann/repos",
                    "events_url": "https://api.github.com/users/OswaldoBornemann/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/OswaldoBornemann/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T07:01:51Z",
                "updated_at": "2023-10-27T07:01:51Z",
                "author_association": "NONE",
                "body": "I see. So i only need to add a linear to classify it?",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782402567/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T07:01:52Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32887830874",
        "type": "WatchEvent",
        "actor": {
            "id": 26650445,
            "login": "ajeetbpr",
            "display_login": "ajeetbpr",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajeetbpr",
            "avatar_url": "https://avatars.githubusercontent.com/u/26650445?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T04:19:09Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32886862610",
        "type": "WatchEvent",
        "actor": {
            "id": 48644550,
            "login": "lh123cha",
            "display_login": "lh123cha",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lh123cha",
            "avatar_url": "https://avatars.githubusercontent.com/u/48644550?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T02:59:59Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32886641970",
        "type": "WatchEvent",
        "actor": {
            "id": 47173434,
            "login": "tkwongspace",
            "display_login": "tkwongspace",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tkwongspace",
            "avatar_url": "https://avatars.githubusercontent.com/u/47173434?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T02:42:00Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32886426347",
        "type": "WatchEvent",
        "actor": {
            "id": 48900843,
            "login": "thfthf123",
            "display_login": "thfthf123",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thfthf123",
            "avatar_url": "https://avatars.githubusercontent.com/u/48900843?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T02:24:48Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32886217026",
        "type": "WatchEvent",
        "actor": {
            "id": 86586602,
            "login": "KNUAI",
            "display_login": "KNUAI",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KNUAI",
            "avatar_url": "https://avatars.githubusercontent.com/u/86586602?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T02:08:30Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32885517753",
        "type": "IssuesEvent",
        "actor": {
            "id": 80442548,
            "login": "songsong0425",
            "display_login": "songsong0425",
            "gravatar_id": "",
            "url": "https://api.github.com/users/songsong0425",
            "avatar_url": "https://avatars.githubusercontent.com/u/80442548?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "opened",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8271",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8271/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8271/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8271/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8271",
                "id": 1964597789,
                "node_id": "I_kwDOBlHMec51GWId",
                "number": 8271,
                "title": "Add NDCG@K for link prediction performance evaluation",
                "user": {
                    "login": "songsong0425",
                    "id": 80442548,
                    "node_id": "MDQ6VXNlcjgwNDQyNTQ4",
                    "avatar_url": "https://avatars.githubusercontent.com/u/80442548?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/songsong0425",
                    "html_url": "https://github.com/songsong0425",
                    "followers_url": "https://api.github.com/users/songsong0425/followers",
                    "following_url": "https://api.github.com/users/songsong0425/following{/other_user}",
                    "gists_url": "https://api.github.com/users/songsong0425/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/songsong0425/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/songsong0425/subscriptions",
                    "organizations_url": "https://api.github.com/users/songsong0425/orgs",
                    "repos_url": "https://api.github.com/users/songsong0425/repos",
                    "events_url": "https://api.github.com/users/songsong0425/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/songsong0425/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 0,
                "created_at": "2023-10-27T01:14:48Z",
                "updated_at": "2023-10-27T01:14:48Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "Dear PyG community,\r\n\r\nHi, always thank you for your effort in package maintenance and development.\r\nWhen I tried to implement the link prediction metrics (i.e., hits@k, ndcg@k), I couldn't find the example code for ndcg@k.\r\nCan you consider adding the example about the ndcg@k for the evaluation metrics?\r\nIf it has already existed and I missed it, can anyone tell me where can I find it?\r\n\r\nThank you for reading!\r\n\r\n_Originally posted by @songsong0425 in https://github.com/pyg-team/pytorch_geometric/discussions/7792_",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8271/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8271/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T01:14:50Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32885195049",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 100210376,
            "login": "Tyqfat",
            "display_login": "Tyqfat",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tyqfat",
            "avatar_url": "https://avatars.githubusercontent.com/u/100210376?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8257",
                "id": 1958808448,
                "node_id": "I_kwDOBlHMec50wQuA",
                "number": 8257,
                "title": "Request code to implement XENet paper",
                "user": {
                    "login": "Tyqfat",
                    "id": 100210376,
                    "node_id": "U_kgDOBfkWyA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/100210376?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Tyqfat",
                    "html_url": "https://github.com/Tyqfat",
                    "followers_url": "https://api.github.com/users/Tyqfat/followers",
                    "following_url": "https://api.github.com/users/Tyqfat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Tyqfat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Tyqfat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Tyqfat/subscriptions",
                    "organizations_url": "https://api.github.com/users/Tyqfat/orgs",
                    "repos_url": "https://api.github.com/users/Tyqfat/repos",
                    "events_url": "https://api.github.com/users/Tyqfat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Tyqfat/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 1267385588,
                        "node_id": "MDU6TGFiZWwxMjY3Mzg1NTg4",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/feature",
                        "name": "feature",
                        "color": "a2eeef",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 3358954271,
                        "node_id": "MDU6TGFiZWwzMzU4OTU0Mjcx",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/good%20first%20issue",
                        "name": "good first issue",
                        "color": "7057ff",
                        "default": true,
                        "description": ""
                    },
                    {
                        "id": 3358956745,
                        "node_id": "MDU6TGFiZWwzMzU4OTU2NzQ1",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/help%20wanted",
                        "name": "help wanted",
                        "color": "008672",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 2,
                "created_at": "2023-10-24T08:58:16Z",
                "updated_at": "2023-10-27T00:49:27Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### \ud83d\ude80 The feature, motivation and pitch\r\n\r\n- Paper: XENet: Using a new graph convolution to accelerate the timeline for protein design on quantum computers\r\n-  This paper introduces XENet, a new graph convolutional network designed to improve the representation of protein environments in sequence design protocols. By paying attention to both incoming and outgoing edge attributes, XENet is able to better model local kinematics problems such as protein design. The paper compares XENet to existing graph convolutions and demonstrates its ability to decrease rotamer sample counts in Rosetta's rotamer substitution protocol by 40% without loss in quality. This allows larger protein design problems to fit onto near-term quantum computers. Additionally, XENet displays an ability to handle deeper architectures than competing convolutions. The authors believe that their work is relevant to the field of protein design and can lead to further advancements in artificial intelligence brought forth by graph neural networks.\r\n- Main feature: XEnet can take node features and edge features as input, output potential node features and edge features, and can be used for both node classification and edge classification.\r\n\r\n### Alternatives\r\n\r\nThe code solution is:\r\nIn TensorFlow 2, We can use the XENetConv class in the Spektral library to implement the Xception convolutional layer.\r\n\r\n### Additional context\r\n\r\n![image](https://github.com/pyg-team/pytorch_geometric/assets/100210376/c21f27d9-7e51-4ecb-92ba-4321fd529ca3)\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782126483",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8257#issuecomment-1782126483",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8257",
                "id": 1782126483,
                "node_id": "IC_kwDOBlHMec5qOReT",
                "user": {
                    "login": "Tyqfat",
                    "id": 100210376,
                    "node_id": "U_kgDOBfkWyA",
                    "avatar_url": "https://avatars.githubusercontent.com/u/100210376?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/Tyqfat",
                    "html_url": "https://github.com/Tyqfat",
                    "followers_url": "https://api.github.com/users/Tyqfat/followers",
                    "following_url": "https://api.github.com/users/Tyqfat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/Tyqfat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/Tyqfat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/Tyqfat/subscriptions",
                    "organizations_url": "https://api.github.com/users/Tyqfat/orgs",
                    "repos_url": "https://api.github.com/users/Tyqfat/repos",
                    "events_url": "https://api.github.com/users/Tyqfat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/Tyqfat/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-27T00:49:27Z",
                "updated_at": "2023-10-27T00:49:27Z",
                "author_association": "NONE",
                "body": "Absolutely! I am very interested in contributing to this project. As someone who primarily uses PyTorch as my deep learning framework, I find it fascinating. Although I am just getting started with PyG and may need to learn more about it, I am willing to participate in the contribution. Could you please let me know what preparations I need to make before starting?",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1782126483/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-27T00:49:27Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32885127586",
        "type": "WatchEvent",
        "actor": {
            "id": 53250064,
            "login": "fengyunzaidushi",
            "display_login": "fengyunzaidushi",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fengyunzaidushi",
            "avatar_url": "https://avatars.githubusercontent.com/u/53250064?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-27T00:43:53Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32883592530",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071",
                "id": 1909597169,
                "node_id": "PR_kwDOBlHMec5bBw5i",
                "number": 8071,
                "title": "Multi-Node-Multi-GPU Tutorial",
                "user": {
                    "login": "puririshi98",
                    "id": 20074092,
                    "node_id": "MDQ6VXNlcjIwMDc0MDky",
                    "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/puririshi98",
                    "html_url": "https://github.com/puririshi98",
                    "followers_url": "https://api.github.com/users/puririshi98/followers",
                    "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                    "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                    "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                    "repos_url": "https://api.github.com/users/puririshi98/repos",
                    "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 1267385588,
                        "node_id": "MDU6TGFiZWwxMjY3Mzg1NTg4",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/feature",
                        "name": "feature",
                        "color": "a2eeef",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 3358952533,
                        "node_id": "MDU6TGFiZWwzMzU4OTUyNTMz",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/documentation",
                        "name": "documentation",
                        "color": "0075ca",
                        "default": true,
                        "description": ""
                    },
                    {
                        "id": 3358958308,
                        "node_id": "MDU6TGFiZWwzMzU4OTU4MzA4",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/1%20-%20Priority%20P1",
                        "name": "1 - Priority P1",
                        "color": "FBCA04",
                        "default": false,
                        "description": ""
                    },
                    {
                        "id": 4017636777,
                        "node_id": "LA_kwDOBlHMec7veEWp",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/example",
                        "name": "example",
                        "color": "27D88A",
                        "default": false,
                        "description": ""
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": {
                    "login": "puririshi98",
                    "id": 20074092,
                    "node_id": "MDQ6VXNlcjIwMDc0MDky",
                    "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/puririshi98",
                    "html_url": "https://github.com/puririshi98",
                    "followers_url": "https://api.github.com/users/puririshi98/followers",
                    "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                    "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                    "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                    "repos_url": "https://api.github.com/users/puririshi98/repos",
                    "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "assignees": [
                    {
                        "login": "puririshi98",
                        "id": 20074092,
                        "node_id": "MDQ6VXNlcjIwMDc0MDky",
                        "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/puririshi98",
                        "html_url": "https://github.com/puririshi98",
                        "followers_url": "https://api.github.com/users/puririshi98/followers",
                        "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                        "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                        "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                        "repos_url": "https://api.github.com/users/puririshi98/repos",
                        "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                        "type": "User",
                        "site_admin": false
                    }
                ],
                "milestone": null,
                "comments": 4,
                "created_at": "2023-09-22T22:48:13Z",
                "updated_at": "2023-10-26T22:44:10Z",
                "closed_at": "2023-10-24T05:22:48Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "draft": false,
                "pull_request": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/pulls/8071",
                    "html_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071",
                    "diff_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071.diff",
                    "patch_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071.patch",
                    "merged_at": "2023-10-24T05:22:48Z"
                },
                "body": "ready for review",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781990734",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/pull/8071#issuecomment-1781990734",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8071",
                "id": 1781990734,
                "node_id": "IC_kwDOBlHMec5qNwVO",
                "user": {
                    "login": "puririshi98",
                    "id": 20074092,
                    "node_id": "MDQ6VXNlcjIwMDc0MDky",
                    "avatar_url": "https://avatars.githubusercontent.com/u/20074092?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/puririshi98",
                    "html_url": "https://github.com/puririshi98",
                    "followers_url": "https://api.github.com/users/puririshi98/followers",
                    "following_url": "https://api.github.com/users/puririshi98/following{/other_user}",
                    "gists_url": "https://api.github.com/users/puririshi98/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/puririshi98/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/puririshi98/subscriptions",
                    "organizations_url": "https://api.github.com/users/puririshi98/orgs",
                    "repos_url": "https://api.github.com/users/puririshi98/repos",
                    "events_url": "https://api.github.com/users/puririshi98/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/puririshi98/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T22:44:10Z",
                "updated_at": "2023-10-26T22:44:10Z",
                "author_association": "CONTRIBUTOR",
                "body": "@flxmr thank you for your concerns. I will reply back soon w/ more details after discussing internally at NVIDIA.",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781990734/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T22:44:11Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32883509629",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15584004017,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "99b75113218b760736c233f52dc6c752b1dfe2e9",
            "before": "b3f8f155e8bfea6cf6cbeec5758fe1108c344188",
            "commits": [
                {
                    "sha": "99b75113218b760736c233f52dc6c752b1dfe2e9",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "puririshi98"
                    },
                    "message": "cleaning multinode example",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/99b75113218b760736c233f52dc6c752b1dfe2e9"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T22:38:19Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32883041521",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 35433582,
            "login": "he-jesse",
            "display_login": "he-jesse",
            "gravatar_id": "",
            "url": "https://api.github.com/users/he-jesse",
            "avatar_url": "https://avatars.githubusercontent.com/u/35433582?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8200",
                "id": 1944753780,
                "node_id": "I_kwDOBlHMec5z6pZ0",
                "number": 8200,
                "title": "GATconv and GATv2conv ",
                "user": {
                    "login": "SZiesche",
                    "id": 125353938,
                    "node_id": "U_kgDOB3i_0g",
                    "avatar_url": "https://avatars.githubusercontent.com/u/125353938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/SZiesche",
                    "html_url": "https://github.com/SZiesche",
                    "followers_url": "https://api.github.com/users/SZiesche/followers",
                    "following_url": "https://api.github.com/users/SZiesche/following{/other_user}",
                    "gists_url": "https://api.github.com/users/SZiesche/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/SZiesche/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/SZiesche/subscriptions",
                    "organizations_url": "https://api.github.com/users/SZiesche/orgs",
                    "repos_url": "https://api.github.com/users/SZiesche/repos",
                    "events_url": "https://api.github.com/users/SZiesche/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/SZiesche/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 3358952533,
                        "node_id": "MDU6TGFiZWwzMzU4OTUyNTMz",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/documentation",
                        "name": "documentation",
                        "color": "0075ca",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 8,
                "created_at": "2023-10-16T09:16:41Z",
                "updated_at": "2023-10-26T22:10:01Z",
                "closed_at": "2023-10-21T16:41:01Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### \ud83d\udcda Describe the documentation issue\n\nIn the documentation there are several subtleties hidden, that make it hard to understand, what is really going on without looking at the actual implementation. These are:\r\n- it is not right away apparent that the layer works on bipartite graphs. The initial formulas rather indicate, that this is not the case.\r\n- the stacking operator || is not well known and could be easily circumvented by writing out the additions in GATconv\r\n- in GATv2conv the operator is actually used very sloppy already in the paper and the docs would also just be easier to read if || was just replaced by the proper addition.\r\n- in GATv2conv `share_weights` is by default `False` however the formulas indicate, that it should be `True`. \n\n### Suggest a potential alternative/fix\n\nI suggest to explicitly name the different `\\Theta`s used in the different layers by an index `s` and `t` (like it is already done in the docs when talking about input sizes). Do the same for `a` in the `GATconv` layer. Finally remove the unclear `||` operator and just write out the few additions.\r\n\r\nI could create a PR if you give me some rights to push a branch. Otherwise you could replace the class docstrings by \r\n\r\n`gat_conv.py`\r\n```\r\n    r\"\"\"The graph attentional operator from the `\"Graph Attention Networks\"\r\n    <https://arxiv.org/abs/1710.10903>`_ paper\r\n\r\n    .. math::\r\n        \\mathbf{x}^{\\prime}_i = \\alpha_{i,i}\\mathbf{\\Theta}_{s}\\mathbf{x}_{i} +\r\n        \\sum_{j \\in \\mathcal{N}(i)} \\alpha_{i,j}\\mathbf{\\Theta}_{t}\\mathbf{x}_{j},\r\n\r\n    where the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_j\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t}\\mathbf{\\Theta}_{t}\\mathbf{x}_k\r\n        \\right)\\right)}.\r\n\r\n    If the graph has multi-dimensional edge features :math:`\\mathbf{e}_{i,j}`,\r\n    the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_j\r\n        + \\mathbf{a}^{\\top}_{e} \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,j}\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_k\r\n        + \\mathbf{a}^{\\top}_{e} \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,k}]\\right)\\right)}.\r\n\r\n    If the graph is not bipartite, :math:`\\mathbf{\\Theta}_{s} = \\mathbf{\\Theta}_{t}`.\r\n\r\n    Args:\r\n        in_channels (int or tuple): Size of each input sample, or :obj:`-1` to\r\n            derive the size from the first input(s) to the forward method.\r\n            A tuple corresponds to the sizes of source and target\r\n            dimensionalities in case of a bipartite graph.\r\n        out_channels (int): Size of each output sample.\r\n        heads (int, optional): Number of multi-head-attentions.\r\n            (default: :obj:`1`)\r\n        concat (bool, optional): If set to :obj:`False`, the multi-head\r\n            attentions are averaged instead of concatenated.\r\n            (default: :obj:`True`)\r\n        negative_slope (float, optional): LeakyReLU angle of the negative\r\n            slope. (default: :obj:`0.2`)\r\n        dropout (float, optional): Dropout probability of the normalized\r\n            attention coefficients which exposes each node to a stochastically\r\n            sampled neighborhood during training. (default: :obj:`0`)\r\n        add_self_loops (bool, optional): If set to :obj:`False`, will not add\r\n            self-loops to the input graph. (default: :obj:`True`)\r\n        edge_dim (int, optional): Edge feature dimensionality (in case\r\n            there are any). (default: :obj:`None`)\r\n        fill_value (float or torch.Tensor or str, optional): The way to\r\n            generate edge features of self-loops (in case\r\n            :obj:`edge_dim != None`).\r\n            If given as :obj:`float` or :class:`torch.Tensor`, edge features of\r\n            self-loops will be directly given by :obj:`fill_value`.\r\n            If given as :obj:`str`, edge features of self-loops are computed by\r\n            aggregating all features of edges that point to the specific node,\r\n            according to a reduce operation. (:obj:`\"add\"`, :obj:`\"mean\"`,\r\n            :obj:`\"min\"`, :obj:`\"max\"`, :obj:`\"mul\"`). (default: :obj:`\"mean\"`)\r\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\r\n            an additive bias. (default: :obj:`True`)\r\n        **kwargs (optional): Additional arguments of\r\n            :class:`torch_geometric.nn.conv.MessagePassing`.\r\n\r\n    Shapes:\r\n        - **input:**\r\n          node features :math:`(|\\mathcal{V}|, F_{in})` or\r\n          :math:`((|\\mathcal{V_s}|, F_{s}), (|\\mathcal{V_t}|, F_{t}))`\r\n          if bipartite,\r\n          edge indices :math:`(2, |\\mathcal{E}|)`,\r\n          edge features :math:`(|\\mathcal{E}|, D)` *(optional)*\r\n        - **output:** node features :math:`(|\\mathcal{V}|, H * F_{out})` or\r\n          :math:`((|\\mathcal{V}_t|, H * F_{out})` if bipartite.\r\n          If :obj:`return_attention_weights=True`, then\r\n          :math:`((|\\mathcal{V}|, H * F_{out}),\r\n          ((2, |\\mathcal{E}|), (|\\mathcal{E}|, H)))`\r\n          or :math:`((|\\mathcal{V_t}|, H * F_{out}), ((2, |\\mathcal{E}|),\r\n          (|\\mathcal{E}|, H)))` if bipartite\r\n    \"\"\"\r\n```\r\n\r\nand `gatv2_conv.py`\r\n```\r\n    r\"\"\"The GATv2 operator from the `\"How Attentive are Graph Attention\r\n    Networks?\" <https://arxiv.org/abs/2105.14491>`_ paper, which fixes the\r\n    static attention problem of the standard\r\n    :class:`~torch_geometric.conv.GATConv` layer.\r\n    Since the linear layers in the standard GAT are applied right after each\r\n    other, the ranking of attended nodes is unconditioned on the query node.\r\n    In contrast, in :class:`GATv2`, every node can attend to any other node.\r\n\r\n    .. math::\r\n        \\mathbf{x}^{\\prime}_i = \\alpha_{i,i}\\mathbf{\\Theta}_{s}\\mathbf{x}_{i} +\r\n        \\sum_{j \\in \\mathcal{N}(i)} \\alpha_{i,j}\\mathbf{\\Theta}_{t}\\mathbf{x}_{j},\r\n\r\n    where the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i + \\mathbf{\\Theta}_{t} \\mathbf{x}_j\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i + \\mathbf{\\Theta}_{t} \\mathbf{x}_k\r\n        \\right)\\right)}.\r\n\r\n    If the graph has multi-dimensional edge features :math:`\\mathbf{e}_{i,j}`,\r\n    the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i\r\n        + \\mathbf{\\Theta}_{t} \\mathbf{x}_j\r\n        + \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,j}\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i\r\n        + \\mathbf{\\Theta}_{t} \\mathbf{x}_k\r\n        + \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,k}]\r\n        \\right)\\right)}.\r\n\r\n    Args:\r\n        in_channels (int or tuple): Size of each input sample, or :obj:`-1` to\r\n            derive the size from the first input(s) to the forward method.\r\n            A tuple corresponds to the sizes of source and target\r\n            dimensionalities in case of a bipartite graph.\r\n        out_channels (int): Size of each output sample.\r\n        heads (int, optional): Number of multi-head-attentions.\r\n            (default: :obj:`1`)\r\n        concat (bool, optional): If set to :obj:`False`, the multi-head\r\n            attentions are averaged instead of concatenated.\r\n            (default: :obj:`True`)\r\n        negative_slope (float, optional): LeakyReLU angle of the negative\r\n            slope. (default: :obj:`0.2`)\r\n        dropout (float, optional): Dropout probability of the normalized\r\n            attention coefficients which exposes each node to a stochastically\r\n            sampled neighborhood during training. (default: :obj:`0`)\r\n        add_self_loops (bool, optional): If set to :obj:`False`, will not add\r\n            self-loops to the input graph. (default: :obj:`True`)\r\n        edge_dim (int, optional): Edge feature dimensionality (in case\r\n            there are any). (default: :obj:`None`)\r\n        fill_value (float or torch.Tensor or str, optional): The way to\r\n            generate edge features of self-loops\r\n            (in case :obj:`edge_dim != None`).\r\n            If given as :obj:`float` or :class:`torch.Tensor`, edge features of\r\n            self-loops will be directly given by :obj:`fill_value`.\r\n            If given as :obj:`str`, edge features of self-loops are computed by\r\n            aggregating all features of edges that point to the specific node,\r\n            according to a reduce operation. (:obj:`\"add\"`, :obj:`\"mean\"`,\r\n            :obj:`\"min\"`, :obj:`\"max\"`, :obj:`\"mul\"`). (default: :obj:`\"mean\"`)\r\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\r\n            an additive bias. (default: :obj:`True`)\r\n        share_weights (bool, optional): If set to :obj:`True`, the same matrix\r\n            will be applied to the source and the target node of every edge.\r\n            I.e., :math:`\\mathbf{\\Theta}_{s} = \\mathbf{\\Theta}_{t}`.\r\n            (default: :obj:`False`)\r\n        **kwargs (optional): Additional arguments of\r\n            :class:`torch_geometric.nn.conv.MessagePassing`.\r\n\r\n    Shapes:\r\n        - **input:**\r\n          node features :math:`(|\\mathcal{V}|, F_{in})` or\r\n          :math:`((|\\mathcal{V_s}|, F_{s}), (|\\mathcal{V_t}|, F_{t}))`\r\n          if bipartite,\r\n          edge indices :math:`(2, |\\mathcal{E}|)`,\r\n          edge features :math:`(|\\mathcal{E}|, D)` *(optional)*\r\n        - **output:** node features :math:`(|\\mathcal{V}|, H * F_{out})` or\r\n          :math:`((|\\mathcal{V}_t|, H * F_{out})` if bipartite.\r\n          If :obj:`return_attention_weights=True`, then\r\n          :math:`((|\\mathcal{V}|, H * F_{out}),\r\n          ((2, |\\mathcal{E}|), (|\\mathcal{E}|, H)))`\r\n          or :math:`((|\\mathcal{V_t}|, H * F_{out}), ((2, |\\mathcal{E}|),\r\n          (|\\mathcal{E}|, H)))` if bipartite\r\n    \"\"\"\r\n```\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/timeline",
                "performed_via_github_app": null,
                "state_reason": "completed"
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781959598",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8200#issuecomment-1781959598",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200",
                "id": 1781959598,
                "node_id": "IC_kwDOBlHMec5qNouu",
                "user": {
                    "login": "he-jesse",
                    "id": 35433582,
                    "node_id": "MDQ6VXNlcjM1NDMzNTgy",
                    "avatar_url": "https://avatars.githubusercontent.com/u/35433582?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/he-jesse",
                    "html_url": "https://github.com/he-jesse",
                    "followers_url": "https://api.github.com/users/he-jesse/followers",
                    "following_url": "https://api.github.com/users/he-jesse/following{/other_user}",
                    "gists_url": "https://api.github.com/users/he-jesse/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/he-jesse/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/he-jesse/subscriptions",
                    "organizations_url": "https://api.github.com/users/he-jesse/orgs",
                    "repos_url": "https://api.github.com/users/he-jesse/repos",
                    "events_url": "https://api.github.com/users/he-jesse/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/he-jesse/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T22:10:01Z",
                "updated_at": "2023-10-26T22:10:01Z",
                "author_association": "NONE",
                "body": "In that case, I think my confusion is due to the `\\alpha_{i,i}`. When I have self-loops, each node is included in its own neighbor sum, as you said, but without self-loops it doesn't seem that anything is calculated for the first term?\r\n\r\nFor example, if I set the attention parameter `a = [0.0]`, I would expect the attention weights are given by `softmax(0,...,0)` and so `\\alpha_{i,i} = \\alpha_{i,j}` for each `j`, correct? But when I try the following example, I get `\\alpha_{1,0} = 1.0`, when I expect `\\alpha_{1,0} = \\alpha_{1,1} = 0.5`, so I am still confused:\r\n```\r\nfrom collections import OrderedDict\r\nfrom torch import Tensor\r\nfrom torch_geometric.nn.conv import GATv2Conv\r\n\r\nm = GATv2Conv(1, 1, bias=False, add_self_loops=False)\r\nm.load_state_dict(OrderedDict([('att', Tensor([[[0.0]]])),\r\n             ('lin_l.weight', Tensor([[0.0]])),\r\n             ('lin_r.weight', Tensor([[1.0]]))\r\n             ]))\r\nm(Tensor([[1.0],[0.0]]), Tensor([[0],[1]]).long(), return_attention_weights=True)\r\n```\r\nAgain, my apologies if there is a better place for this discussion.",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781959598/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T22:10:02Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882838765",
        "type": "IssuesEvent",
        "actor": {
            "id": 987574,
            "login": "fierval",
            "display_login": "fierval",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fierval",
            "avatar_url": "https://avatars.githubusercontent.com/u/987574?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "opened",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8270",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8270/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8270/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8270/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8270",
                "id": 1964426429,
                "node_id": "I_kwDOBlHMec51FsS9",
                "number": 8270,
                "title": "to_homogeneous() Fails When an Edges Storage contains \"edge_attrs\"",
                "user": {
                    "login": "fierval",
                    "id": 987574,
                    "node_id": "MDQ6VXNlcjk4NzU3NA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/987574?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/fierval",
                    "html_url": "https://github.com/fierval",
                    "followers_url": "https://api.github.com/users/fierval/followers",
                    "following_url": "https://api.github.com/users/fierval/following{/other_user}",
                    "gists_url": "https://api.github.com/users/fierval/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/fierval/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/fierval/subscriptions",
                    "organizations_url": "https://api.github.com/users/fierval/orgs",
                    "repos_url": "https://api.github.com/users/fierval/repos",
                    "events_url": "https://api.github.com/users/fierval/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/fierval/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 712483737,
                        "node_id": "MDU6TGFiZWw3MTI0ODM3Mzc=",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/bug",
                        "name": "bug",
                        "color": "d73a4a",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "open",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 0,
                "created_at": "2023-10-26T21:57:56Z",
                "updated_at": "2023-10-26T21:57:56Z",
                "closed_at": null,
                "author_association": "NONE",
                "active_lock_reason": null,
                "body": "### \ud83d\udc1b Describe the bug\n\nWhen calling `.to_homogeneous`, the following occurs (in `hetero_data.py`):\r\n\r\n![image](https://github.com/pyg-team/pytorch_geometric/assets/987574/057b51fd-b9a9-4a85-9d39-51a047bb0e27)\r\n\r\nThis is due to one of the keys in the store being named `edge_attrs`, which apparently resolves to a method rather than tensor:\r\n```Python\r\ntype(data[GraphConsts.RECEIPT_SCANNEDBY_USER.value].edge_attrs)\r\n<class 'method'>\r\n```\n\n### Environment\n\n* PyG version: 2.4.0\r\n* PyTorch version: 2.1.0\r\n* OS: Win11\r\n* Python version: 3.10\r\n* CUDA/cuDNN version: 11.8\r\n* How you installed PyTorch and PyG (`conda`, `pip`, source): \r\n* Any other relevant information (*e.g.*, version of `torch-scatter`):\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8270/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8270/timeline",
                "performed_via_github_app": null,
                "state_reason": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T21:57:57Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882671291",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15583565715,
            "size": 11,
            "distinct_size": 1,
            "ref": "refs/heads/rebase_to_hetero",
            "head": "6a5951450aa595ac8dfff92b4ec1a27528bdd6d5",
            "before": "263c5320d3a3246770e83ab5b8672e7b7dc2645f",
            "commits": [
                {
                    "sha": "e5025ec11926f35b118a37f90c33648818f213df",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Fix empty edge handling in `MetaPath2Vec` (#8248)\n\nFixes #8246",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/e5025ec11926f35b118a37f90c33648818f213df"
                },
                {
                    "sha": "c44033a972792ce6614ac5d6f135e0c63ac55a9a",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Temporarily fix broken master (#8251)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/c44033a972792ce6614ac5d6f135e0c63ac55a9a"
                },
                {
                    "sha": "7d086efa5ea30cf8e53fda6d7fa9df679e5dafee",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Add a warning on usage of `torch_geometric.nn.DataParallel` (#8250)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/7d086efa5ea30cf8e53fda6d7fa9df679e5dafee"
                },
                {
                    "sha": "4015e8e53e762fbd38ee23cb0bdd6dc401cc26b1",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Update multi-GPU `ogbn-papers100M` example (#8253)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/4015e8e53e762fbd38ee23cb0bdd6dc401cc26b1"
                },
                {
                    "sha": "3854bcfb7bdbe0d69fe417778ccb156792a99994",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "Multi-node+multi-GPU `papers100m`+`GCN` example (#8070)\n\nworking w/ nvidia pyg container\r\n\r\n---------\r\n\r\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\r\nCo-authored-by: rusty1s <matthias.fey@tu-dortmund.de>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/3854bcfb7bdbe0d69fe417778ccb156792a99994"
                },
                {
                    "sha": "3cf9d7767a4f6395a01f4ffc0d97c1b37fcb733a",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "Multi-Node-Multi-GPU Tutorial (#8071)\n\nready for review\r\n\r\n---------\r\n\r\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\r\nCo-authored-by: Akihiro Nitta <nitta@akihironitta.com>\r\nCo-authored-by: Matthias Fey <matthias.fey@tu-dortmund.de>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/3cf9d7767a4f6395a01f4ffc0d97c1b37fcb733a"
                },
                {
                    "sha": "7b2cd53b258dc5c7ea33cb56b0fea1d14bdb6ae0",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Add thumbnail to multi-node-multi-GPU example (#8255)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/7b2cd53b258dc5c7ea33cb56b0fea1d14bdb6ae0"
                },
                {
                    "sha": "3e55a4c263f04ed6676618226f9a0aaf406d99b9",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Fix typos in tutorial (#8259)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/3e55a4c263f04ed6676618226f9a0aaf406d99b9"
                },
                {
                    "sha": "5fad84776a111e3a8c752bb548b5e4568407b1d3",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Only check for equality on materialized `bias` in lazy `Linear` tests (#8267)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/5fad84776a111e3a8c752bb548b5e4568407b1d3"
                },
                {
                    "sha": "3752d94447950e83e9d6e03c1332d0c031a2376c",
                    "author": {
                        "email": "54658925+666even666@users.noreply.github.com",
                        "name": "YiwenC"
                    },
                    "message": "Update instruction to fork the pyg repository and clone the forked repo (#8268)\n\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-15-174.us-west-1.compute.internal>\r\nCo-authored-by: Matthias Fey <matthias.fey@tu-dortmund.de>\r\nCo-authored-by: Akihiro Nitta <nitta@akihironitta.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/3752d94447950e83e9d6e03c1332d0c031a2376c"
                },
                {
                    "sha": "6a5951450aa595ac8dfff92b4ec1a27528bdd6d5",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "Merge branch 'master' into rebase_to_hetero",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/6a5951450aa595ac8dfff92b4ec1a27528bdd6d5"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T21:47:55Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882669499",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15583564820,
            "size": 3,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "b3f8f155e8bfea6cf6cbeec5758fe1108c344188",
            "before": "86958fb976fb2cfc971c2fe8fbeea0e497cc1d38",
            "commits": [
                {
                    "sha": "5fad84776a111e3a8c752bb548b5e4568407b1d3",
                    "author": {
                        "email": "matthias.fey@tu-dortmund.de",
                        "name": "Matthias Fey"
                    },
                    "message": "Only check for equality on materialized `bias` in lazy `Linear` tests (#8267)",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/5fad84776a111e3a8c752bb548b5e4568407b1d3"
                },
                {
                    "sha": "3752d94447950e83e9d6e03c1332d0c031a2376c",
                    "author": {
                        "email": "54658925+666even666@users.noreply.github.com",
                        "name": "YiwenC"
                    },
                    "message": "Update instruction to fork the pyg repository and clone the forked repo (#8268)\n\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-15-174.us-west-1.compute.internal>\r\nCo-authored-by: Matthias Fey <matthias.fey@tu-dortmund.de>\r\nCo-authored-by: Akihiro Nitta <nitta@akihironitta.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/3752d94447950e83e9d6e03c1332d0c031a2376c"
                },
                {
                    "sha": "b3f8f155e8bfea6cf6cbeec5758fe1108c344188",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "puririshi98"
                    },
                    "message": "Merge branch 'master' of https://github.com/pyg-team/pytorch_geometric into cugraph-paper100m",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/b3f8f155e8bfea6cf6cbeec5758fe1108c344188"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T21:47:48Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882568574",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15583513893,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "86958fb976fb2cfc971c2fe8fbeea0e497cc1d38",
            "before": "d54222198fbf53fa302f53492749b50be21ce509",
            "commits": [
                {
                    "sha": "86958fb976fb2cfc971c2fe8fbeea0e497cc1d38",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "cleaning",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/86958fb976fb2cfc971c2fe8fbeea0e497cc1d38"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T21:41:47Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882473251",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 125353938,
            "login": "SZiesche",
            "display_login": "SZiesche",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SZiesche",
            "avatar_url": "https://avatars.githubusercontent.com/u/125353938?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8200",
                "id": 1944753780,
                "node_id": "I_kwDOBlHMec5z6pZ0",
                "number": 8200,
                "title": "GATconv and GATv2conv ",
                "user": {
                    "login": "SZiesche",
                    "id": 125353938,
                    "node_id": "U_kgDOB3i_0g",
                    "avatar_url": "https://avatars.githubusercontent.com/u/125353938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/SZiesche",
                    "html_url": "https://github.com/SZiesche",
                    "followers_url": "https://api.github.com/users/SZiesche/followers",
                    "following_url": "https://api.github.com/users/SZiesche/following{/other_user}",
                    "gists_url": "https://api.github.com/users/SZiesche/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/SZiesche/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/SZiesche/subscriptions",
                    "organizations_url": "https://api.github.com/users/SZiesche/orgs",
                    "repos_url": "https://api.github.com/users/SZiesche/repos",
                    "events_url": "https://api.github.com/users/SZiesche/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/SZiesche/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 3358952533,
                        "node_id": "MDU6TGFiZWwzMzU4OTUyNTMz",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/documentation",
                        "name": "documentation",
                        "color": "0075ca",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 7,
                "created_at": "2023-10-16T09:16:41Z",
                "updated_at": "2023-10-26T21:36:14Z",
                "closed_at": "2023-10-21T16:41:01Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### \ud83d\udcda Describe the documentation issue\n\nIn the documentation there are several subtleties hidden, that make it hard to understand, what is really going on without looking at the actual implementation. These are:\r\n- it is not right away apparent that the layer works on bipartite graphs. The initial formulas rather indicate, that this is not the case.\r\n- the stacking operator || is not well known and could be easily circumvented by writing out the additions in GATconv\r\n- in GATv2conv the operator is actually used very sloppy already in the paper and the docs would also just be easier to read if || was just replaced by the proper addition.\r\n- in GATv2conv `share_weights` is by default `False` however the formulas indicate, that it should be `True`. \n\n### Suggest a potential alternative/fix\n\nI suggest to explicitly name the different `\\Theta`s used in the different layers by an index `s` and `t` (like it is already done in the docs when talking about input sizes). Do the same for `a` in the `GATconv` layer. Finally remove the unclear `||` operator and just write out the few additions.\r\n\r\nI could create a PR if you give me some rights to push a branch. Otherwise you could replace the class docstrings by \r\n\r\n`gat_conv.py`\r\n```\r\n    r\"\"\"The graph attentional operator from the `\"Graph Attention Networks\"\r\n    <https://arxiv.org/abs/1710.10903>`_ paper\r\n\r\n    .. math::\r\n        \\mathbf{x}^{\\prime}_i = \\alpha_{i,i}\\mathbf{\\Theta}_{s}\\mathbf{x}_{i} +\r\n        \\sum_{j \\in \\mathcal{N}(i)} \\alpha_{i,j}\\mathbf{\\Theta}_{t}\\mathbf{x}_{j},\r\n\r\n    where the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_j\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t}\\mathbf{\\Theta}_{t}\\mathbf{x}_k\r\n        \\right)\\right)}.\r\n\r\n    If the graph has multi-dimensional edge features :math:`\\mathbf{e}_{i,j}`,\r\n    the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_j\r\n        + \\mathbf{a}^{\\top}_{e} \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,j}\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_k\r\n        + \\mathbf{a}^{\\top}_{e} \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,k}]\\right)\\right)}.\r\n\r\n    If the graph is not bipartite, :math:`\\mathbf{\\Theta}_{s} = \\mathbf{\\Theta}_{t}`.\r\n\r\n    Args:\r\n        in_channels (int or tuple): Size of each input sample, or :obj:`-1` to\r\n            derive the size from the first input(s) to the forward method.\r\n            A tuple corresponds to the sizes of source and target\r\n            dimensionalities in case of a bipartite graph.\r\n        out_channels (int): Size of each output sample.\r\n        heads (int, optional): Number of multi-head-attentions.\r\n            (default: :obj:`1`)\r\n        concat (bool, optional): If set to :obj:`False`, the multi-head\r\n            attentions are averaged instead of concatenated.\r\n            (default: :obj:`True`)\r\n        negative_slope (float, optional): LeakyReLU angle of the negative\r\n            slope. (default: :obj:`0.2`)\r\n        dropout (float, optional): Dropout probability of the normalized\r\n            attention coefficients which exposes each node to a stochastically\r\n            sampled neighborhood during training. (default: :obj:`0`)\r\n        add_self_loops (bool, optional): If set to :obj:`False`, will not add\r\n            self-loops to the input graph. (default: :obj:`True`)\r\n        edge_dim (int, optional): Edge feature dimensionality (in case\r\n            there are any). (default: :obj:`None`)\r\n        fill_value (float or torch.Tensor or str, optional): The way to\r\n            generate edge features of self-loops (in case\r\n            :obj:`edge_dim != None`).\r\n            If given as :obj:`float` or :class:`torch.Tensor`, edge features of\r\n            self-loops will be directly given by :obj:`fill_value`.\r\n            If given as :obj:`str`, edge features of self-loops are computed by\r\n            aggregating all features of edges that point to the specific node,\r\n            according to a reduce operation. (:obj:`\"add\"`, :obj:`\"mean\"`,\r\n            :obj:`\"min\"`, :obj:`\"max\"`, :obj:`\"mul\"`). (default: :obj:`\"mean\"`)\r\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\r\n            an additive bias. (default: :obj:`True`)\r\n        **kwargs (optional): Additional arguments of\r\n            :class:`torch_geometric.nn.conv.MessagePassing`.\r\n\r\n    Shapes:\r\n        - **input:**\r\n          node features :math:`(|\\mathcal{V}|, F_{in})` or\r\n          :math:`((|\\mathcal{V_s}|, F_{s}), (|\\mathcal{V_t}|, F_{t}))`\r\n          if bipartite,\r\n          edge indices :math:`(2, |\\mathcal{E}|)`,\r\n          edge features :math:`(|\\mathcal{E}|, D)` *(optional)*\r\n        - **output:** node features :math:`(|\\mathcal{V}|, H * F_{out})` or\r\n          :math:`((|\\mathcal{V}_t|, H * F_{out})` if bipartite.\r\n          If :obj:`return_attention_weights=True`, then\r\n          :math:`((|\\mathcal{V}|, H * F_{out}),\r\n          ((2, |\\mathcal{E}|), (|\\mathcal{E}|, H)))`\r\n          or :math:`((|\\mathcal{V_t}|, H * F_{out}), ((2, |\\mathcal{E}|),\r\n          (|\\mathcal{E}|, H)))` if bipartite\r\n    \"\"\"\r\n```\r\n\r\nand `gatv2_conv.py`\r\n```\r\n    r\"\"\"The GATv2 operator from the `\"How Attentive are Graph Attention\r\n    Networks?\" <https://arxiv.org/abs/2105.14491>`_ paper, which fixes the\r\n    static attention problem of the standard\r\n    :class:`~torch_geometric.conv.GATConv` layer.\r\n    Since the linear layers in the standard GAT are applied right after each\r\n    other, the ranking of attended nodes is unconditioned on the query node.\r\n    In contrast, in :class:`GATv2`, every node can attend to any other node.\r\n\r\n    .. math::\r\n        \\mathbf{x}^{\\prime}_i = \\alpha_{i,i}\\mathbf{\\Theta}_{s}\\mathbf{x}_{i} +\r\n        \\sum_{j \\in \\mathcal{N}(i)} \\alpha_{i,j}\\mathbf{\\Theta}_{t}\\mathbf{x}_{j},\r\n\r\n    where the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i + \\mathbf{\\Theta}_{t} \\mathbf{x}_j\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i + \\mathbf{\\Theta}_{t} \\mathbf{x}_k\r\n        \\right)\\right)}.\r\n\r\n    If the graph has multi-dimensional edge features :math:`\\mathbf{e}_{i,j}`,\r\n    the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i\r\n        + \\mathbf{\\Theta}_{t} \\mathbf{x}_j\r\n        + \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,j}\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i\r\n        + \\mathbf{\\Theta}_{t} \\mathbf{x}_k\r\n        + \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,k}]\r\n        \\right)\\right)}.\r\n\r\n    Args:\r\n        in_channels (int or tuple): Size of each input sample, or :obj:`-1` to\r\n            derive the size from the first input(s) to the forward method.\r\n            A tuple corresponds to the sizes of source and target\r\n            dimensionalities in case of a bipartite graph.\r\n        out_channels (int): Size of each output sample.\r\n        heads (int, optional): Number of multi-head-attentions.\r\n            (default: :obj:`1`)\r\n        concat (bool, optional): If set to :obj:`False`, the multi-head\r\n            attentions are averaged instead of concatenated.\r\n            (default: :obj:`True`)\r\n        negative_slope (float, optional): LeakyReLU angle of the negative\r\n            slope. (default: :obj:`0.2`)\r\n        dropout (float, optional): Dropout probability of the normalized\r\n            attention coefficients which exposes each node to a stochastically\r\n            sampled neighborhood during training. (default: :obj:`0`)\r\n        add_self_loops (bool, optional): If set to :obj:`False`, will not add\r\n            self-loops to the input graph. (default: :obj:`True`)\r\n        edge_dim (int, optional): Edge feature dimensionality (in case\r\n            there are any). (default: :obj:`None`)\r\n        fill_value (float or torch.Tensor or str, optional): The way to\r\n            generate edge features of self-loops\r\n            (in case :obj:`edge_dim != None`).\r\n            If given as :obj:`float` or :class:`torch.Tensor`, edge features of\r\n            self-loops will be directly given by :obj:`fill_value`.\r\n            If given as :obj:`str`, edge features of self-loops are computed by\r\n            aggregating all features of edges that point to the specific node,\r\n            according to a reduce operation. (:obj:`\"add\"`, :obj:`\"mean\"`,\r\n            :obj:`\"min\"`, :obj:`\"max\"`, :obj:`\"mul\"`). (default: :obj:`\"mean\"`)\r\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\r\n            an additive bias. (default: :obj:`True`)\r\n        share_weights (bool, optional): If set to :obj:`True`, the same matrix\r\n            will be applied to the source and the target node of every edge.\r\n            I.e., :math:`\\mathbf{\\Theta}_{s} = \\mathbf{\\Theta}_{t}`.\r\n            (default: :obj:`False`)\r\n        **kwargs (optional): Additional arguments of\r\n            :class:`torch_geometric.nn.conv.MessagePassing`.\r\n\r\n    Shapes:\r\n        - **input:**\r\n          node features :math:`(|\\mathcal{V}|, F_{in})` or\r\n          :math:`((|\\mathcal{V_s}|, F_{s}), (|\\mathcal{V_t}|, F_{t}))`\r\n          if bipartite,\r\n          edge indices :math:`(2, |\\mathcal{E}|)`,\r\n          edge features :math:`(|\\mathcal{E}|, D)` *(optional)*\r\n        - **output:** node features :math:`(|\\mathcal{V}|, H * F_{out})` or\r\n          :math:`((|\\mathcal{V}_t|, H * F_{out})` if bipartite.\r\n          If :obj:`return_attention_weights=True`, then\r\n          :math:`((|\\mathcal{V}|, H * F_{out}),\r\n          ((2, |\\mathcal{E}|), (|\\mathcal{E}|, H)))`\r\n          or :math:`((|\\mathcal{V_t}|, H * F_{out}), ((2, |\\mathcal{E}|),\r\n          (|\\mathcal{E}|, H)))` if bipartite\r\n    \"\"\"\r\n```\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/timeline",
                "performed_via_github_app": null,
                "state_reason": "completed"
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781927973",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8200#issuecomment-1781927973",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200",
                "id": 1781927973,
                "node_id": "IC_kwDOBlHMec5qNhAl",
                "user": {
                    "login": "SZiesche",
                    "id": 125353938,
                    "node_id": "U_kgDOB3i_0g",
                    "avatar_url": "https://avatars.githubusercontent.com/u/125353938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/SZiesche",
                    "html_url": "https://github.com/SZiesche",
                    "followers_url": "https://api.github.com/users/SZiesche/followers",
                    "following_url": "https://api.github.com/users/SZiesche/following{/other_user}",
                    "gists_url": "https://api.github.com/users/SZiesche/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/SZiesche/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/SZiesche/subscriptions",
                    "organizations_url": "https://api.github.com/users/SZiesche/orgs",
                    "repos_url": "https://api.github.com/users/SZiesche/repos",
                    "events_url": "https://api.github.com/users/SZiesche/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/SZiesche/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T21:36:14Z",
                "updated_at": "2023-10-26T21:36:14Z",
                "author_association": "CONTRIBUTOR",
                "body": "No it is not necessary. `GATv2Conv` has a flag `share_weights`, if you set this to `True`, then the same Linear layer will be used. By default it is `False` even if your graph is not bipartite.",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781927973/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T21:36:15Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882410702",
        "type": "WatchEvent",
        "actor": {
            "id": 10685037,
            "login": "Jmemon",
            "display_login": "Jmemon",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Jmemon",
            "avatar_url": "https://avatars.githubusercontent.com/u/10685037?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "started"
        },
        "public": true,
        "created_at": "2023-10-26T21:32:46Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32882405149",
        "type": "IssueCommentEvent",
        "actor": {
            "id": 35433582,
            "login": "he-jesse",
            "display_login": "he-jesse",
            "gravatar_id": "",
            "url": "https://api.github.com/users/he-jesse",
            "avatar_url": "https://avatars.githubusercontent.com/u/35433582?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "action": "created",
            "issue": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200",
                "repository_url": "https://api.github.com/repos/pyg-team/pytorch_geometric",
                "labels_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/labels{/name}",
                "comments_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/comments",
                "events_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/events",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8200",
                "id": 1944753780,
                "node_id": "I_kwDOBlHMec5z6pZ0",
                "number": 8200,
                "title": "GATconv and GATv2conv ",
                "user": {
                    "login": "SZiesche",
                    "id": 125353938,
                    "node_id": "U_kgDOB3i_0g",
                    "avatar_url": "https://avatars.githubusercontent.com/u/125353938?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/SZiesche",
                    "html_url": "https://github.com/SZiesche",
                    "followers_url": "https://api.github.com/users/SZiesche/followers",
                    "following_url": "https://api.github.com/users/SZiesche/following{/other_user}",
                    "gists_url": "https://api.github.com/users/SZiesche/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/SZiesche/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/SZiesche/subscriptions",
                    "organizations_url": "https://api.github.com/users/SZiesche/orgs",
                    "repos_url": "https://api.github.com/users/SZiesche/repos",
                    "events_url": "https://api.github.com/users/SZiesche/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/SZiesche/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "labels": [
                    {
                        "id": 3358952533,
                        "node_id": "MDU6TGFiZWwzMzU4OTUyNTMz",
                        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/labels/documentation",
                        "name": "documentation",
                        "color": "0075ca",
                        "default": true,
                        "description": ""
                    }
                ],
                "state": "closed",
                "locked": false,
                "assignee": null,
                "assignees": [],
                "milestone": null,
                "comments": 6,
                "created_at": "2023-10-16T09:16:41Z",
                "updated_at": "2023-10-26T21:32:26Z",
                "closed_at": "2023-10-21T16:41:01Z",
                "author_association": "CONTRIBUTOR",
                "active_lock_reason": null,
                "body": "### \ud83d\udcda Describe the documentation issue\n\nIn the documentation there are several subtleties hidden, that make it hard to understand, what is really going on without looking at the actual implementation. These are:\r\n- it is not right away apparent that the layer works on bipartite graphs. The initial formulas rather indicate, that this is not the case.\r\n- the stacking operator || is not well known and could be easily circumvented by writing out the additions in GATconv\r\n- in GATv2conv the operator is actually used very sloppy already in the paper and the docs would also just be easier to read if || was just replaced by the proper addition.\r\n- in GATv2conv `share_weights` is by default `False` however the formulas indicate, that it should be `True`. \n\n### Suggest a potential alternative/fix\n\nI suggest to explicitly name the different `\\Theta`s used in the different layers by an index `s` and `t` (like it is already done in the docs when talking about input sizes). Do the same for `a` in the `GATconv` layer. Finally remove the unclear `||` operator and just write out the few additions.\r\n\r\nI could create a PR if you give me some rights to push a branch. Otherwise you could replace the class docstrings by \r\n\r\n`gat_conv.py`\r\n```\r\n    r\"\"\"The graph attentional operator from the `\"Graph Attention Networks\"\r\n    <https://arxiv.org/abs/1710.10903>`_ paper\r\n\r\n    .. math::\r\n        \\mathbf{x}^{\\prime}_i = \\alpha_{i,i}\\mathbf{\\Theta}_{s}\\mathbf{x}_{i} +\r\n        \\sum_{j \\in \\mathcal{N}(i)} \\alpha_{i,j}\\mathbf{\\Theta}_{t}\\mathbf{x}_{j},\r\n\r\n    where the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_j\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t}\\mathbf{\\Theta}_{t}\\mathbf{x}_k\r\n        \\right)\\right)}.\r\n\r\n    If the graph has multi-dimensional edge features :math:`\\mathbf{e}_{i,j}`,\r\n    the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_j\r\n        + \\mathbf{a}^{\\top}_{e} \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,j}\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{a}^{\\top}_{s} \\mathbf{\\Theta}_{s}\\mathbf{x}_i\r\n        + \\mathbf{a}^{\\top}_{t} \\mathbf{\\Theta}_{t}\\mathbf{x}_k\r\n        + \\mathbf{a}^{\\top}_{e} \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,k}]\\right)\\right)}.\r\n\r\n    If the graph is not bipartite, :math:`\\mathbf{\\Theta}_{s} = \\mathbf{\\Theta}_{t}`.\r\n\r\n    Args:\r\n        in_channels (int or tuple): Size of each input sample, or :obj:`-1` to\r\n            derive the size from the first input(s) to the forward method.\r\n            A tuple corresponds to the sizes of source and target\r\n            dimensionalities in case of a bipartite graph.\r\n        out_channels (int): Size of each output sample.\r\n        heads (int, optional): Number of multi-head-attentions.\r\n            (default: :obj:`1`)\r\n        concat (bool, optional): If set to :obj:`False`, the multi-head\r\n            attentions are averaged instead of concatenated.\r\n            (default: :obj:`True`)\r\n        negative_slope (float, optional): LeakyReLU angle of the negative\r\n            slope. (default: :obj:`0.2`)\r\n        dropout (float, optional): Dropout probability of the normalized\r\n            attention coefficients which exposes each node to a stochastically\r\n            sampled neighborhood during training. (default: :obj:`0`)\r\n        add_self_loops (bool, optional): If set to :obj:`False`, will not add\r\n            self-loops to the input graph. (default: :obj:`True`)\r\n        edge_dim (int, optional): Edge feature dimensionality (in case\r\n            there are any). (default: :obj:`None`)\r\n        fill_value (float or torch.Tensor or str, optional): The way to\r\n            generate edge features of self-loops (in case\r\n            :obj:`edge_dim != None`).\r\n            If given as :obj:`float` or :class:`torch.Tensor`, edge features of\r\n            self-loops will be directly given by :obj:`fill_value`.\r\n            If given as :obj:`str`, edge features of self-loops are computed by\r\n            aggregating all features of edges that point to the specific node,\r\n            according to a reduce operation. (:obj:`\"add\"`, :obj:`\"mean\"`,\r\n            :obj:`\"min\"`, :obj:`\"max\"`, :obj:`\"mul\"`). (default: :obj:`\"mean\"`)\r\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\r\n            an additive bias. (default: :obj:`True`)\r\n        **kwargs (optional): Additional arguments of\r\n            :class:`torch_geometric.nn.conv.MessagePassing`.\r\n\r\n    Shapes:\r\n        - **input:**\r\n          node features :math:`(|\\mathcal{V}|, F_{in})` or\r\n          :math:`((|\\mathcal{V_s}|, F_{s}), (|\\mathcal{V_t}|, F_{t}))`\r\n          if bipartite,\r\n          edge indices :math:`(2, |\\mathcal{E}|)`,\r\n          edge features :math:`(|\\mathcal{E}|, D)` *(optional)*\r\n        - **output:** node features :math:`(|\\mathcal{V}|, H * F_{out})` or\r\n          :math:`((|\\mathcal{V}_t|, H * F_{out})` if bipartite.\r\n          If :obj:`return_attention_weights=True`, then\r\n          :math:`((|\\mathcal{V}|, H * F_{out}),\r\n          ((2, |\\mathcal{E}|), (|\\mathcal{E}|, H)))`\r\n          or :math:`((|\\mathcal{V_t}|, H * F_{out}), ((2, |\\mathcal{E}|),\r\n          (|\\mathcal{E}|, H)))` if bipartite\r\n    \"\"\"\r\n```\r\n\r\nand `gatv2_conv.py`\r\n```\r\n    r\"\"\"The GATv2 operator from the `\"How Attentive are Graph Attention\r\n    Networks?\" <https://arxiv.org/abs/2105.14491>`_ paper, which fixes the\r\n    static attention problem of the standard\r\n    :class:`~torch_geometric.conv.GATConv` layer.\r\n    Since the linear layers in the standard GAT are applied right after each\r\n    other, the ranking of attended nodes is unconditioned on the query node.\r\n    In contrast, in :class:`GATv2`, every node can attend to any other node.\r\n\r\n    .. math::\r\n        \\mathbf{x}^{\\prime}_i = \\alpha_{i,i}\\mathbf{\\Theta}_{s}\\mathbf{x}_{i} +\r\n        \\sum_{j \\in \\mathcal{N}(i)} \\alpha_{i,j}\\mathbf{\\Theta}_{t}\\mathbf{x}_{j},\r\n\r\n    where the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i + \\mathbf{\\Theta}_{t} \\mathbf{x}_j\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i + \\mathbf{\\Theta}_{t} \\mathbf{x}_k\r\n        \\right)\\right)}.\r\n\r\n    If the graph has multi-dimensional edge features :math:`\\mathbf{e}_{i,j}`,\r\n    the attention coefficients :math:`\\alpha_{i,j}` are computed as\r\n\r\n    .. math::\r\n        \\alpha_{i,j} =\r\n        \\frac{\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i\r\n        + \\mathbf{\\Theta}_{t} \\mathbf{x}_j\r\n        + \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,j}\r\n        \\right)\\right)}\r\n        {\\sum_{k \\in \\mathcal{N}(i) \\cup \\{ i \\}}\r\n        \\exp\\left(\\mathbf{a}^{\\top}\\mathrm{LeakyReLU}\\left(\r\n        \\mathbf{\\Theta}_{s} \\mathbf{x}_i\r\n        + \\mathbf{\\Theta}_{t} \\mathbf{x}_k\r\n        + \\mathbf{\\Theta}_{e} \\mathbf{e}_{i,k}]\r\n        \\right)\\right)}.\r\n\r\n    Args:\r\n        in_channels (int or tuple): Size of each input sample, or :obj:`-1` to\r\n            derive the size from the first input(s) to the forward method.\r\n            A tuple corresponds to the sizes of source and target\r\n            dimensionalities in case of a bipartite graph.\r\n        out_channels (int): Size of each output sample.\r\n        heads (int, optional): Number of multi-head-attentions.\r\n            (default: :obj:`1`)\r\n        concat (bool, optional): If set to :obj:`False`, the multi-head\r\n            attentions are averaged instead of concatenated.\r\n            (default: :obj:`True`)\r\n        negative_slope (float, optional): LeakyReLU angle of the negative\r\n            slope. (default: :obj:`0.2`)\r\n        dropout (float, optional): Dropout probability of the normalized\r\n            attention coefficients which exposes each node to a stochastically\r\n            sampled neighborhood during training. (default: :obj:`0`)\r\n        add_self_loops (bool, optional): If set to :obj:`False`, will not add\r\n            self-loops to the input graph. (default: :obj:`True`)\r\n        edge_dim (int, optional): Edge feature dimensionality (in case\r\n            there are any). (default: :obj:`None`)\r\n        fill_value (float or torch.Tensor or str, optional): The way to\r\n            generate edge features of self-loops\r\n            (in case :obj:`edge_dim != None`).\r\n            If given as :obj:`float` or :class:`torch.Tensor`, edge features of\r\n            self-loops will be directly given by :obj:`fill_value`.\r\n            If given as :obj:`str`, edge features of self-loops are computed by\r\n            aggregating all features of edges that point to the specific node,\r\n            according to a reduce operation. (:obj:`\"add\"`, :obj:`\"mean\"`,\r\n            :obj:`\"min\"`, :obj:`\"max\"`, :obj:`\"mul\"`). (default: :obj:`\"mean\"`)\r\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\r\n            an additive bias. (default: :obj:`True`)\r\n        share_weights (bool, optional): If set to :obj:`True`, the same matrix\r\n            will be applied to the source and the target node of every edge.\r\n            I.e., :math:`\\mathbf{\\Theta}_{s} = \\mathbf{\\Theta}_{t}`.\r\n            (default: :obj:`False`)\r\n        **kwargs (optional): Additional arguments of\r\n            :class:`torch_geometric.nn.conv.MessagePassing`.\r\n\r\n    Shapes:\r\n        - **input:**\r\n          node features :math:`(|\\mathcal{V}|, F_{in})` or\r\n          :math:`((|\\mathcal{V_s}|, F_{s}), (|\\mathcal{V_t}|, F_{t}))`\r\n          if bipartite,\r\n          edge indices :math:`(2, |\\mathcal{E}|)`,\r\n          edge features :math:`(|\\mathcal{E}|, D)` *(optional)*\r\n        - **output:** node features :math:`(|\\mathcal{V}|, H * F_{out})` or\r\n          :math:`((|\\mathcal{V}_t|, H * F_{out})` if bipartite.\r\n          If :obj:`return_attention_weights=True`, then\r\n          :math:`((|\\mathcal{V}|, H * F_{out}),\r\n          ((2, |\\mathcal{E}|), (|\\mathcal{E}|, H)))`\r\n          or :math:`((|\\mathcal{V_t}|, H * F_{out}), ((2, |\\mathcal{E}|),\r\n          (|\\mathcal{E}|, H)))` if bipartite\r\n    \"\"\"\r\n```\r\n",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "timeline_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200/timeline",
                "performed_via_github_app": null,
                "state_reason": "completed"
            },
            "comment": {
                "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781923863",
                "html_url": "https://github.com/pyg-team/pytorch_geometric/issues/8200#issuecomment-1781923863",
                "issue_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/8200",
                "id": 1781923863,
                "node_id": "IC_kwDOBlHMec5qNgAX",
                "user": {
                    "login": "he-jesse",
                    "id": 35433582,
                    "node_id": "MDQ6VXNlcjM1NDMzNTgy",
                    "avatar_url": "https://avatars.githubusercontent.com/u/35433582?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/he-jesse",
                    "html_url": "https://github.com/he-jesse",
                    "followers_url": "https://api.github.com/users/he-jesse/followers",
                    "following_url": "https://api.github.com/users/he-jesse/following{/other_user}",
                    "gists_url": "https://api.github.com/users/he-jesse/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/he-jesse/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/he-jesse/subscriptions",
                    "organizations_url": "https://api.github.com/users/he-jesse/orgs",
                    "repos_url": "https://api.github.com/users/he-jesse/repos",
                    "events_url": "https://api.github.com/users/he-jesse/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/he-jesse/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "created_at": "2023-10-26T21:32:26Z",
                "updated_at": "2023-10-26T21:32:26Z",
                "author_association": "NONE",
                "body": "Thank you, that does resolve my confusion regarding `GATConv` and the behavior of self-loops, although I am still confused about `GATv2Conv`. Is `\\Theta_s = \\Theta_t` still necessary in the case of a non-bipartite graph in `GATv2Conv`?",
                "reactions": {
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues/comments/1781923863/reactions",
                    "total_count": 0,
                    "+1": 0,
                    "-1": 0,
                    "laugh": 0,
                    "hooray": 0,
                    "confused": 0,
                    "heart": 0,
                    "rocket": 0,
                    "eyes": 0
                },
                "performed_via_github_app": null
            }
        },
        "public": true,
        "created_at": "2023-10-26T21:32:26Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32881687227",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15583069182,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "d54222198fbf53fa302f53492749b50be21ce509",
            "before": "8849c7df6b35858d7b36f1257edfe5357b5c01b5",
            "commits": [
                {
                    "sha": "d54222198fbf53fa302f53492749b50be21ce509",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "cleaning",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/d54222198fbf53fa302f53492749b50be21ce509"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T20:56:13Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32881269737",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15582862746,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "8849c7df6b35858d7b36f1257edfe5357b5c01b5",
            "before": "c911f3932e81dfe3cb178e422e9dc426e81d6020",
            "commits": [
                {
                    "sha": "8849c7df6b35858d7b36f1257edfe5357b5c01b5",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "cleanup",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/8849c7df6b35858d7b36f1257edfe5357b5c01b5"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T20:36:18Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32881241630",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15582848881,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "c911f3932e81dfe3cb178e422e9dc426e81d6020",
            "before": "171e893df9e098a11c4bd158ab9baf5e84704162",
            "commits": [
                {
                    "sha": "c911f3932e81dfe3cb178e422e9dc426e81d6020",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "cleaning",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/c911f3932e81dfe3cb178e422e9dc426e81d6020"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T20:34:59Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    },
    {
        "id": "32881231851",
        "type": "PushEvent",
        "actor": {
            "id": 20074092,
            "login": "puririshi98",
            "display_login": "puririshi98",
            "gravatar_id": "",
            "url": "https://api.github.com/users/puririshi98",
            "avatar_url": "https://avatars.githubusercontent.com/u/20074092?"
        },
        "repo": {
            "id": 106024057,
            "name": "pyg-team/pytorch_geometric",
            "url": "https://api.github.com/repos/pyg-team/pytorch_geometric"
        },
        "payload": {
            "repository_id": 106024057,
            "push_id": 15582844065,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/cugraph-paper100m",
            "head": "171e893df9e098a11c4bd158ab9baf5e84704162",
            "before": "09a04a30b2a15d58b7abb21115d5b9617a95c209",
            "commits": [
                {
                    "sha": "171e893df9e098a11c4bd158ab9baf5e84704162",
                    "author": {
                        "email": "puririshi98@berkeley.edu",
                        "name": "Rishi Puri"
                    },
                    "message": "cleanup",
                    "distinct": true,
                    "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/commits/171e893df9e098a11c4bd158ab9baf5e84704162"
                }
            ]
        },
        "public": true,
        "created_at": "2023-10-26T20:34:30Z",
        "org": {
            "id": 89995122,
            "login": "pyg-team",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/pyg-team",
            "avatar_url": "https://avatars.githubusercontent.com/u/89995122?"
        }
    }
]